

var Dozer;
(function (Dozer) {
    var Mappings = (function () {
        function Mappings(doc, mappings) {
            if (mappings === void 0) { mappings = []; }
            this.doc = doc;
            this.mappings = mappings;
        }
        return Mappings;
    }());
    Dozer.Mappings = Mappings;
    var Mapping = (function () {
        function Mapping() {
            this.fields = [];
            this.map_id = Core.getUUID();
            this.class_a = new MappingClass('');
            this.class_b = new MappingClass('');
        }
        Mapping.prototype.name = function () {
            return Dozer.nameOf(this.class_a) + " -> " + Dozer.nameOf(this.class_b);
        };
        Mapping.prototype.hasFromField = function (name) {
            return _.find(this.fields, function (f) { return name === f.a.value; });
        };
        Mapping.prototype.hasToField = function (name) {
            return _.find(this.fields, function (f) { return name === f.b.value; });
        };
        Mapping.prototype.saveToElement = function (element) {
            Dozer.appendElement(this.class_a, element, "class-a", 2);
            Dozer.appendElement(this.class_b, element, "class-b", 2);
            Dozer.appendElement(this.fields, element, "field", 2);
            Dozer.appendAttributes(this, element, ["class_a", "class_b", "fields"]);
        };
        return Mapping;
    }());
    Dozer.Mapping = Mapping;
    var MappingClass = (function () {
        function MappingClass(value) {
            this.value = value;
        }
        MappingClass.prototype.saveToElement = function (element) {
            Dozer.addTextNode(element, this.value);
            Dozer.appendAttributes(this, element, ["value", "properties", "error"]);
        };
        return MappingClass;
    }());
    Dozer.MappingClass = MappingClass;
    var Field = (function () {
        function Field(a, b) {
            this.a = a;
            this.b = b;
        }
        Field.prototype.name = function () {
            return Dozer.nameOf(this.a) + " -> " + Dozer.nameOf(this.b);
        };
        Field.prototype.saveToElement = function (element) {
            Dozer.appendElement(this.a, element, "a", 3);
            Dozer.appendElement(this.b, element, "b", 3);
            Dozer.appendAttributes(this, element, ["a", "b"]);
        };
        return Field;
    }());
    Dozer.Field = Field;
    var FieldDefinition = (function () {
        function FieldDefinition(value) {
            this.value = value;
        }
        FieldDefinition.prototype.saveToElement = function (element) {
            Dozer.addTextNode(element, this.value);
            Dozer.appendAttributes(this, element, ["value", "properties", "error"]);
        };
        return FieldDefinition;
    }());
    Dozer.FieldDefinition = FieldDefinition;
    var UnmappedField = (function () {
        function UnmappedField(fromField, property, toField) {
            if (toField === void 0) { toField = null; }
            this.fromField = fromField;
            this.property = property;
            this.toField = toField;
        }
        return UnmappedField;
    }());
    Dozer.UnmappedField = UnmappedField;
})(Dozer || (Dozer = {}));

var Dozer;
(function (Dozer) {
    Dozer.pluginName = 'Dozer';
    Dozer.templatePath = 'plugins/dozer/html';
    Dozer.log = Logger.get(Dozer.pluginName);
    Dozer.jmxDomain = 'net.sourceforge.dozer';
    Dozer.introspectorMBean = "hawtio:type=Introspector";
    Dozer.excludedPackages = [
        'java.lang',
        'int',
        'double',
        'long'
    ];
    Dozer.elementNameMappings = {
        "Mapping": "mapping",
        "MappingClass": "class",
        "Field": "field"
    };
    function loadDozerModel(xml, pageId) {
        var doc = xml;
        if (angular.isString(xml)) {
            doc = $.parseXML(xml);
        }
        console.log("Has Dozer XML document: " + doc);
        var model = new Dozer.Mappings(doc);
        var mappingsElement = doc.documentElement;
        copyAttributes(model, mappingsElement);
        $(mappingsElement).children("mapping").each(function (idx, element) {
            var mapping = createMapping(element);
            model.mappings.push(mapping);
        });
        return model;
    }
    Dozer.loadDozerModel = loadDozerModel;
    function saveToXmlText(model) {
        var element = model.doc.documentElement.cloneNode(false);
        appendElement(model.mappings, element, null, 1);
        Dozer.addTextNode(element, "\n");
        var xmlText = Core.xmlNodeToString(element);
        return '<?xml version="1.0" encoding="UTF-8"?>\n' + xmlText;
    }
    Dozer.saveToXmlText = saveToXmlText;
    function findUnmappedFields(workspace, mapping, fn) {
        var className = mapping.class_a.value;
        findProperties(workspace, className, null, function (properties) {
            var answer = [];
            angular.forEach(properties, function (property) {
                console.log("got property " + JSON.stringify(property, null, "  "));
                var name = property.name;
                if (name) {
                    if (mapping.hasFromField(name)) {
                    }
                    else {
                        answer.push(new Dozer.UnmappedField(name, property));
                    }
                }
            });
            fn(answer);
        });
    }
    Dozer.findUnmappedFields = findUnmappedFields;
    function findProperties(workspace, className, filter, fn) {
        if (filter === void 0) { filter = null; }
        if (fn === void 0) { fn = null; }
        return [];
    }
    Dozer.findProperties = findProperties;
    function findClassNames(workspace, searchText, limit, fn) {
        if (limit === void 0) { limit = 20; }
        if (fn === void 0) { fn = null; }
        return [];
    }
    Dozer.findClassNames = findClassNames;
    function getIntrospectorMBean(workspace) {
        return Dozer.introspectorMBean;
    }
    Dozer.getIntrospectorMBean = getIntrospectorMBean;
    function loadModelFromTree(rootTreeNode, oldModel) {
        oldModel.mappings = [];
        angular.forEach(rootTreeNode.childList, function (treeNode) {
            var mapping = Core.pathGet(treeNode, ["data", "entity"]);
            if (mapping) {
                oldModel.mappings.push(mapping);
            }
        });
        return oldModel;
    }
    Dozer.loadModelFromTree = loadModelFromTree;
    function createDozerTree(model) {
        var id = "mappings";
        var folder = new Folder(id);
        folder.addClass = "net-sourceforge-dozer-mappings";
        folder.domain = Dozer.jmxDomain;
        folder.typeName = "mappings";
        folder.entity = model;
        folder.key = Core.toSafeDomID(id);
        angular.forEach(model.mappings, function (mapping) {
            var mappingFolder = createMappingFolder(mapping, folder);
            folder.children.push(mappingFolder);
        });
        return folder;
    }
    Dozer.createDozerTree = createDozerTree;
    function createMappingFolder(mapping, parentFolder) {
        var mappingName = mapping.name();
        var mappingFolder = new Folder(mappingName);
        mappingFolder.addClass = "net-sourceforge-dozer-mapping";
        mappingFolder.typeName = "mapping";
        mappingFolder.domain = Dozer.jmxDomain;
        mappingFolder.key = (parentFolder ? parentFolder.key + "_" : "") + Core.toSafeDomID(mappingName);
        mappingFolder.parent = parentFolder;
        mappingFolder.entity = mapping;
        mappingFolder.icon = "img/icons/dozer/class.gif";
        angular.forEach(mapping.fields, function (field) {
            addMappingFieldFolder(field, mappingFolder);
        });
        return mappingFolder;
    }
    Dozer.createMappingFolder = createMappingFolder;
    function addMappingFieldFolder(field, mappingFolder) {
        var name = field.name();
        var fieldFolder = new Folder(name);
        fieldFolder.addClass = "net-sourceforge-dozer-field";
        fieldFolder.typeName = "field";
        fieldFolder.domain = Dozer.jmxDomain;
        fieldFolder.key = mappingFolder.key + "_" + Core.toSafeDomID(name);
        fieldFolder.parent = mappingFolder;
        fieldFolder.entity = field;
        fieldFolder.icon = "img/icons/dozer/attribute.gif";
        mappingFolder.children.push(fieldFolder);
        return fieldFolder;
    }
    Dozer.addMappingFieldFolder = addMappingFieldFolder;
    function createMapping(element) {
        var mapping = new Dozer.Mapping();
        var elementJQ = $(element);
        mapping.class_a = createMappingClass(elementJQ.children("class-a"));
        mapping.class_b = createMappingClass(elementJQ.children("class-b"));
        elementJQ.children("field").each(function (idx, fieldElement) {
            var field = createField(fieldElement);
            mapping.fields.push(field);
        });
        copyAttributes(mapping, element);
        return mapping;
    }
    function createField(element) {
        if (element) {
            var jqe = $(element);
            var a = jqe.children("a").text();
            var b = jqe.children("b").text();
            var field = new Dozer.Field(new Dozer.FieldDefinition(a), new Dozer.FieldDefinition(b));
            copyAttributes(field, element);
            return field;
        }
        return new Dozer.Field(new Dozer.FieldDefinition(""), new Dozer.FieldDefinition(""));
    }
    function createMappingClass(jqElement) {
        if (jqElement && jqElement[0]) {
            var element = jqElement[0];
            var text = element.textContent;
            if (text) {
                var mappingClass = new Dozer.MappingClass(text);
                copyAttributes(mappingClass, element);
                return mappingClass;
            }
        }
        return new Dozer.MappingClass("");
    }
    function copyAttributes(object, element) {
        var attributeMap = element.attributes;
        for (var i = 0; i < attributeMap.length; i++) {
            var attMap = attributeMap;
            var attr = attMap.item(i);
            if (attr) {
                var name = attr.localName;
                var value = attr.value;
                if (name && !name.startsWith("xmlns")) {
                    var safeName = Forms.safeIdentifier(name);
                    object[safeName] = value;
                }
            }
        }
    }
    function appendAttributes(object, element, ignorePropertyNames) {
        angular.forEach(object, function (value, key) {
            if (_.some(ignorePropertyNames, function (name) { return name === key; })) {
            }
            else {
                if (value) {
                    var text = value.toString();
                    var name = key.replace(/_/g, '-');
                    element.setAttribute(name, text);
                }
            }
        });
    }
    Dozer.appendAttributes = appendAttributes;
    function appendElement(object, element, elementName, indentLevel) {
        if (elementName === void 0) { elementName = null; }
        if (indentLevel === void 0) { indentLevel = 0; }
        var answer = null;
        if (angular.isArray(object)) {
            angular.forEach(object, function (child) {
                answer = appendElement(child, element, elementName, indentLevel);
            });
        }
        else if (object) {
            if (!elementName) {
                var className = Core.pathGet(object, ["constructor", "name"]);
                if (!className) {
                    console.log("WARNING: no class name for value " + object);
                }
                else {
                    elementName = Dozer.elementNameMappings[className];
                    if (!elementName) {
                        console.log("WARNING: could not map class name " + className + " to an XML element name");
                    }
                }
            }
            if (elementName) {
                if (indentLevel) {
                    var text = indentText(indentLevel);
                    Dozer.addTextNode(element, text);
                }
                var doc = element.ownerDocument || document;
                var child = doc.createElement(elementName);
                var fn = object.saveToElement;
                if (fn) {
                    fn.apply(object, [child]);
                }
                else {
                    angular.forEach(object, function (value, key) {
                        console.log("has key " + key + " value " + value);
                    });
                }
                if ($(child).children().length) {
                    var text = indentText(indentLevel);
                    Dozer.addTextNode(child, text);
                }
                element.appendChild(child);
                answer = child;
            }
        }
        return answer;
    }
    Dozer.appendElement = appendElement;
    function nameOf(object) {
        var text = angular.isObject(object) ? object["value"] : null;
        if (!text && angular.isString(object)) {
            text = object;
        }
        return text || "?";
    }
    Dozer.nameOf = nameOf;
    function addTextNode(element, text) {
        if (text) {
            var doc = element.ownerDocument || document;
            var child = doc.createTextNode(text);
            element.appendChild(child);
        }
    }
    Dozer.addTextNode = addTextNode;
    function indentText(indentLevel) {
        var text = "\n";
        for (var i = 0; i < indentLevel; i++) {
            text += "  ";
        }
        return text;
    }
})(Dozer || (Dozer = {}));

var Dozer;
(function (Dozer) {
    function schemaConfigure(schemas) {
        io_hawt_dozer_schema_Field["tabs"] = {
            'Fields': ['a.value', 'b.value'],
            'From Field': ['a\\..*'],
            'To Field': ['b\\..*'],
            'Field Configuration': ['*']
        };
        io_hawt_dozer_schema_Mapping["tabs"] = {
            'Classes': ['a', 'b'],
            'From Class': ['classA'],
            'To Class': ['classB'],
            'Class Configuration': ['*']
        };
        io_hawt_dozer_schema_Mapping.properties.fieldOrFieldExclude.hidden = true;
        Core.pathSet(io_hawt_dozer_schema_Field, ["properties", "a", "properties", "value", "label"], "From Field");
        Core.pathSet(io_hawt_dozer_schema_Field, ["properties", "b", "properties", "value", "label"], "To Field");
        io_hawt_dozer_schema_Mapping.properties['a'] = {
            type: 'string',
            label: 'From Class'
        };
        io_hawt_dozer_schema_Mapping.properties['b'] = {
            type: 'string',
            label: 'To Class'
        };
        Core.pathSet(io_hawt_dozer_schema_Field, ["properties", "a", "ignorePrefixInLabel"], true);
        Core.pathSet(io_hawt_dozer_schema_Field, ["properties", "b", "ignorePrefixInLabel"], true);
        Core.pathSet(io_hawt_dozer_schema_Mapping, ["properties", "class-a", "ignorePrefixInLabel"], true);
        Core.pathSet(io_hawt_dozer_schema_Mapping, ["properties", "class-b", "ignorePrefixInLabel"], true);
        function toJavaType(ref) {
            return ref.replace(/^urn:jsonschema:/, '').replace(/:/g, '.');
        }
        function processProperties(schema) {
            if (schema.id) {
                var id = toJavaType(schema.id);
                schema.type = schema.javaType = id;
                var props = schema.properties;
                if (props) {
                    var keys = _.keys(props);
                    _.forEach(keys, function (key) {
                        if (key.indexOf('-') !== -1) {
                            var newKey = _.camelCase(key);
                            props[newKey] = _.clone(props[key]);
                            delete props[key];
                        }
                    });
                    _.forOwn(props, function (prop, key) {
                        if (prop.type === "object") {
                            processProperties(prop);
                            if (prop.$ref) {
                                prop.type = toJavaType(prop.$ref);
                            }
                        }
                    });
                    schemas.addSchema(schema.javaType, schema);
                }
            }
        }
        ;
        _.forEach([io_hawt_dozer_schema_Field, io_hawt_dozer_schema_Mapping, io_hawt_dozer_schema_Mappings], function (schema) {
            schema.javaType = schema.id;
            processProperties(schema);
        });
    }
    Dozer.schemaConfigure = schemaConfigure;
})(Dozer || (Dozer = {}));

var Dozer;
(function (Dozer) {
    Dozer._module = angular.module(Dozer.pluginName, []);
    Dozer._module.constant('dozerPaths', ['/workspaces/:namespace/projects/:projectId/forge']);
    Dozer._module.run(["SchemaRegistry", function (SchemaRegistry) {
        Dozer.schemaConfigure(SchemaRegistry);
        Dozer.log.debug("running");
    }]);
    hawtioPluginLoader.addModule(Dozer.pluginName);
})(Dozer || (Dozer = {}));

var Wiki;
(function (Wiki) {
    Wiki.log = Logger.get("Wiki");
    Wiki.camelNamespaces = ["http://camel.apache.org/schema/spring", "http://camel.apache.org/schema/blueprint"];
    Wiki.springNamespaces = ["http://www.springframework.org/schema/beans"];
    Wiki.droolsNamespaces = ["http://drools.org/schema/drools-spring"];
    Wiki.dozerNamespaces = ["http://dozer.sourceforge.net"];
    Wiki.activemqNamespaces = ["http://activemq.apache.org/schema/core"];
    Wiki.useCamelCanvasByDefault = false;
    Wiki.excludeAdjustmentPrefixes = ["http://", "https://", "#"];
    (function (ViewMode) {
        ViewMode[ViewMode["List"] = 0] = "List";
        ViewMode[ViewMode["Icon"] = 1] = "Icon";
    })(Wiki.ViewMode || (Wiki.ViewMode = {}));
    var ViewMode = Wiki.ViewMode;
    ;
    Wiki.customWikiViewPages = ["/formTable", "/camel/diagram", "/camel/canvas", "/camel/properties", "/dozer/mappings"];
    Wiki.hideExtensions = [".profile"];
    var defaultFileNamePattern = /^[a-zA-Z0-9._-]*$/;
    var defaultFileNamePatternInvalid = "Name must be: letters, numbers, and . _ or - characters";
    var defaultFileNameExtensionPattern = "";
    var defaultLowerCaseFileNamePattern = /^[a-z0-9._-]*$/;
    var defaultLowerCaseFileNamePatternInvalid = "Name must be: lower-case letters, numbers, and . _ or - characters";
    Wiki.documentTemplates = [
        {
            label: "Folder",
            tooltip: "Create a new folder to contain documents",
            folder: true,
            icon: "/img/icons/wiki/folder.gif",
            exemplar: "myfolder",
            regex: defaultLowerCaseFileNamePattern,
            invalid: defaultLowerCaseFileNamePatternInvalid
        },
        {
            label: "Properties File",
            tooltip: "A properties file typically used to configure Java classes",
            exemplar: "properties-file.properties",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".properties"
        },
        {
            label: "JSON File",
            tooltip: "A file containing JSON data",
            exemplar: "document.json",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".json"
        },
        {
            label: "Markdown Document",
            tooltip: "A basic markup document using the Markdown wiki markup, particularly useful for ReadMe files in directories",
            exemplar: "ReadMe.md",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".md"
        },
        {
            label: "Text Document",
            tooltip: "A plain text file",
            exemplar: "document.text",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".txt"
        },
        {
            label: "HTML Document",
            tooltip: "A HTML document you can edit directly using the HTML markup",
            exemplar: "document.html",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".html"
        },
        {
            label: "XML Document",
            tooltip: "An empty XML document",
            exemplar: "document.xml",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".xml"
        },
        {
            label: "Integration Flows",
            tooltip: "Camel routes for defining your integration flows",
            children: [
                {
                    label: "Camel XML document",
                    tooltip: "A vanilla Camel XML document for integration flows",
                    icon: "/img/icons/camel.svg",
                    exemplar: "camel.xml",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".xml"
                },
                {
                    label: "Camel OSGi Blueprint XML document",
                    tooltip: "A vanilla Camel XML document for integration flows when using OSGi Blueprint",
                    icon: "/img/icons/camel.svg",
                    exemplar: "camel-blueprint.xml",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".xml"
                },
                {
                    label: "Camel Spring XML document",
                    tooltip: "A vanilla Camel XML document for integration flows when using the Spring framework",
                    icon: "/img/icons/camel.svg",
                    exemplar: "camel-spring.xml",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".xml"
                }
            ]
        },
        {
            label: "Source code",
            tooltip: "Create a source file",
            children: [
                {
                    label: "Java",
                    tooltip: "A Java language file",
                    icon: "/img/icons/java.svg",
                    exemplar: "document.java",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".java"
                },
                {
                    label: "Go",
                    tooltip: "A Go language file",
                    icon: "/img/icons/gopher.png",
                    exemplar: "document.go",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".go"
                },
                {
                    label: "Python",
                    tooltip: "A Python language file",
                    icon: "/img/icons/python.png",
                    exemplar: "document.py",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".py"
                },
                {
                    label: "JavaScript",
                    tooltip: "A JavaScript language file",
                    icon: "/img/icons/javascript.png",
                    exemplar: "document.js",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".js"
                },
                {
                    label: "Ruby",
                    tooltip: "A Ruby language file",
                    icon: "/img/icons/ruby.png",
                    exemplar: "document.rb",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".rb"
                },
                {
                    label: "Swift",
                    tooltip: "A Swift language file",
                    icon: "/img/icons/swift.png",
                    exemplar: "document.swift",
                    regex: defaultFileNamePattern,
                    invalid: defaultFileNamePatternInvalid,
                    extension: ".swift"
                }
            ]
        },
        {
            label: "Data Mapping Document",
            tooltip: "Dozer based configuration of mapping documents",
            icon: "/img/icons/dozer/dozer.gif",
            exemplar: "dozer-mapping.xml",
            regex: defaultFileNamePattern,
            invalid: defaultFileNamePatternInvalid,
            extension: ".xml"
        }
    ];
    function isFMCContainer(workspace) {
        return false;
    }
    Wiki.isFMCContainer = isFMCContainer;
    function isWikiEnabled(workspace, jolokia, localStorage) {
        return true;
    }
    Wiki.isWikiEnabled = isWikiEnabled;
    function goToLink(link, $timeout, $location) {
        var href = Core.trimLeading(link, "#");
        $timeout(function () {
            Wiki.log.debug("About to navigate to: " + href);
            $location.url(href);
        }, 100);
    }
    Wiki.goToLink = goToLink;
    function customViewLinks($scope) {
        var prefix = Core.trimLeading(Wiki.startLink($scope), "#");
        return Wiki.customWikiViewPages.map(function (path) { return prefix + path; });
    }
    Wiki.customViewLinks = customViewLinks;
    function createWizardTree(workspace, $scope) {
        var root = createFolder("New Documents");
        addCreateWizardFolders(workspace, $scope, root, Wiki.documentTemplates);
        return root;
    }
    Wiki.createWizardTree = createWizardTree;
    function createFolder(name) {
        return {
            name: name,
            children: []
        };
    }
    function addCreateWizardFolders(workspace, $scope, parent, templates) {
        angular.forEach(templates, function (template) {
            if (template.generated) {
                if (template.generated.init) {
                    template.generated.init(workspace, $scope);
                }
            }
            var title = template.label || key;
            var node = createFolder(title);
            node.parent = parent;
            node.entity = template;
            var addClass = template.addClass;
            if (addClass) {
                node.addClass = addClass;
            }
            var key = template.exemplar;
            var parentKey = parent.key || "";
            node.key = parentKey ? parentKey + "_" + key : key;
            var icon = template.icon;
            if (icon) {
                node.icon = Core.url(icon);
            }
            var tooltip = template["tooltip"] || template["description"] || '';
            node.tooltip = tooltip;
            if (template["folder"]) {
                node.isFolder = function () { return true; };
            }
            parent.children.push(node);
            var children = template.children;
            if (children) {
                addCreateWizardFolders(workspace, $scope, node, children);
            }
        });
    }
    Wiki.addCreateWizardFolders = addCreateWizardFolders;
    function startWikiLink(projectId, branch) {
        var start = UrlHelpers.join(Developer.projectLink(projectId), "/wiki");
        if (branch) {
            start = UrlHelpers.join(start, 'branch', branch);
        }
        return start;
    }
    Wiki.startWikiLink = startWikiLink;
    function startLink($scope) {
        var projectId = $scope.projectId;
        var branch = $scope.branch;
        return startWikiLink(projectId, branch);
    }
    Wiki.startLink = startLink;
    function isIndexPage(path) {
        return path && (_.endsWith(path, "index.md") || _.endsWith(path, "index.html") || _.endsWith(path, "index")) ? true : false;
    }
    Wiki.isIndexPage = isIndexPage;
    function viewLink(projectId, branch, pageId, $location, fileName) {
        if (fileName === void 0) { fileName = null; }
        var link = null;
        var start = startWikiLink(projectId, branch);
        if (pageId) {
            var view = isIndexPage(pageId) ? "/book/" : "/view/";
            link = start + view + encodePath(Core.trimLeading(pageId, "/"));
        }
        else {
            var path = $location.path();
            link = "#" + path.replace(/(edit|create)/, "view");
        }
        if (fileName && pageId && _.endsWith(pageId, fileName)) {
            return link;
        }
        if (fileName) {
            if (!_.endsWith(link, "/")) {
                link += "/";
            }
            link += fileName;
        }
        return link;
    }
    Wiki.viewLink = viewLink;
    function branchLink(projectId, branch, pageId, $location, fileName) {
        if (fileName === void 0) { fileName = null; }
        return viewLink(projectId, branch, pageId, $location, fileName);
    }
    Wiki.branchLink = branchLink;
    function editLink($scope, pageId, $location) {
        var link = null;
        var format = Wiki.fileFormat(pageId);
        switch (format) {
            case "image":
                break;
            default:
                var start = startLink($scope);
                if (pageId) {
                    link = start + "/edit/" + encodePath(pageId);
                }
                else {
                    var path = $location.path();
                    link = "#" + path.replace(/(view|create)/, "edit");
                }
        }
        return link;
    }
    Wiki.editLink = editLink;
    function customEditLink($scope, pageId, $location, editView) {
        if (editView === void 0) { editView = "edit"; }
        var link = null;
        var format = Wiki.fileFormat(pageId);
        switch (format) {
            case "image":
                break;
            default:
                var start = startLink($scope);
                if (pageId) {
                    link = UrlHelpers.join(start, editView, encodePath(pageId));
                }
                else {
                    var path = $location.path();
                    link = "#" + path.replace(/(view|create)/, editView);
                }
        }
        return link;
    }
    Wiki.customEditLink = customEditLink;
    function createLink($scope, pageId, $location) {
        var path = $location.path();
        var start = startLink($scope);
        var link = '';
        if (pageId) {
            link = start + "/create/" + encodePath(pageId);
        }
        else {
            link = "#" + path.replace(/(view|edit|formTable)/, "create");
        }
        var idx = link.lastIndexOf("/");
        if (idx > 0 && !$scope.children && !path.startsWith("/wiki/formTable")) {
            link = link.substring(0, idx + 1);
        }
        return link;
    }
    Wiki.createLink = createLink;
    function encodePath(pageId) {
        return pageId.split("/").map(encodeURIComponent).join("/");
    }
    Wiki.encodePath = encodePath;
    function decodePath(pageId) {
        return pageId.split("/").map(decodeURIComponent).join("/");
    }
    Wiki.decodePath = decodePath;
    function fileFormat(name, fileExtensionTypeRegistry) {
        var extension = fileExtension(name);
        if (name) {
            if (name === "Jenkinsfile") {
                extension = "groovy";
            }
        }
        var answer = null;
        if (!fileExtensionTypeRegistry) {
            fileExtensionTypeRegistry = HawtioCore.injector.get("fileExtensionTypeRegistry");
        }
        angular.forEach(fileExtensionTypeRegistry, function (array, key) {
            if (array.indexOf(extension) >= 0) {
                answer = key;
            }
        });
        return answer;
    }
    Wiki.fileFormat = fileFormat;
    function fileName(path) {
        if (path) {
            var idx = path.lastIndexOf("/");
            if (idx > 0) {
                return path.substring(idx + 1);
            }
        }
        return path;
    }
    Wiki.fileName = fileName;
    function fileParent(path) {
        if (path) {
            var idx = path.lastIndexOf("/");
            if (idx > 0) {
                return path.substring(0, idx);
            }
        }
        return "";
    }
    Wiki.fileParent = fileParent;
    function hideFileNameExtensions(name) {
        if (name) {
            angular.forEach(Wiki.hideExtensions, function (extension) {
                if (name.endsWith(extension)) {
                    name = name.substring(0, name.length - extension.length);
                }
            });
        }
        return name;
    }
    Wiki.hideFileNameExtensions = hideFileNameExtensions;
    function gitRestURL($scope, path, branch) {
        return Forge.createHttpUrl($scope.projectId, new URI(Kubernetes.inject("ForgeApiURL"))
            .segment('repos/project')
            .segment($scope.namespace || Kubernetes.currentKubernetesNamespace())
            .segment($scope.projectId)
            .segment('raw')
            .segment(path)
            .toString()) + '?branch=' + (branch || $scope.branch || 'master');
    }
    Wiki.gitRestURL = gitRestURL;
    function fileIconHtml(row, $scope) {
        var name = row.name;
        var path = row.path;
        var branch = row.branch;
        var directory = row.directory;
        var xmlNamespaces = row.xml_namespaces || row.xmlNamespaces;
        var iconUrl = row.iconUrl;
        var entity = row.entity;
        if (entity) {
            name = name || entity.name;
            path = path || entity.path;
            branch = branch || entity.branch;
            directory = directory || entity.directory;
            xmlNamespaces = xmlNamespaces || entity.xml_namespaces || entity.xmlNamespaces;
            iconUrl = iconUrl || entity.iconUrl;
        }
        branch = branch || "master";
        var css = null;
        var icon = null;
        var git = false;
        var extension = fileExtension(name);
        if (xmlNamespaces && xmlNamespaces.length) {
            if (_.some(xmlNamespaces, function (ns) { return _.some(Wiki.camelNamespaces, ns); })) {
                icon = "img/icons/camel.svg";
            }
            else if (_.some(xmlNamespaces, function (ns) { return _.some(Wiki.dozerNamespaces, ns); })) {
                icon = "img/icons/dozer/dozer.gif";
            }
            else if (_.some(xmlNamespaces, function (ns) { return _.some(Wiki.activemqNamespaces, ns); })) {
                icon = "img/icons/messagebroker.svg";
            }
            else {
                Wiki.log.debug("file " + name + " has namespaces " + xmlNamespaces);
            }
        }
        if (!iconUrl && name) {
            var lowerName = name.toLowerCase();
            if (lowerName == "pom.xml") {
                iconUrl = "img/maven-icon.png";
            }
            else if (lowerName == "web.config") {
                iconUrl = "img/icons/dotnet.png";
            }
            else if (lowerName == "jenkinsfile") {
                iconUrl = "img/jenkins-icon.svg";
            }
            else if (lowerName == "fabric8.yml") {
                iconUrl = "img/fabric8_icon.svg";
            }
            else if (lowerName == "funktion.yml") {
                iconUrl = "img/icons/funktion.png";
            }
        }
        if (iconUrl) {
            css = null;
            icon = iconUrl;
        }
        if (!icon) {
            if (directory) {
                switch (extension) {
                    case 'profile':
                        css = "fa fa-book";
                        break;
                    default:
                        css = "fa fa-folder folder-icon";
                }
            }
            else {
                switch (extension) {
                    case 'cs':
                        icon = "img/icons/csharp.png";
                    case 'java':
                        icon = "img/java.svg";
                        break;
                    case 'go':
                        icon = "img/icons/gopher.png";
                        break;
                    case 'groovy':
                        icon = "img/icons/groovy.svg";
                        break;
                    case 'js':
                        icon = "img/icons/javascript.png";
                        break;
                    case 'php':
                        icon = "img/icons/php.png";
                        break;
                    case 'py':
                        icon = "img/icons/python.png";
                        break;
                    case 'rb':
                        icon = "img/icons/ruby.png";
                        break;
                    case 'swift':
                        icon = "img/icons/swift.png";
                        break;
                    case 'png':
                    case 'svg':
                    case 'jpg':
                    case 'gif':
                        css = null;
                        git = true;
                        icon = Wiki.gitRestURL($scope, path, branch);
                        break;
                    case 'json':
                    case 'xml':
                        css = "fa fa-file-text";
                        break;
                    case 'md':
                        css = "fa fa-file-text-o";
                        break;
                    default:
                        css = "fa fa-file-o";
                }
            }
        }
        if (icon) {
            if (git) {
                return '<img http-src="' + icon + '"' + (extension === 'svg' ? ' media-type="image/svg+xml"' : '') + ' http-src-changed="child.downloadURL" />';
            }
            else {
                return '<img src="' + Core.url(icon) + '">';
            }
        }
        else {
            return '<i class="' + css + '"></i>';
        }
    }
    Wiki.fileIconHtml = fileIconHtml;
    function iconClass(row) {
        var name = row.getProperty("name");
        var extension = fileExtension(name);
        var directory = row.getProperty("directory");
        if (directory) {
            return "fa fa-folder";
        }
        if ("xml" === extension) {
            return "fa fa-cog";
        }
        else if ("md" === extension) {
            return "fa fa-file-text-o";
        }
        return "fa fa-file-o";
    }
    Wiki.iconClass = iconClass;
    function initScope($scope, $routeParams, $location) {
        $scope.pageId = Wiki.pageId($routeParams, $location);
        $scope.projectId = $routeParams["projectId"] || $scope.id;
        $scope.namespace = $routeParams["namespace"] || $scope.namespace;
        Kubernetes.setCurrentKubernetesNamespace($scope.namespace);
        $scope.owner = $routeParams["owner"];
        $scope.repoId = $routeParams["repoId"];
        $scope.branch = $routeParams["branch"] || $location.search()["branch"];
        $scope.objectId = $routeParams["objectId"] || $routeParams["diffObjectId1"];
        $scope.startLink = startLink($scope);
        $scope.$viewLink = viewLink($scope.projectId, $scope.branch, $scope.pageId, $location);
        $scope.historyLink = startLink($scope) + "/history/" + ($scope.pageId || "");
        $scope.wikiRepository = new Wiki.GitWikiRepository($scope);
        $scope.$workspaceLink = Developer.workspaceLink();
        $scope.$projectLink = Developer.projectLink($scope.projectId);
        $scope.breadcrumbConfig = Developer.createProjectBreadcrumbs($scope.projectId, Wiki.createSourceBreadcrumbs($scope));
        $scope.subTabConfig = Developer.createProjectSubNavBars($scope.projectId);
        Forge.updateForgeProject($scope);
        Forge.redirectToSetupSecretsIfNotDefined($scope, $location);
    }
    Wiki.initScope = initScope;
    function loadBranches(jolokia, wikiRepository, $scope, isFmc) {
        if (isFmc === void 0) { isFmc = false; }
        wikiRepository.branches(function (response) {
            $scope.branches = _.sortBy(response, function (v) { return Core.versionToSortableString(v); }, true);
            if (!$scope.branch && _.find($scope.branches, function (branch) {
                return branch === "master";
            })) {
                $scope.branch = "master";
            }
            Core.$apply($scope);
        });
    }
    Wiki.loadBranches = loadBranches;
    function pageId($routeParams, $location) {
        var pageId = $routeParams['page'];
        if (!pageId) {
            for (var i = 0; i < 100; i++) {
                var value = $routeParams['path' + i];
                if (angular.isDefined(value)) {
                    if (!pageId) {
                        pageId = value;
                    }
                    else {
                        pageId += "/" + value;
                    }
                }
                else
                    break;
            }
            return pageId || "/";
        }
        if (!pageId) {
            pageId = pageIdFromURI($location.path());
        }
        return pageId;
    }
    Wiki.pageId = pageId;
    function pageIdFromURI(url) {
        var wikiPrefix = "/wiki/";
        if (url && _.startsWith(url, wikiPrefix)) {
            var idx = url.indexOf("/", wikiPrefix.length + 1);
            if (idx > 0) {
                return url.substring(idx + 1, url.length);
            }
        }
        return null;
    }
    Wiki.pageIdFromURI = pageIdFromURI;
    function fileExtension(name) {
        if (name.indexOf('#') > 0)
            name = name.substring(0, name.indexOf('#'));
        return Core.fileExtension(name, "markdown");
    }
    Wiki.fileExtension = fileExtension;
    function onComplete(status) {
        console.log("Completed operation with status: " + JSON.stringify(status));
    }
    Wiki.onComplete = onComplete;
    function parseJson(text) {
        if (text) {
            try {
                return JSON.parse(text);
            }
            catch (e) {
                Core.notification("error", "Failed to parse JSON: " + e);
            }
        }
        return null;
    }
    Wiki.parseJson = parseJson;
    function adjustHref($scope, $location, href, fileExtension) {
        var extension = fileExtension ? "." + fileExtension : "";
        var path = $location.path();
        var folderPath = path;
        var idx = path.lastIndexOf("/");
        if (idx > 0) {
            var lastName = path.substring(idx + 1);
            if (lastName.indexOf(".") >= 0) {
                folderPath = path.substring(0, idx);
            }
        }
        if (href.startsWith('../')) {
            var parts = href.split('/');
            var pathParts = folderPath.split('/');
            var parents = parts.filter(function (part) {
                return part === "..";
            });
            parts = parts.last(parts.length - parents.length);
            pathParts = pathParts.first(pathParts.length - parents.length);
            return '#' + pathParts.join('/') + '/' + parts.join('/') + extension + $location.hash();
        }
        if (href.startsWith('/')) {
            return Wiki.branchLink($scope.projectId, $scope.branch, href + extension, $location) + extension;
        }
        if (!_.some(Wiki.excludeAdjustmentPrefixes, function (exclude) {
            return href.startsWith(exclude);
        })) {
            return '#' + folderPath + "/" + href + extension + $location.hash();
        }
        else {
            return null;
        }
    }
    Wiki.adjustHref = adjustHref;
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki.pluginName = 'wiki';
    Wiki.templatePath = 'plugins/wiki/html/';
    Wiki.tab = null;
    Wiki._module = angular.module(Wiki.pluginName, ['hawtio-core', 'hawtio-ui', 'treeControl', 'ui.codemirror']);
    Wiki.controller = PluginHelpers.createControllerFunction(Wiki._module, 'Wiki');
    Wiki.route = PluginHelpers.createRoutingFunction(Wiki.templatePath);
    Wiki._module.config(["$routeProvider", function ($routeProvider) {
            angular.forEach(["", "/branch/:branch"], function (path) {
                var startContext = '/workspaces/:namespace/projects/:projectId/wiki';
                $routeProvider.
                    when(UrlHelpers.join(startContext, path, 'view'), Wiki.route('viewPage.html', false)).
                    when(UrlHelpers.join(startContext, path, 'create/:page*'), Wiki.route('create.html', false)).
                    when(startContext + path + '/view/:page*', { templateUrl: 'plugins/wiki/html/viewPage.html', reloadOnSearch: false }).
                    when(startContext + path + '/book/:page*', { templateUrl: 'plugins/wiki/html/viewBook.html', reloadOnSearch: false }).
                    when(startContext + path + '/edit/:page*', { templateUrl: 'plugins/wiki/html/editPage.html' }).
                    when(startContext + path + '/version/:page*\/:objectId', { templateUrl: 'plugins/wiki/html/viewPage.html' }).
                    when(startContext + path + '/history/:page*', { templateUrl: 'plugins/wiki/html/history.html' }).
                    when(startContext + path + '/commit/:page*\/:objectId', { templateUrl: 'plugins/wiki/html/commit.html' }).
                    when(startContext + path + '/commitDetail/:page*\/:objectId', { templateUrl: 'plugins/wiki/html/commitDetail.html' }).
                    when(startContext + path + '/diff/:diffObjectId1/:diffObjectId2/:page*', { templateUrl: 'plugins/wiki/html/viewPage.html', reloadOnSearch: false }).
                    when(startContext + path + '/formTable/:page*', { templateUrl: 'plugins/wiki/html/formTable.html' }).
                    when(startContext + path + '/dozer/mappings/:page*', { templateUrl: 'plugins/wiki/html/dozerMappings.html' }).
                    when(startContext + path + '/configurations/:page*', { templateUrl: 'plugins/wiki/html/configurations.html' }).
                    when(startContext + path + '/configuration/:pid/:page*', { templateUrl: 'plugins/wiki/html/configuration.html' }).
                    when(startContext + path + '/newConfiguration/:factoryPid/:page*', { templateUrl: 'plugins/wiki/html/configuration.html' }).
                    when(startContext + path + '/camel/diagram/:page*', { templateUrl: 'plugins/wiki/html/camelDiagram.html' }).
                    when(startContext + path + '/camel/canvas/:page*', { templateUrl: 'plugins/wiki/html/camelCanvas.html' }).
                    when(startContext + path + '/camel/properties/:page*', { templateUrl: 'plugins/wiki/html/camelProperties.html' });
            });
        }]);
    Wiki._module.factory('wikiBranchMenu', function () {
        var self = {
            items: [],
            addExtension: function (item) {
                self.items.push(item);
            },
            applyMenuExtensions: function (menu) {
                if (self.items.length === 0) {
                    return;
                }
                var extendedMenu = [{
                        heading: "Actions"
                    }];
                self.items.forEach(function (item) {
                    if (item.valid()) {
                        extendedMenu.push(item);
                    }
                });
                if (extendedMenu.length > 1) {
                    menu.push(extendedMenu);
                }
            }
        };
        return self;
    });
    Wiki._module.factory('WikiGitUrlPrefix', function () {
        return "";
    });
    Wiki._module.factory('fileExtensionTypeRegistry', function () {
        return {
            "image": ["svg", "png", "ico", "bmp", "jpg", "gif"],
            "markdown": ["md", "markdown", "mdown", "mkdn", "mkd"],
            "htmlmixed": ["html", "xhtml", "htm"],
            "text/x-ruby": ["rb"],
            "text/x-python": ["py"],
            "text/x-go": ["go"],
            "text/x-java": ["java"],
            "text/x-groovy": ["groovy"],
            "text/x-scala": ["scala"],
            "text/x-swift": ["swift"],
            "javascript": ["js", "json", "javascript", "jscript", "ecmascript", "form"],
            "xml": ["xml", "xsd", "wsdl", "atom"],
            "text/x-yaml": ["yaml", "yml"],
            "properties": ["properties"]
        };
    });
    Wiki._module.filter('fileIconClass', function () { return Wiki.iconClass; });
    Wiki._module.run(["$location", "viewRegistry", "localStorage", "layoutFull", "helpRegistry", "preferencesRegistry", "wikiRepository",
        "$rootScope", function ($location, viewRegistry, localStorage, layoutFull, helpRegistry, preferencesRegistry, wikiRepository, $rootScope) {
            viewRegistry['wiki'] = Wiki.templatePath + 'layoutWiki.html';
            Wiki.documentTemplates.forEach(function (template) {
                if (!template['regex']) {
                    template.regex = /(?:)/;
                }
            });
        }]);
    hawtioPluginLoader.addModule(Wiki.pluginName);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    var GitWikiRepository = (function () {
        function GitWikiRepository($scope) {
            this.directoryPrefix = "";
            var ForgeApiURL = Kubernetes.inject("ForgeApiURL");
            this.$http = Kubernetes.inject("$http");
            this.config = Forge.createHttpConfig();
            var owner = $scope.owner;
            var repoName = $scope.repoId;
            var projectId = $scope.projectId;
            this.projectId = projectId;
            var ns = $scope.namespace || Kubernetes.currentKubernetesNamespace();
            this.baseUrl = UrlHelpers.join(ForgeApiURL, "repos/project", ns, projectId);
        }
        GitWikiRepository.prototype.getPage = function (branch, path, objectId, fn) {
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            this.doGet(UrlHelpers.join("content", path || "/"), query, function (data, status, headers, config) {
                if (data) {
                    var details = null;
                    if (angular.isArray(data)) {
                        angular.forEach(data, function (file) {
                            if (!file.directory && file.type === "dir") {
                                file.directory = true;
                            }
                        });
                        details = {
                            directory: true,
                            children: data
                        };
                    }
                    else {
                        details = data;
                        var content = data.content;
                        if (content) {
                            details.text = window.atob(content);
                        }
                    }
                    fn(details);
                }
            });
        };
        GitWikiRepository.prototype.putPage = function (branch, path, contents, commitMessage, successFn, errorFn) {
            if (errorFn === void 0) { errorFn = null; }
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            if (commitMessage) {
                query = (query ? query + "&" : "") + "message=" + encodeURIComponent(commitMessage);
            }
            var body = contents;
            this.doPost(UrlHelpers.join("content", path || "/"), query, body, function (data, status, headers, config) {
                successFn(data);
            }, errorFn);
        };
        GitWikiRepository.prototype.history = function (branch, objectId, path, limit, fn) {
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            if (limit) {
                query = (query ? query + "&" : "") + "limit=" + limit;
            }
            var commitId = objectId || branch;
            this.doGet(UrlHelpers.join("history", commitId, path), query, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.commitInfo = function (commitId, fn) {
            var query = null;
            this.doGet(UrlHelpers.join("commitInfo", commitId), query, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.commitDetail = function (commitId, fn) {
            var query = null;
            this.doGet(UrlHelpers.join("commitDetail", commitId), query, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.commitTree = function (commitId, fn) {
            var query = null;
            this.doGet(UrlHelpers.join("commitTree", commitId), query, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.diff = function (objectId, baseObjectId, path, fn) {
            var query = null;
            var config = Forge.createHttpConfig();
            config.transformResponse = function (data, headersGetter, status) {
                Wiki.log.info("got diff data: " + data);
                return data;
            };
            this.doGet(UrlHelpers.join("diff", objectId, baseObjectId, path), query, function (data, status, headers, config) {
                var details = {
                    text: data,
                    format: "diff",
                    directory: false
                };
                fn(details);
            }, null, config);
        };
        GitWikiRepository.prototype.branches = function (fn) {
            var query = null;
            this.doGet("listBranches", query, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.exists = function (branch, path, fn) {
            var answer = false;
            this.getPage(branch, path, null, function (data) {
                if (data.directory) {
                    if (data.children.length) {
                        answer = true;
                    }
                }
                else {
                    answer = true;
                }
                Wiki.log.info("exists " + path + " answer = " + answer);
                if (angular.isFunction(fn)) {
                    fn(answer);
                }
            });
            return answer;
        };
        GitWikiRepository.prototype.revertTo = function (branch, objectId, blobPath, commitMessage, fn) {
            if (!commitMessage) {
                commitMessage = "Reverting " + blobPath + " commit " + (objectId || branch);
            }
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            if (commitMessage) {
                query = (query ? query + "&" : "") + "message=" + encodeURIComponent(commitMessage);
            }
            var body = "";
            this.doPost(UrlHelpers.join("revert", objectId, blobPath || "/"), query, body, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.rename = function (branch, oldPath, newPath, commitMessage, fn) {
            if (!commitMessage) {
                commitMessage = "Renaming page " + oldPath + " to " + newPath;
            }
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            if (commitMessage) {
                query = (query ? query + "&" : "") + "message=" + encodeURIComponent(commitMessage);
            }
            if (oldPath) {
                query = (query ? query + "&" : "") + "old=" + encodeURIComponent(oldPath);
            }
            var body = "";
            this.doPost(UrlHelpers.join("mv", newPath || "/"), query, body, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.removePage = function (branch, path, commitMessage, fn) {
            if (!commitMessage) {
                commitMessage = "Removing page " + path;
            }
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            if (commitMessage) {
                query = (query ? query + "&" : "") + "message=" + encodeURIComponent(commitMessage);
            }
            var body = "";
            this.doPost(UrlHelpers.join("rm", path || "/"), query, body, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.removePages = function (branch, paths, commitMessage, fn) {
            if (!commitMessage) {
                commitMessage = "Removing page" + (paths.length > 1 ? "s" : "") + " " + paths.join(", ");
            }
            var query = null;
            if (branch) {
                query = "branch=" + branch;
            }
            if (commitMessage) {
                query = (query ? query + "&" : "") + "message=" + encodeURIComponent(commitMessage);
            }
            var body = paths;
            this.doPost(UrlHelpers.join("rm"), query, body, function (data, status, headers, config) {
                fn(data);
            });
        };
        GitWikiRepository.prototype.doGet = function (path, query, successFn, errorFn, config) {
            if (errorFn === void 0) { errorFn = null; }
            if (config === void 0) { config = null; }
            var url = Forge.createHttpUrl(this.projectId, UrlHelpers.join(this.baseUrl, path));
            if (query) {
                url += "&" + query;
            }
            if (!errorFn) {
                errorFn = function (data, status, headers, config) {
                    Wiki.log.warn("failed to load! " + url + ". status: " + status + " data: " + data);
                };
            }
            if (!config) {
                config = this.config;
            }
            this.$http.get(url, config).
                success(successFn).
                error(errorFn);
        };
        GitWikiRepository.prototype.doPost = function (path, query, body, successFn, errorFn) {
            if (errorFn === void 0) { errorFn = null; }
            var url = Forge.createHttpUrl(this.projectId, UrlHelpers.join(this.baseUrl, path));
            if (query) {
                url += "&" + query;
            }
            if (!errorFn) {
                errorFn = function (data, status, headers, config) {
                    Wiki.log.warn("failed to load! " + url + ". status: " + status + " data: " + data);
                };
            }
            this.$http.post(url, body, this.config).
                success(successFn).
                error(errorFn);
        };
        GitWikiRepository.prototype.doPostForm = function (path, query, body, successFn, errorFn) {
            if (errorFn === void 0) { errorFn = null; }
            var url = Forge.createHttpUrl(this.projectId, UrlHelpers.join(this.baseUrl, path));
            if (query) {
                url += "&" + query;
            }
            if (!errorFn) {
                errorFn = function (data, status, headers, config) {
                    Wiki.log.warn("failed to load! " + url + ". status: " + status + " data: " + data);
                };
            }
            var config = Forge.createHttpConfig();
            if (!config.headers) {
                config.headers = {};
            }
            config.headers["Content-Type"] = "application/x-www-form-urlencoded; charset=utf-8";
            this.$http.post(url, body, config).
                success(successFn).
                error(errorFn);
        };
        GitWikiRepository.prototype.completePath = function (branch, completionText, directoriesOnly, fn) {
        };
        GitWikiRepository.prototype.getPath = function (path) {
            var directoryPrefix = this.directoryPrefix;
            return (directoryPrefix) ? directoryPrefix + path : path;
        };
        GitWikiRepository.prototype.getLogPath = function (path) {
            return Core.trimLeading(this.getPath(path), "/");
        };
        GitWikiRepository.prototype.getContent = function (objectId, blobPath, fn) {
        };
        GitWikiRepository.prototype.jsonChildContents = function (path, nameWildcard, search, fn) {
        };
        GitWikiRepository.prototype.git = function () {
        };
        return GitWikiRepository;
    }());
    Wiki.GitWikiRepository = GitWikiRepository;
})(Wiki || (Wiki = {}));

var Dozer;
(function (Dozer) {
    Dozer._module.config(["$routeProvider", "dozerPaths", function ($routeProvider, dozerPaths) {
        dozerPaths.forEach(function (path) {
            $routeProvider
                .when(UrlHelpers.join(path, 'mappings/branch/:branch/view/:page*'), {
                templateUrl: UrlHelpers.join(Dozer.templatePath, 'mapping2.html'),
                reloadOnSearch: false
            });
        });
    }]);
    Dozer._module.controller("Dozer.NewMappingController", ["$scope", "$location", "$routeParams", "ForgeApiURL", function ($scope, $location, $routeParams, ForgeApiURL) {
        Wiki.initScope($scope, $routeParams, $location);
        Forge.initScope($scope, $routeParams, $location);
        console.log("$scope: ", $scope);
        var wikiRepository = $scope.wikiRepository;
        var model = undefined;
        var classA = undefined;
        var classB = undefined;
        $scope.selectedId = $routeParams['mappingId'];
        $scope.projectId = $routeParams['projectId'];
        $scope.mapping = undefined;
        $scope.$watch('selectedId', function (id) {
            if (id) {
                var mapping = getMapping(id);
                if (mapping) {
                    $location.search("mappingId", id);
                    $scope.mapping = mapping;
                }
            }
        });
        $scope.$watch('mapping', function (mapping) {
            if (!mapping) {
                return;
            }
            $scope.classA = classA = undefined;
            $scope.classB = classB = undefined;
            fetchProperties({
                classA: mapping.class_a.value,
                classB: mapping.class_b.value
            });
        });
        updateView();
        function fetchProperties(options) {
            console.log("Fetching properties: ", options);
            var commandId = 'introspector-get-properties';
            var url = Forge.executeCommandApiUrl(ForgeApiURL, commandId);
            var request = {
                namespace: $scope.namespace,
                projectName: $scope.projectId,
                resource: "",
                inputList: [{
                        classNames: [options.classA, options.classB].join(',')
                    }]
            };
            url = Forge.createHttpUrl($scope.projectId, url);
            $.ajax(url, {
                method: 'POST',
                contentType: 'application/json',
                data: angular.toJson(request),
                success: function (data) {
                    console.log("Got back data: ", data);
                    var message = data.message;
                    if (message) {
                        var response = angular.fromJson(message);
                        console.log("Response: ", response);
                        $scope.classA = classA = response[options.classA];
                        $scope.classB = classB = response[options.classB];
                        Core.$apply($scope);
                    }
                },
                error: function (jqXHR, text, status) {
                    console.log("Error: ", jqXHR, " text: ", text, " status: ", status);
                    $scope.classA = classA = [];
                    $scope.classB = classB = [];
                    Core.$apply($scope);
                }
            });
            console.log("Url: ", url);
        }
        function updateView() {
            $scope.pageId = Wiki.pageId($routeParams, $location);
            $scope.git = wikiRepository.getPage($scope.branch, $scope.pageId, $scope.objectId, onResults);
        }
        function resetSelectedId() {
            var mapping = _.first(model.mappings);
            $scope.selectedId = mapping.map_id;
        }
        function getMapping(id) {
            if (!model) {
                return undefined;
            }
            return _.find(model.mappings, function (mapping) { return mapping.map_id === id; });
        }
        function onResults(response) {
            var text = response.text;
            if (text) {
                if ($scope.responseText !== text) {
                    $scope.responseText = text;
                    $scope.model = model = Dozer.loadDozerModel(text, $scope.pageId);
                    if (!$scope.selectedId) {
                        resetSelectedId();
                    }
                    else {
                        var mapping = getMapping($scope.selectedId);
                        if (!mapping) {
                            resetSelectedId();
                        }
                        else {
                            $scope.mapping = mapping;
                        }
                    }
                }
            }
            else {
                Dozer.log.warn("No XML found for page " + $scope.pageId);
            }
            Core.$apply($scope);
        }
    }]);
    Dozer._module.controller("Dozer.MappingController", ["$scope", "$location", "$routeParams", "$templateCache", function ($scope, $location, $routeParams, $templateCache) {
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.versionId = $scope.branch || "1.0";
            $scope.schema = {};
            $scope.addDialog = new UI.Dialog();
            $scope.propertiesDialog = new UI.Dialog();
            $scope.deleteDialog = false;
            $scope.unmappedFieldsHasValid = false;
            $scope.modified = false;
            $scope.selectedItems = [];
            $scope.mappings = [];
            $scope.schemas = [];
            $scope.aName = '';
            $scope.bName = '';
            $scope.main = "";
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(updateView, 50);
            });
            $scope.triggerRefresh = function (timeout) {
                if (timeout === void 0) { timeout = 500; }
                $scope.main = "";
                setTimeout(function () {
                    $scope.main = $templateCache.get("pageTemplate.html");
                    Core.$apply($scope);
                }, timeout);
            };
            $scope.disableReload = function () {
                var aValue = Core.pathGet($scope, ["selectedMapping", "class_a", "value"]);
                var bValue = Core.pathGet($scope, ["selectedMapping", "class_b", "value"]);
                return aValue === $scope.aName && bValue === $scope.bName;
            };
            $scope.doReload = function () {
                $scope.selectedMapping.class_a.value = $scope.aName;
                $scope.selectedMapping.class_b.value = $scope.bName;
                $scope.triggerRefresh();
            };
            $scope.$watch('selectedMapping', function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.aName = newValue.class_a.value;
                    $scope.bName = newValue.class_b.value;
                    $scope.triggerRefresh();
                }
            });
            $scope.$watch('selectedMapping.class_a.value', function (newValue, oldValue) {
                if (newValue !== oldValue && newValue !== '') {
                    $scope.fetchProperties(newValue, $scope.selectedMapping.class_a, 'Right');
                }
            });
            $scope.$watch('selectedMapping.class_b.value', function (newValue, oldValue) {
                if (newValue !== oldValue && newValue !== '') {
                    $scope.fetchProperties(newValue, $scope.selectedMapping.class_b, 'Left');
                }
            });
            $scope.fetchProperties = function (className, target, anchor) {
            };
            $scope.getSourceAndTarget = function (info) {
                var sourcePath = info.source.attr('field-path');
                var targetPath = info.target.attr('field-path');
                var sourceField = _.last(sourcePath.split('/'));
                var targetField = _.last(sourcePath.split('/'));
                return {
                    from: sourceField,
                    to: targetField
                };
            };
            function extractProperty(clazz, prop) {
                return (!clazz || !clazz.properties) ? null :
                    clazz.properties.find(function (property) {
                        return _.endsWith(property.path, '/' + prop);
                    });
            }
            $scope.formatStackTrace = function (exception) {
                return Log.formatStackTrace(exception);
            };
            $scope.addMapping = function () {
                var treeNode = $scope.rootTreeNode;
                if (treeNode) {
                    var parentFolder = treeNode.data;
                    var mapping = new Dozer.Mapping();
                    var addedNode = Dozer.createMappingFolder(mapping, parentFolder);
                    var added = treeNode.addChild(addedNode);
                    if (added) {
                        added.expand(true);
                        added.select(true);
                        added.activate(true);
                        onTreeModified();
                    }
                    $scope.mappings.push(mapping);
                    $scope.selectedMapping = mapping;
                }
            };
            $scope.addField = function () {
                if ($scope.selectedMapping) {
                }
            };
            $scope.addAndCloseDialog = function () {
                Dozer.log.info("About to add the unmapped fields " + JSON.stringify($scope.unmappedFields, null, "  "));
                if ($scope.selectedMapping) {
                    angular.forEach($scope.unmappedFields, function (unmappedField) {
                        if (unmappedField.valid) {
                            var field = new Dozer.Field(new Dozer.FieldDefinition(unmappedField.fromField), new Dozer.FieldDefinition(unmappedField.toField));
                            $scope.selectedMapping.fields.push(field);
                            var treeNode = $scope.selectedMappingTreeNode;
                            var mappingFolder = $scope.selectedMappingFolder;
                            if (treeNode && mappingFolder) {
                                var fieldFolder = Dozer.addMappingFieldFolder(field, mappingFolder);
                                var added = treeNode.addChild(fieldFolder);
                                if (added) {
                                    added.expand(true);
                                    added.select(true);
                                    added.activate(true);
                                    onTreeModified();
                                }
                            }
                            else {
                                Dozer.log.warn("No treenode and folder for mapping node! treeNode " + treeNode + " mappingFolder " + mappingFolder);
                            }
                        }
                    });
                }
                $scope.addDialog.close();
            };
            $scope.canDelete = function () {
                return $scope.selectedFolder ? true : false;
            };
            $scope.removeNode = function () {
                if ($scope.selectedFolder && $scope.treeNode) {
                    var folder = $scope.selectedFolder;
                    var entity = folder.entity;
                    if (entity instanceof Dozer.Field) {
                        var mapping = Core.pathGet(folder, ["parent", "entity"]);
                        if (mapping) {
                            mapping.fields.remove(entity);
                        }
                    }
                    $scope.selectedFolder.detach();
                    $scope.treeNode.remove();
                    $scope.selectedFolder = null;
                    $scope.treeNode = null;
                    onTreeModified();
                }
            };
            $scope.saveMappings = function () {
                $scope.model.mappings = $scope.mappings;
                var text = Dozer.saveToXmlText($scope.model);
                if (text) {
                    var commitMessage = $scope.commitMessage || "Updated page " + $scope.pageId;
                    wikiRepository.putPage($scope.branch, $scope.pageId, text, commitMessage, function (status) {
                        Wiki.onComplete(status);
                        $scope.modified = false;
                        Core.notification("success", "Saved " + $scope.pageId);
                        goToView();
                        Core.$apply($scope);
                    });
                }
            };
            $scope.save = function () {
                if ($scope.model) {
                    var model = Dozer.loadModelFromTree($scope.rootTreeNode, $scope.model);
                    var text = Dozer.saveToXmlText(model);
                    if (text) {
                        var commitMessage = $scope.commitMessage || "Updated page " + $scope.pageId;
                        wikiRepository.putPage($scope.branch, $scope.pageId, text, commitMessage, function (status) {
                            Wiki.onComplete(status);
                            $scope.modified = false;
                            Core.notification("success", "Saved " + $scope.pageId);
                            goToView();
                            Core.$apply($scope);
                        });
                    }
                }
            };
            $scope.cancel = function () {
                Dozer.log.info("cancelling...");
            };
            $scope.onRootTreeNode = function (rootTreeNode) {
                $scope.rootTreeNode = rootTreeNode;
            };
            $scope.onNodeSelect = function (folder, treeNode) {
                $scope.selectedFolder = folder;
                $scope.treeNode = treeNode;
                $scope.propertiesTemplate = null;
                $scope.dozerEntity = null;
                $scope.selectedDescription = "";
                $scope.selectedMapping = null;
                $scope.selectedMappingTreeNode = null;
                $scope.selectedMappingFolder = null;
                if ($scope.removeModelChangeListener) {
                    $scope.removeModelChangeListener();
                    $scope.removeModelChangeListener = null;
                }
                if (folder) {
                    var entity = folder.entity;
                    $scope.dozerEntity = entity;
                    var propertiesTemplate = "plugins/dozer/html/dozerPropertiesEdit.html";
                    if (entity instanceof Dozer.Field) {
                        $scope.propertiesTemplate = propertiesTemplate;
                        $scope.nodeModel = io_hawt_dozer_schema_Field;
                        $scope.selectedDescription = "Field Mapping";
                        $scope.selectedMapping = Core.pathGet(folder, ["parent", "entity"]);
                        $scope.selectedMappingFolder = folder.parent;
                        $scope.selectedMappingTreeNode = treeNode.parent;
                    }
                    else if (entity instanceof Dozer.Mapping) {
                        $scope.propertiesTemplate = propertiesTemplate;
                        $scope.nodeModel = io_hawt_dozer_schema_Mapping;
                        $scope.selectedDescription = "Class Mapping";
                        $scope.selectedMapping = entity;
                        $scope.selectedMappingFolder = folder;
                        $scope.selectedMappingTreeNode = treeNode;
                    }
                    if ($scope.selectedMapping && !$scope.removeModelChangeListener) {
                    }
                }
                Core.$apply($scope);
            };
            $scope.onUnmappedFieldChange = function (unmappedField) {
                unmappedField.valid = unmappedField.toField ? true : false;
                $scope.unmappedFieldsHasValid = $scope.unmappedFields.find(function (f) { return f.valid; });
            };
            function findFieldNames(className, text) {
                var properties = [];
                return _.map(properties, function (p) { return p.name; });
            }
            $scope.fromFieldNames = function (text) {
                var className = Core.pathGet($scope.selectedMapping, ["class_a", "value"]);
                return findFieldNames(className, text);
            };
            $scope.toFieldNames = function (text) {
                var className = Core.pathGet($scope.selectedMapping, ["class_b", "value"]);
                return findFieldNames(className, text);
            };
            $scope.classNames = function (text) {
                if (!text || text.length < 2)
                    return [];
                return Core.time("Time the query of classes", function () {
                    Dozer.log.info("searching for class names with filter '" + text + "'");
                    var answer = [];
                    Dozer.log.info("Found results: " + answer.length);
                    return answer;
                });
            };
            updateView();
            function updateView() {
                $scope.pageId = Wiki.pageId($routeParams, $location);
                $scope.git = wikiRepository.getPage($scope.branch, $scope.pageId, $scope.objectId, onResults);
            }
            function onResults(response) {
                var text = response.text;
                if (text) {
                    if ($scope.responseText !== text) {
                        $scope.responseText = text;
                        $scope.model = Dozer.loadDozerModel(text, $scope.pageId);
                        $scope.mappings = Core.pathGet($scope.model, ["mappings"]);
                        $scope.mappingTree = Dozer.createDozerTree($scope.model);
                        if (!angular.isDefined($scope.selectedMapping)) {
                            $scope.selectedMapping = _.first($scope.mappings);
                        }
                        $scope.main = $templateCache.get("pageTemplate.html");
                    }
                }
                else {
                    Dozer.log.warn("No XML found for page " + $scope.pageId);
                }
                Core.$apply($scope);
            }
            function onTreeModified() {
                $scope.modified = true;
            }
            function goToView() {
            }
        }]);
})(Dozer || (Dozer = {}));

var Dozer;
(function (Dozer) {
    Dozer._module.config(["$routeProvider", "dozerPaths", function ($routeProvider, dozerPaths) {
        dozerPaths.forEach(function (path) {
            $routeProvider
                .when(UrlHelpers.join(path, 'mappings'), {
                templateUrl: UrlHelpers.join(Dozer.templatePath, 'mappings.html'),
                reloadOnSearch: false
            });
        });
    }]);
    Dozer._module.run(function () {
        Developer.customProjectSubTabFactories.push(function (context) {
            var projectLink = context.projectLink;
            var link = UrlHelpers.join(projectLink, 'forge/mappings');
            return [];
        });
    });
    Dozer._module.controller("Dozer.MappingsController", ["$scope", "$location", "$routeParams", function ($scope, $location, $routeParams) {
        $scope.projectId = $routeParams['projectId'];
        Forge.initScope($scope, $location, $routeParams);
    }]);
})(Dozer || (Dozer = {}));

var Forge;
(function (Forge) {
    Forge.context = '/workspaces/:namespace/forge';
    Forge.hash = '#' + Forge.context;
    Forge.pluginName = 'Forge';
    Forge.pluginPath = 'plugins/forge/';
    Forge.templatePath = Forge.pluginPath + 'html/';
    Forge.log = Logger.get(Forge.pluginName);
    Forge.defaultIconUrl = Core.url("/img/forge.svg");
    Forge.gogsServiceName = Kubernetes.gogsServiceName;
    Forge.orionServiceName = "orion";
    Forge.loggedInToGogs = false;
    function isForge(workspace) {
        return true;
    }
    Forge.isForge = isForge;
    function initScope($scope, $location, $routeParams) {
        $scope.namespace = $routeParams["namespace"] || $scope.namespace || Kubernetes.currentKubernetesNamespace();
        Kubernetes.setCurrentKubernetesNamespace($scope.namespace);
        $scope.projectId = $routeParams["project"];
        $scope.$workspaceLink = Developer.workspaceLink();
        $scope.$projectLink = Developer.projectLink($scope.projectId);
        $scope.breadcrumbConfig = Developer.createProjectBreadcrumbs($scope.projectId);
        switch ($scope.id) {
            case 'project-new':
                $scope.breadcrumbConfig.push({
                    label: "Create Project"
                });
                $scope.subTabConfig = [];
                break;
            case 'devops-edit':
                $scope.subTabConfig = Developer.createProjectSubNavBars($scope.projectId);
                $scope.breadcrumbConfig = Developer.createProjectSettingsBreadcrumbs($scope.projectId);
                $scope.tabs = Developer.createProjectSettingsSubNavBars($scope.projectId);
                $scope.projectLink = Developer.projectLink($scope.projectId);
                break;
            default:
                $scope.subTabConfig = Developer.createProjectSubNavBars($scope.projectId);
                break;
        }
        if (_.startsWith($scope.id, "camel-")) {
            $scope.$projectLink = Forge.projectCamelOverviewLink($scope.namespace, $scope.projectId);
        }
        Forge.updateForgeProject($scope);
    }
    Forge.initScope = initScope;
    function commandLink(projectId, name, resourcePath) {
        var link = Developer.projectLink(projectId);
        if (name) {
            if (resourcePath) {
                return UrlHelpers.join(link, "/forge/command", name, resourcePath);
            }
            else {
                return UrlHelpers.join(link, "/forge/command/", name);
            }
        }
        return null;
    }
    Forge.commandLink = commandLink;
    function commandsLink(resourcePath, projectId) {
        var link = Developer.projectLink(projectId);
        if (resourcePath) {
            return UrlHelpers.join(link, "/forge/commands/user", resourcePath);
        }
        else {
            return UrlHelpers.join(link, "/forge/commands");
        }
    }
    Forge.commandsLink = commandsLink;
    function projectCommandsLink(ns, projectId) {
        return Developer.projectWorkspaceLink(ns, projectId, "forge/commands", false);
    }
    Forge.projectCommandsLink = projectCommandsLink;
    function projectPerspectiveLink(ns, projectId, page) {
        return Developer.projectWorkspaceLink(ns, projectId, UrlHelpers.join("forge", page), false);
    }
    Forge.projectPerspectiveLink = projectPerspectiveLink;
    function projectCamelOverviewLink(ns, projectId) {
        return Forge.projectPerspectiveLink(ns, projectId, "camelOverview");
    }
    Forge.projectCamelOverviewLink = projectCamelOverviewLink;
    function projectFunktionOverviewLink(ns, projectId) {
        return Forge.projectPerspectiveLink(ns, projectId, "funktionOverview");
    }
    Forge.projectFunktionOverviewLink = projectFunktionOverviewLink;
    function reposApiUrl(ForgeApiURL) {
        return UrlHelpers.join(ForgeApiURL, "/repos");
    }
    Forge.reposApiUrl = reposApiUrl;
    function repoApiUrl(ForgeApiURL, path) {
        return UrlHelpers.join(ForgeApiURL, "/repos/user", path);
    }
    Forge.repoApiUrl = repoApiUrl;
    function commandApiUrl(ForgeApiURL, commandId, ns, projectId, resourcePath) {
        if (resourcePath === void 0) { resourcePath = null; }
        return UrlHelpers.join(ForgeApiURL, "command", commandId, ns, projectId, resourcePath);
    }
    Forge.commandApiUrl = commandApiUrl;
    function executeCommandApiUrl(ForgeApiURL, commandId) {
        return UrlHelpers.join(ForgeApiURL, "command", "execute", commandId);
    }
    Forge.executeCommandApiUrl = executeCommandApiUrl;
    function validateCommandApiUrl(ForgeApiURL, commandId) {
        return UrlHelpers.join(ForgeApiURL, "command", "validate", commandId);
    }
    Forge.validateCommandApiUrl = validateCommandApiUrl;
    function commandInputApiUrl(ForgeApiURL, commandId, ns, projectId, resourcePath) {
        if (ns && projectId) {
            return UrlHelpers.join(ForgeApiURL, "commandInput", commandId, ns, projectId, resourcePath);
        }
        else {
            return UrlHelpers.join(ForgeApiURL, "commandInput", commandId);
        }
    }
    Forge.commandInputApiUrl = commandInputApiUrl;
    function modelProject(ForgeModel, resourcePath) {
        if (resourcePath) {
            var project = ForgeModel.projects[resourcePath];
            if (!project) {
                project = {};
                ForgeModel.projects[resourcePath] = project;
            }
            return project;
        }
        else {
            return ForgeModel.rootProject;
        }
    }
    function setModelCommands(ForgeModel, resourcePath, commands) {
        var project = modelProject(ForgeModel, resourcePath);
        project.$commands = commands;
    }
    Forge.setModelCommands = setModelCommands;
    function getModelCommands(ForgeModel, resourcePath) {
        var project = modelProject(ForgeModel, resourcePath);
        return project.$commands || [];
    }
    Forge.getModelCommands = getModelCommands;
    function modelCommandInputMap(ForgeModel, resourcePath) {
        var project = modelProject(ForgeModel, resourcePath);
        var commandInputs = project.$commandInputs;
        if (!commandInputs) {
            commandInputs = {};
            project.$commandInputs = commandInputs;
        }
        return commandInputs;
    }
    function getModelCommandInputs(ForgeModel, resourcePath, id) {
        var commandInputs = modelCommandInputMap(ForgeModel, resourcePath);
        return commandInputs[id];
    }
    Forge.getModelCommandInputs = getModelCommandInputs;
    function setModelCommandInputs(ForgeModel, resourcePath, id, item) {
        var commandInputs = modelCommandInputMap(ForgeModel, resourcePath);
        return commandInputs[id] = item;
    }
    Forge.setModelCommandInputs = setModelCommandInputs;
    function enrichRepo(repo) {
        var owner = repo.owner || {};
        var user = owner.username || repo.user;
        var name = repo.name;
        var projectId = name;
        var avatar_url = owner.avatar_url;
        if (avatar_url && avatar_url.startsWith("http//")) {
            avatar_url = "http://" + avatar_url.substring(6);
            owner.avatar_url = avatar_url;
        }
        if (user && name) {
            var resourcePath = user + "/" + name;
            repo.$commandsLink = commandsLink(resourcePath, projectId);
            repo.$buildsLink = "/kubernetes/builds?q=/" + resourcePath + ".git";
            var injector = HawtioCore.injector;
            if (injector) {
                var ServiceRegistry = injector.get("ServiceRegistry");
                if (ServiceRegistry) {
                    var orionLink = ServiceRegistry.serviceLink(Forge.orionServiceName);
                    var gogsService = ServiceRegistry.findService(Forge.gogsServiceName);
                    if (orionLink && gogsService) {
                        var portalIp = gogsService.portalIP;
                        if (portalIp) {
                            var port = gogsService.port;
                            var portText = (port && port !== 80 && port !== 443) ? ":" + port : "";
                            var protocol = (port && port === 443) ? "https://" : "http://";
                            var gitCloneUrl = UrlHelpers.join(protocol + portalIp + portText + "/", resourcePath + ".git");
                            repo.$openProjectLink = UrlHelpers.join(orionLink, "/git/git-repository.html#,createProject.name=" + name + ",cloneGit=" + gitCloneUrl);
                        }
                    }
                }
            }
        }
    }
    Forge.enrichRepo = enrichRepo;
    function createHttpConfig() {
        var config = {
            headers: {}
        };
        return config;
    }
    Forge.createHttpConfig = createHttpConfig;
    function addQueryArgument(url, name, value) {
        if (url && name && value) {
            var sep = (url.indexOf("?") >= 0) ? "&" : "?";
            return url + sep + name + "=" + encodeURIComponent(value);
        }
        return url;
    }
    function createHttpUrl(projectId, url, authHeader, email) {
        if (authHeader === void 0) { authHeader = null; }
        if (email === void 0) { email = null; }
        var localStorage = Kubernetes.inject("localStorage") || {};
        var ns = Kubernetes.currentKubernetesNamespace();
        var secret = Forge.getProjectSourceSecret(localStorage, ns, projectId);
        var secretNS = Forge.getSourceSecretNamespace(localStorage);
        authHeader = authHeader || localStorage["gogsAuthorization"];
        email = email || localStorage["gogsEmail"];
        url = addQueryArgument(url, "_gogsAuth", authHeader);
        url = addQueryArgument(url, "_gogsEmail", email);
        url = addQueryArgument(url, "secret", secret);
        url = addQueryArgument(url, "secretNamespace", secretNS);
        url = addQueryArgument(url, "kubeUserName", Kubernetes.currentUserName());
        if (!Kubernetes.isOpenShift) {
            var model = Kubernetes.inject("KubernetesModel");
            var gitUrl = Core.pathGet(model, ["project", "spec", "source", "git", "uri"]);
            if (gitUrl) {
            }
            else {
                url = addQueryArgument(url, "gitUrl", gitUrl);
                Forge.log.debug("Could not find the gitUrl to send to jboss forge!");
            }
        }
        return url;
    }
    Forge.createHttpUrl = createHttpUrl;
    function commandMatchesText(command, filterText) {
        if (filterText) {
            return Core.matchFilterIgnoreCase(angular.toJson(command), filterText);
        }
        else {
            return true;
        }
    }
    Forge.commandMatchesText = commandMatchesText;
    function isSourceSecretDefinedForProject(ns, projectId) {
        var localStorage = Kubernetes.inject("localStorage") || {};
        return Forge.getProjectSourceSecret(localStorage, ns, projectId);
    }
    Forge.isSourceSecretDefinedForProject = isSourceSecretDefinedForProject;
    function redirectToSetupSecretsIfNotDefined($scope, $location) {
        var ns = $scope.namespace || Kubernetes.currentKubernetesNamespace();
        var projectId = $scope.projectId;
        if (!isSourceSecretDefinedForProject(ns, projectId)) {
            var loginPage = Developer.projectSecretsLink(ns, projectId) + "Required";
            Forge.log.info("No secret setup so redirecting to " + loginPage);
            Kubernetes.goToPath($location, loginPage);
        }
    }
    Forge.redirectToSetupSecretsIfNotDefined = redirectToSetupSecretsIfNotDefined;
    function executeCommand($scope, $http, ForgeApiURL, commandId, projectId, request, onData, json) {
        if (json === void 0) { json = true; }
        var url = executeCommandApiUrl(ForgeApiURL, commandId);
        url = createHttpUrl(projectId, url);
        Forge.log.info("About to post to " + url + " payload: " + angular.toJson(request));
        $http.post(url, request, createHttpConfig()).
            success(function (data, status, headers, config) {
            if (data) {
                if (data.status == "SUCCESS") {
                    var message = data.message;
                    if (message) {
                        try {
                            var jsonData = json ? angular.fromJson(message) : message;
                            if (angular.isFunction(onData)) {
                                onData(jsonData);
                            }
                            else {
                                Forge.log.warn("onData is not a function!: " + onData);
                            }
                        }
                        catch (e) {
                            Forge.log.error("Failed to parse JSON result " + e + ". JSON: " + message);
                        }
                    }
                }
                else {
                    Forge.log.warn("Failed to find camel data! " + data.status + " message: " + data.message);
                }
            }
            $scope.fetched = true;
            Core.$apply($scope);
        }).
            error(function (data, status, headers, config) {
            $scope.fetched = true;
            Forge.log.warn("Failed to load " + url + " " + data + " " + status);
            if (angular.isFunction(onData)) {
                onData({});
            }
            else {
                Forge.log.warn("onData is not a function!: " + onData);
            }
            Core.$apply($scope);
        });
    }
    Forge.executeCommand = executeCommand;
    function gotoCommand($location, projectId, commandId, resourcePath, input, pageNumber) {
        var href = commandLink(projectId, commandId, "");
        Forge.log.info("Navigating to forge page " + href + " with input " + angular.toJson(input) + " page " + pageNumber);
        Kubernetes.goToPath($location, href);
        $location.search(input);
        if (pageNumber) {
            $location.search("_page", pageNumber);
        }
    }
    Forge.gotoCommand = gotoCommand;
    function isMavenProjectType(projectName) {
        if (!projectName) {
            return false;
        }
        if (projectName && angular.isString(projectName)) {
            var lower = projectName.toLowerCase();
            if (lower.startsWith("go") ||
                lower.startsWith("dotnet") || lower.startsWith(".net") ||
                lower.startsWith("php") ||
                lower.startsWith("node") ||
                lower.startsWith("python") || lower.startsWith("django") ||
                lower.startsWith("ruby") || lower.startsWith("rails") ||
                lower.startsWith("swift")) {
                return false;
            }
        }
        return true;
    }
    Forge.isMavenProjectType = isMavenProjectType;
    function showStackBuildSystemFinalName(projectName) {
        if (!projectName) {
            return false;
        }
        if (angular.isString(projectName)) {
            var lower = projectName.toLowerCase();
            if (lower.startsWith("integration") ||
                lower.startsWith("funktion") ||
                lower.startsWith("from archetype catalog") ||
                lower.startsWith("microservice") ||
                lower.startsWith("vertx") ||
                lower.startsWith("vert.x") ||
                lower.startsWith("wildfly-swarm") ||
                lower.startsWith("wildfly swarm") ||
                lower.startsWith("spring boot") || lower.startsWith("spring-boot")) {
                return false;
            }
        }
        return isMavenProjectType(projectName);
    }
    Forge.showStackBuildSystemFinalName = showStackBuildSystemFinalName;
    function projectTypeIcon(typeName, projectType, funktionIcons) {
        if (funktionIcons === void 0) { funktionIcons = false; }
        var icon = "img/java.svg";
        var maven = true;
        if (typeName) {
            var lower = typeName.toLowerCase();
            var funktionPrefix = "funktion-";
            if (funktionIcons && _.startsWith(lower, funktionPrefix)) {
                lower = lower.substring(funktionPrefix.length);
            }
            if (lower.startsWith("go")) {
                icon = "img/icons/gopher.png";
            }
            else if (lower.startsWith("integrat")) {
                icon = "img/icons/camel.svg";
            }
            else if (lower.startsWith("from archetype catalog")) {
                icon = "img/fabric8_icon.svg";
            }
            else if (lower.startsWith("from archetype")) {
                icon = "img/maven-icon.png";
            }
            else if (lower.startsWith("dotnet") || lower.startsWith(".net")) {
                icon = "img/icons/dotnet.png";
            }
            else if (lower.startsWith("forge")) {
                icon = "img/icons/forge.svg";
            }
            else if (lower.startsWith("funktion")) {
                icon = "img/icons/funktion.png";
            }
            else if (lower.startsWith("groovy")) {
                icon = "img/icons/groovy.svg";
            }
            else if (lower.startsWith("karaf")) {
                icon = "img/icons/karaf.svg";
            }
            else if (lower.startsWith("kotlin")) {
                icon = "img/icons/kotlin.png";
            }
            else if (lower.startsWith("node")) {
                icon = "img/icons/node.svg";
            }
            else if (lower.startsWith("python") || lower.startsWith("django")) {
                icon = "img/icons/python.png";
            }
            else if (lower.startsWith("php")) {
                icon = "img/icons/php.png";
            }
            else if (lower.startsWith("rails")) {
                icon = "img/icons/rails.png";
            }
            else if (lower.startsWith("ruby")) {
                icon = "img/icons/ruby.png";
            }
            else if (lower.startsWith("spring-boot") || lower.startsWith("springboot") || lower.startsWith("microservice")) {
                icon = "img/icons/spring-boot-logo.png";
            }
            else if (lower.startsWith("spring")) {
                icon = "img/icons/spring-logo.png";
            }
            else if (lower.startsWith("swift")) {
                icon = "img/icons/swift.png";
            }
            else if (lower.startsWith("vert")) {
                icon = "img/icons/vertx.svg";
            }
            else if (lower.startsWith("wildfly swarm")) {
                icon = "img/icons/wildfly-swarm.png";
            }
            else if (lower.indexOf("camel") >= 0) {
                icon = "img/icons/camel.svg";
            }
            else if (lower.indexOf("jetty") >= 0) {
                icon = "img/icons/jetty.svg";
            }
            else if (lower.indexOf("wildfly") >= 0) {
                icon = "img/icons/wildfly.svg";
            }
        }
        projectType.$icon = icon;
    }
    Forge.projectTypeIcon = projectTypeIcon;
    function createProjectTags(name, archetype) {
        var tags = [];
        var springBootPrefix = "spring-boot-";
        if (_.startsWith(name, springBootPrefix)) {
            name = name.substring(springBootPrefix.length);
            tags.push("spring boot");
        }
        angular.forEach(name.split("-"), function (value) {
            if (value && value !== "example") {
                tags.push(value);
            }
        });
        if (tags.length > 1) {
            if (tags[0] == "funktion") {
                tags[0] = tags[1];
                tags[1] = "funktion";
            }
        }
        archetype.$tags = tags;
    }
    Forge.createProjectTags = createProjectTags;
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge._module = angular.module(Forge.pluginName, ['hawtio-core', 'hawtio-ui']);
    Forge.controller = PluginHelpers.createControllerFunction(Forge._module, Forge.pluginName);
    Forge.route = PluginHelpers.createRoutingFunction(Forge.templatePath);
    Forge._module.config(['$routeProvider', function ($routeProvider) {
            $routeProvider.when(UrlHelpers.join(Forge.context, '/createProject'), Forge.route('createProject.html', false))
                .when(UrlHelpers.join(Forge.context, '/repos/:path*'), Forge.route('repo.html', false))
                .when(UrlHelpers.join(Forge.context, '/repos'), Forge.route('repos.html', false));
            angular.forEach([Forge.context, '/workspaces/:namespace/projects/:project/forge', '/workspaces/:namespace/forge'], function (path) {
                $routeProvider
                    .when(UrlHelpers.join(path, '/commands'), Forge.route('commands.html', false))
                    .when(UrlHelpers.join(path, '/commands/:path*'), Forge.route('commands.html', false))
                    .when(UrlHelpers.join(path, '/command/:id'), Forge.route('command.html', false))
                    .when(UrlHelpers.join(path, '/command/:id/:path*'), Forge.route('command.html', false));
            });
            angular.forEach([Forge.context, '/workspaces/:namespace/projects/:project/forge', '/workspaces/:namespace/projects/forge'], function (path) {
                $routeProvider
                    .when(UrlHelpers.join(path, '/secrets'), Forge.route('secrets.html', false))
                    .when(UrlHelpers.join(path, '/secretsRequired'), Forge.route('secretsRequired.html', false));
            });
            angular.forEach(['/workspaces/:namespace/projects/:project/forge'], function (path) {
                $routeProvider
                    .when(UrlHelpers.join(path, '/camelOverview'), Forge.route('camelOverview.html', false))
                    .when(UrlHelpers.join(path, '/camelRoutes'), Forge.route('camelRoutes.html', false))
                    .when(UrlHelpers.join(path, '/camelAddComponent'), Forge.route('camelAddComponent.html', false))
                    .when(UrlHelpers.join(path, '/camelAddEndpoint'), Forge.route('camelAddEndpoint.html', false))
                    .when(UrlHelpers.join(path, '/funktionOverview'), Forge.route('funktionOverview.html', false));
            });
        }]);
    Forge._module.factory('ForgeApiURL', ['$q', '$rootScope', function ($q, $rootScope) {
            return Kubernetes.kubernetesApiUrl() + Kubernetes.kubernetesNamespacePath() + "/services/fabric8-forge:80/proxy/api/forge";
        }]);
    Forge._module.factory('ForgeProject', ['$q', '$rootScope', function ($q, $rootScope) {
            return new Forge.ForgeProjectService();
        }]);
    Forge._module.factory('ForgeModel', ['$q', '$rootScope', function ($q, $rootScope) {
            return {
                rootProject: {},
                projects: []
            };
        }]);
    Forge._module.run(['viewRegistry', 'HawtioNav', function (viewRegistry, HawtioNav) {
            viewRegistry['forge'] = Forge.templatePath + 'layoutForge.html';
        }]);
    hawtioPluginLoader.addModule(Forge.pluginName);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.ArchetypePicker = Forge.controller("ArchetypePicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var archetype = properties.archetype || {};
            var propertyName = "archetype";
            var selectionValueProperty = "$value";
            var useTiles = true;
            $scope.archetypes = archetype.enum;
            var allFunktions = true;
            angular.forEach($scope.archetypes, function (archetype) {
                var artifactId = archetype.artifactId;
                if (!artifactId || !_.startsWith(artifactId, "funktion-")) {
                    allFunktions = false;
                }
            });
            angular.forEach($scope.archetypes, function (archetype) {
                var artifactId = archetype.artifactId;
                if (artifactId) {
                    var artifactLabel = Core.trimTrailing(artifactId, "-archetype");
                    archetype.$artifactLabel = artifactLabel;
                    if (!archetype.$description) {
                        var version = archetype.version;
                        var descr = "<p><b>" + artifactLabel + "</b></p>\n<p>" + archetype.description + "</p>";
                        if (version) {
                            descr += "\n<p>version: <b>" + version + "</b></p>";
                        }
                        archetype.$description = descr;
                    }
                    archetype[selectionValueProperty] = archetype.groupId + ":" + artifactId + ":" + archetype.version;
                    Forge.projectTypeIcon(artifactId, archetype, allFunktions);
                    Forge.createProjectTags(artifactLabel, archetype);
                }
            });
            $scope.allArchetypes = $scope.archetypes;
            $scope.tableConfig = {
                data: 'archetypes',
                primaryKeyFn: function (item) { return item[selectionValueProperty]; },
                showSelectionCheckbox: false,
                enableRowClickSelection: true,
                multiSelect: false,
                selectedItems: [],
                filterOptions: {
                    filterText: ''
                },
                columnDefs: [
                    {
                        field: '$artifactLabel',
                        displayName: 'Archetype',
                    },
                    {
                        field: 'description',
                        displayName: 'Description',
                    },
                    {
                        field: 'groupId',
                        displayName: 'Group Id',
                    },
                    {
                        field: 'version',
                        displayName: 'Version',
                    }
                ]
            };
            $scope.tileConfig = {
                selectionMatchProp: selectionValueProperty,
                selectedItems: [],
                showSelectBox: false,
                selectItems: true,
                multiSelect: false
            };
            $scope.toggleFilter = function (tag) {
                if (tag) {
                    var paths = ["tableConfig", "filterOptions", "filterText"];
                    var filter = Core.pathGet($scope, paths) || "";
                    var tagSpace = tag + " ";
                    var spaceTagSpace = " " + tagSpace;
                    if (_.startsWith(filter, tagSpace)) {
                        filter = filter.substring(tagSpace.length);
                    }
                    else {
                        var idx = filter.indexOf(spaceTagSpace);
                        if (idx > 0) {
                            filter = filter.substring(0, idx) + filter.substring(idx + spaceTagSpace.length - 1);
                        }
                        else {
                            if (filter) {
                                filter = filter + " " + tag;
                            }
                            else {
                                filter = tag;
                            }
                        }
                    }
                    Core.pathSet($scope, paths, filter);
                    Core.$apply($scope);
                }
            };
            entityChanged();
            $scope.$watch("entity." + propertyName, entityChanged);
            if (useTiles) {
                $scope.$watchCollection("tileConfig.selectedItems", updateTileSelection);
            }
            else {
                $scope.$watchCollection("tableConfig.selectedItems", userSelectionChanged);
            }
            $scope.$watchCollection("tableConfig.filterOptions.filterText", filterChanged);
            function filterChanged(text) {
                Forge.log.info("Filter is now: " + text);
                if (!text) {
                    $scope.archetypes = $scope.allArchetypes;
                }
                else {
                    $scope.archetypes = _.filter($scope.allArchetypes, function (object) { return FilterHelpers.searchObject(object, text, null, null); });
                }
            }
            function updateTileSelection() {
                var selection = $scope.tileConfig.selectedItems;
                var selectedValue = "";
                var selected = null;
                if (selection && selection.length) {
                    selected = selection[0];
                    selectedValue = selected[selectionValueProperty];
                }
                $scope.selected = selected;
                if ($scope.entity[propertyName] !== selectedValue) {
                    $scope.entity[propertyName] = selectedValue;
                }
                Core.$apply($scope);
            }
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.archetypes, function (pipeline) {
                        if (!answer && value === pipeline[selectionValueProperty]) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function entityChanged() {
                var archetype = $scope.entity[propertyName] || {};
                var value = angular.isString(archetype) ? archetype : archetype[selectionValueProperty];
                var initialSelection = getSelection(value);
                if (initialSelection) {
                    if (useTiles) {
                        $scope.tileConfig.selectedItems = [initialSelection];
                        updateTileSelection();
                    }
                    else {
                        $scope.tableConfig.selectedItems = [initialSelection];
                        userSelectionChanged();
                    }
                }
            }
            var first = true;
            function userSelectionChanged() {
                var selection = $scope.tableConfig.selectedItems;
                var selectedValue = "";
                var selected = null;
                if (selection && selection.length) {
                    selected = selection[0];
                    selectedValue = selected[selectionValueProperty];
                }
                if (selectedValue || !first) {
                    if ($scope.entity[propertyName] !== selectedValue) {
                        $scope.entity[propertyName] = selectedValue;
                    }
                    first = false;
                }
                $scope.selected = selected;
                Core.$apply($scope);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    var secretNamespaceKey = "fabric8SourceSecretNamespace";
    var secretNameKey = "fabric8SourceSecret";
    function getSourceSecretNamespace(localStorage) {
        var secretNamespace = localStorage[secretNamespaceKey];
        var userName = Kubernetes.currentUserName();
        if (!secretNamespace) {
            secretNamespace = "user-secrets-source-" + userName;
        }
        return secretNamespace;
    }
    Forge.getSourceSecretNamespace = getSourceSecretNamespace;
    function getProjectSourceSecret(localStorage, ns, projectId) {
        if (!ns) {
            ns = Kubernetes.currentKubernetesNamespace();
        }
        var secretKey = createLocalStorageKey(secretNameKey, ns, projectId);
        var sourceSecret = localStorage[secretKey];
        return sourceSecret;
    }
    Forge.getProjectSourceSecret = getProjectSourceSecret;
    function setProjectSourceSecret(localStorage, ns, projectId, secretName) {
        var secretKey = createLocalStorageKey(secretNameKey, ns, projectId);
        localStorage[secretKey] = secretName;
    }
    Forge.setProjectSourceSecret = setProjectSourceSecret;
    function secretValid(secret, requiredDataKeys) {
        var data = secret.data;
        var valid = true;
        if (data) {
            angular.forEach(requiredDataKeys, function (key) {
                if (!data[key]) {
                    valid = false;
                }
            });
        }
        else {
            valid = false;
        }
        return valid;
    }
    Forge.secretValid = secretValid;
    function parseUrl(url) {
        if (url) {
            var parser = document.createElement('a');
            parser.href = url;
            return parser;
        }
        return {
            protocol: "",
            host: ""
        };
    }
    Forge.parseUrl = parseUrl;
    function createLocalStorageKey(prefix, ns, name) {
        return prefix + "/" + ns + "/" + (name || "");
    }
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CamelAddComponentController = Forge.controller("CamelAddComponentController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel", "KubernetesModel",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel, KubernetesModel) {
            $scope.id = "camel-get-components";
            Forge.initScope($scope, $location, $routeParams);
            var projectId = $scope.projectId;
            var ns = $scope.namespace;
            var addComponent = _.endsWith($location.path(), "Component");
            var resourcePath = "";
            $scope.tileConfig = {
                selectionMatchProp: "scheme",
                selectedItems: [],
                showSelectBox: false,
                selectItems: true,
                multiSelect: false
            };
            $scope.$watch("filter", updateFilter);
            $scope.addComponent = function () {
                var selection = $scope.tileConfig.selectedItems;
                if (selection && selection.length) {
                    var component = selection[0];
                    var input = {};
                    var nextCommand = "camel-add-endpoint";
                    var nextPage = 1;
                    if (addComponent) {
                        nextCommand = "camel-project-add-component";
                        var request = {
                            namespace: ns,
                            projectName: projectId,
                            resource: "",
                            inputList: [
                                {
                                    filter: "<all>",
                                },
                                {
                                    componentName: component.scheme,
                                }
                            ]
                        };
                        var onData = function (jsonData) {
                            $scope.executing = false;
                            Core.$apply($scope);
                            Core.notification("success", jsonData);
                            Forge.log.info("namespace " + ns + " projectId: " + projectId);
                            var path = Forge.projectCamelOverviewLink(ns, projectId);
                            if (Forge.forgeProject().hasPerspective("funktion")) {
                                path = Forge.projectFunktionOverviewLink(ns, projectId);
                            }
                            Forge.log.info("Navigating to path: " + path);
                            Kubernetes.goToPath($location, path);
                        };
                        $scope.executing = true;
                        Core.$apply($scope);
                        Forge.executeCommand($scope, $http, ForgeApiURL, nextCommand, projectId, request, onData, false);
                    }
                    else {
                        input["componentName"] = component.scheme;
                        Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
                    }
                }
            };
            $scope.$on('$routeUpdate', function ($event) {
                updateData();
            });
            updateData();
            function updateFilter() {
                var components = $scope.camelAllComponents;
                var filter = $scope.filter;
                if (filter) {
                    components = [];
                    angular.forEach($scope.camelAllComponents, function (component) {
                        var tags = component.tags;
                        if (tags && tags.indexOf(filter) >= 0) {
                            components.push(component);
                        }
                    });
                }
                $scope.camelComponents = components;
                Core.$apply($scope);
            }
            function updateData() {
                var commandId = $scope.id;
                var projectId = $scope.projectId;
                var request = {
                    namespace: $scope.namespace,
                    projectName: projectId,
                    resource: "",
                    inputList: [
                        {
                            excludeProject: addComponent ? "true" : "false",
                            format: "JSON"
                        }
                    ]
                };
                var onData = function (jsonData) {
                    $scope.camelAllComponents = angular.fromJson(jsonData);
                    var tagMap = {};
                    angular.forEach($scope.camelAllComponents, function (component) {
                        var tags = component.tags;
                        if (tags) {
                            component.$icon = Forge.getCamelComponentIconUrl(component.scheme);
                            angular.forEach(tags, function (tag) {
                                tagMap[tag] = tag;
                            });
                            component.$tagsText = tags.join(",");
                        }
                    });
                    $scope.tags = _.keys(tagMap).sort();
                    updateFilter();
                };
                Forge.executeCommand($scope, $http, ForgeApiURL, commandId, projectId, request, onData);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CamelComponentPicker = Forge.controller("CamelComponentPicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var componentName = properties.componentName || {};
            $scope.components = componentName.enum;
            angular.forEach($scope.components, function (component) {
                component.$icon = Forge.getCamelComponentIconUrl(component.scheme);
            });
            $scope.tileConfig = {
                selectionMatchProp: "scheme",
                selectedItems: [],
                showSelectBox: false,
                selectItems: true,
                multiSelect: false
            };
            entityChanged();
            $scope.$watch("entity.componentName", entityChanged);
            $scope.$watchCollection("tileConfig.selectedItems", userSelectionChanged);
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.components, function (pipeline) {
                        if (!answer && value === pipeline.scheme) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function entityChanged() {
                var component = $scope.entity.componentName;
                var initialSelection = component;
                if (angular.isString(component)) {
                    initialSelection = getSelection(component);
                }
                if (initialSelection) {
                    $scope.tileConfig.selectedItems = [initialSelection];
                    userSelectionChanged();
                }
            }
            var first = true;
            function userSelectionChanged() {
                var selection = $scope.tileConfig.selectedItems;
                var selectedValue = "";
                var selected = null;
                if (selection && selection.length) {
                    selected = selection[0];
                    selectedValue = selected.scheme;
                }
                if (selectedValue || !first) {
                    $scope.entity.componentName = selectedValue;
                    first = false;
                }
                $scope.selected = selected;
                Core.$apply($scope);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    function getCamelComponentIconUrl(scheme) {
        var icon = null;
        if (scheme) {
            icon = Forge.camelEndpointIcons[scheme];
        }
        if (!icon) {
            switch (scheme) {
                case "aws-sqs":
                case "direct":
                case "direct-vm":
                case "jms":
                case "sjms":
                case "vm":
                    scheme = "seda";
                    break;
                case "validator":
                    scheme = "bean-validator";
                    break;
                case "xslt":
                case "xquery":
                    scheme = "xmlrpc";
                    break;
                case "scheduler":
                    scheme = "timer";
                    break;
                case "rest":
                case "rest-api":
                case "cxfrs":
                    scheme = "http";
                    break;
                case "aws-ddb":
                case "aws-sdb":
                case "cql":
                case "elsql":
                case "gora":
                case "krati":
                case "pgevent":
                    scheme = "sql";
                    break;
            }
            icon = Forge.camelEndpointIcons[scheme];
        }
        if (!icon) {
            icon = Forge.camelEndpointIcons["core"] || "/img/icons/camel/endpoint24.png";
        }
        return icon;
    }
    Forge.getCamelComponentIconUrl = getCamelComponentIconUrl;
    function addCamelIcon(map, fileName) {
        var postfix = "24.png";
        if (angular.isString(fileName) && fileName.endsWith(postfix)) {
            map[fileName.substring(0, fileName.length - postfix.length)] = "/img/icons/camel/" + fileName;
        }
        return map;
    }
    Forge.addCamelIcon = addCamelIcon;
    function addCamelEndpointIcon(map, fileName) {
        var prefix = "camel-";
        if (angular.isString(fileName) && fileName.startsWith(prefix)) {
            angular.forEach(["_200x150.png", ".svg", ".png"], function (postfix) {
                if (fileName.endsWith(postfix)) {
                    map[fileName.substring(prefix.length, fileName.length - postfix.length)] = "/img/icons/camel/" + fileName;
                }
            });
        }
        return map;
    }
    Forge.addCamelEndpointIcon = addCamelEndpointIcon;
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.camelIcons = loadCamelIcons();
    Forge.camelEndpointIcons = loadCamelEndpointIcons();
    function loadCamelIcons() {
        var answer = {};
        answer = Forge.addCamelIcon(answer, 'aggregate24.png');
        answer = Forge.addCamelIcon(answer, 'bean24.png');
        answer = Forge.addCamelIcon(answer, 'camel.png');
        answer = Forge.addCamelIcon(answer, 'camel_context_icon.png');
        answer = Forge.addCamelIcon(answer, 'camel_route.png');
        answer = Forge.addCamelIcon(answer, 'camel_route_folder.png');
        answer = Forge.addCamelIcon(answer, 'camel_tracing.png');
        answer = Forge.addCamelIcon(answer, 'channel24.png');
        answer = Forge.addCamelIcon(answer, 'channelAdapter24.png');
        answer = Forge.addCamelIcon(answer, 'channelPurger24.png');
        answer = Forge.addCamelIcon(answer, 'choice24.png');
        answer = Forge.addCamelIcon(answer, 'commandMessage24.png');
        answer = Forge.addCamelIcon(answer, 'competingConsumers24.png');
        answer = Forge.addCamelIcon(answer, 'contentBasedRouter24.png');
        answer = Forge.addCamelIcon(answer, 'contentFilter24.png');
        answer = Forge.addCamelIcon(answer, 'controlBus24.png');
        answer = Forge.addCamelIcon(answer, 'convertBodyTo24.png');
        answer = Forge.addCamelIcon(answer, 'correlationIdentifier24.png');
        answer = Forge.addCamelIcon(answer, 'datatypeChannel24.png');
        answer = Forge.addCamelIcon(answer, 'deadLetterChannel24.png');
        answer = Forge.addCamelIcon(answer, 'detour24.png');
        answer = Forge.addCamelIcon(answer, 'distributionAggregate24.png');
        answer = Forge.addCamelIcon(answer, 'documentMessage24.png');
        answer = Forge.addCamelIcon(answer, 'durableSubscription24.png');
        answer = Forge.addCamelIcon(answer, 'dynamicRouter24.png');
        answer = Forge.addCamelIcon(answer, 'edit_camel_route.png');
        answer = Forge.addCamelIcon(answer, 'encapsulatedSynchronous24.png');
        answer = Forge.addCamelIcon(answer, 'endoints.png');
        answer = Forge.addCamelIcon(answer, 'endpoint24.png');
        answer = Forge.addCamelIcon(answer, 'endpointDrools24.png');
        answer = Forge.addCamelIcon(answer, 'endpointFile24.png');
        answer = Forge.addCamelIcon(answer, 'endpointFolder24.png');
        answer = Forge.addCamelIcon(answer, 'endpointQueue24.png');
        answer = Forge.addCamelIcon(answer, 'endpointRepository24.png');
        answer = Forge.addCamelIcon(answer, 'endpointTimer24.png');
        answer = Forge.addCamelIcon(answer, 'endpoint_folder.png');
        answer = Forge.addCamelIcon(answer, 'endpoint_node.png');
        answer = Forge.addCamelIcon(answer, 'enrich24.png');
        answer = Forge.addCamelIcon(answer, 'envelopeWrapper24.png');
        answer = Forge.addCamelIcon(answer, 'eventDrivenConsumer24.png');
        answer = Forge.addCamelIcon(answer, 'eventMessage24.png');
        answer = Forge.addCamelIcon(answer, 'fileTransfer24.png');
        answer = Forge.addCamelIcon(answer, 'filter24.png');
        answer = Forge.addCamelIcon(answer, 'flow24.png');
        answer = Forge.addCamelIcon(answer, 'generic24.png');
        answer = Forge.addCamelIcon(answer, 'guaranteedMessaging24.png');
        answer = Forge.addCamelIcon(answer, 'idempotentConsumer24.png');
        answer = Forge.addCamelIcon(answer, 'invalidMessageChannel24.png');
        answer = Forge.addCamelIcon(answer, 'loadBalance24.png');
        answer = Forge.addCamelIcon(answer, 'log24.png');
        answer = Forge.addCamelIcon(answer, 'marshal24.png');
        answer = Forge.addCamelIcon(answer, 'message24.png');
        answer = Forge.addCamelIcon(answer, 'messageBroker24.png');
        answer = Forge.addCamelIcon(answer, 'messageBus24.png');
        answer = Forge.addCamelIcon(answer, 'messageDispatcher24.png');
        answer = Forge.addCamelIcon(answer, 'messageExpiration24.png');
        answer = Forge.addCamelIcon(answer, 'messageSelector24.png');
        answer = Forge.addCamelIcon(answer, 'messageSequence24.png');
        answer = Forge.addCamelIcon(answer, 'messageStore24.png');
        answer = Forge.addCamelIcon(answer, 'messaging24.png');
        answer = Forge.addCamelIcon(answer, 'messagingAdapter24.png');
        answer = Forge.addCamelIcon(answer, 'messagingBridge24.png');
        answer = Forge.addCamelIcon(answer, 'messagingGateway24.png');
        answer = Forge.addCamelIcon(answer, 'multicast24.png');
        answer = Forge.addCamelIcon(answer, 'node24.png');
        answer = Forge.addCamelIcon(answer, 'normalizer24.png');
        answer = Forge.addCamelIcon(answer, 'pipeline24.png');
        answer = Forge.addCamelIcon(answer, 'pointToPoint24.png');
        answer = Forge.addCamelIcon(answer, 'pollEnrich24.png');
        answer = Forge.addCamelIcon(answer, 'pollingConsumer24.png');
        answer = Forge.addCamelIcon(answer, 'process24.png');
        answer = Forge.addCamelIcon(answer, 'processManager24.png');
        answer = Forge.addCamelIcon(answer, 'processor24.png');
        answer = Forge.addCamelIcon(answer, 'recipientList24.png');
        answer = Forge.addCamelIcon(answer, 'requestReply24.png');
        answer = Forge.addCamelIcon(answer, 'resequence24.png');
        answer = Forge.addCamelIcon(answer, 'returnAddress24.png');
        answer = Forge.addCamelIcon(answer, 'route24.png');
        answer = Forge.addCamelIcon(answer, 'routingSlip24.png');
        answer = Forge.addCamelIcon(answer, 'setBody24.png');
        answer = Forge.addCamelIcon(answer, 'sharedDatabase24.png');
        answer = Forge.addCamelIcon(answer, 'smartProxy24.png');
        answer = Forge.addCamelIcon(answer, 'split24.png');
        answer = Forge.addCamelIcon(answer, 'storeInLibrary24.png');
        answer = Forge.addCamelIcon(answer, 'testMessage24.png');
        answer = Forge.addCamelIcon(answer, 'transactionalClient24.png');
        answer = Forge.addCamelIcon(answer, 'transform24.png');
        answer = Forge.addCamelIcon(answer, 'unmarshal24.png');
        answer = Forge.addCamelIcon(answer, 'wireTap24.png');
        return answer;
    }
    function loadCamelEndpointIcons() {
        var answer = {};
        answer = Forge.addCamelEndpointIcon(answer, 'camel-activemq_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-ahc_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-amqp_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-apns_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-atom_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-avro_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-aws_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-bean-validator_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-bean.svg');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-box_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-cache_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-cmis_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-cometd_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-context_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-core_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-couchdb_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-crypto_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-cxf_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-disruptor_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-dns_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-dropbox_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-ejb_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-elasticsearch_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-eventadmin_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-exec_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-facebook_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-file_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-flatpack_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-fop_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-freemarker_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-ftp_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-gae1_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-gae2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-gae3_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-gae4_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-gae5_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-gae_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-geocoder_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-google-drive_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-guava-eventbus_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-hazelcast_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-hbase_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-hdfs_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-hl7_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-http4_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-http_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-ibatis_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-infinispan_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-irc_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-javaspace_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jbi_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jclouds_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jcr_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jdbc_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jetty.svg');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jing1_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jing2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jing_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jms_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jmx_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jpa_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jsch_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-jt400_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-kafka.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-kestrel_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-krati_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-ldap_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-leveldb_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-linkedin_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-lucene_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mail1_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mail2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mail_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mina2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mina_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mongodb_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mqtt_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-msv_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mustache_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mvel_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-mybatis_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-nagios_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-netty-http_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-netty_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-olingo2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-paxlogging_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-printer_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-properties_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-quartz2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-quartz_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-quickfix_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-rabbitmq_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-restlet_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-rmi_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-routebox_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-rss_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-salesforce_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-salesforce_500x400.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-sap-netweaver_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-sap_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-sap_500x400.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-saxon_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-scalate_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-seda_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-servlet_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-servletlistener_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-sip_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-sjms_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-smpp_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-snmp_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-solr_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spark-rest_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring-batch_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring-integration_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring-ldap_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring-redis_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring-ws_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring1_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring2_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring3_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-spring_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-sql_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-ssh_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-stax_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-stomp_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-stream_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-stringtemplate_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-timer_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-twitter_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-twitter_500x400.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-urlrewrite_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-velocity_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-vertx_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-weather_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-websocket_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-xmlrpc_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-xmlsecurity_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-xmpp_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-yammer_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'camel-zookeeper_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'fabric-camel_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'master_200x150.png');
        answer = Forge.addCamelEndpointIcon(answer, 'servicemix-camel_200x150.png');
        return answer;
    }
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CamelNodeController = Forge.controller("CamelNodeController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel", "KubernetesModel",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel, KubernetesModel) {
            var node = $scope.node || {};
            var key = node.key;
            var children = node.children || [];
            if (children.length) {
                $scope.hasChildren = true;
                $scope.expandClass = "expandable closed";
            }
            var xml = $scope.xml || "META-INF/spring/camel-context.xml";
            var resourcePath = "";
            $scope.pattern = node.pattern;
            var addEndpointEnabled = true;
            var icon = Forge.camelIcons[$scope.pattern];
            $scope.label = node.label || $scope.pattern;
            $scope.description = node.description || $scope.pattern;
            switch ($scope.pattern) {
                case "camelContext":
                    $scope.addRouteEnabled = true;
                    icon = "/img/icons/camel/camel_route_folder.png";
                    addEndpointEnabled = false;
                    break;
                case "route":
                    icon = "/img/icons/camel/camel.png";
                    break;
                case "from":
                case "to":
                    icon = "/img/icons/camel/endpoint24.png";
                    addEndpointEnabled = false;
                    var componentName = "";
                    var uri = node.properties.uri;
                    if (uri) {
                        var parts = uri.split(":");
                        if (parts && parts.length) {
                            componentName = parts[0];
                        }
                    }
                    icon = Forge.camelEndpointIcons[componentName];
                    if (!icon) {
                        icon = Forge.camelEndpointIcons["core"] || "/img/icons/camel/endpoint24.png";
                    }
                    break;
                default:
                    $scope.addRouteEnabled = false;
            }
            if (!icon) {
                icon = "/img/icons/camel/generic24.png";
            }
            $scope.addEndpointEnabled = addEndpointEnabled;
            $scope.addPatternEnabled = addEndpointEnabled;
            $scope.editEnabled = true;
            $scope.icon = icon;
            $scope.deletePrompt = function () {
                UI.multiItemConfirmActionDialog({
                    collection: [node],
                    index: 'label',
                    onClose: function (result) {
                        if (result) {
                            doDelete();
                        }
                    },
                    title: 'Delete Node',
                    action: 'The following node will be deleted:',
                    okText: 'Delete',
                    okClass: 'btn-danger',
                    custom: "This operation is permanent once completed!",
                    customClass: "alert alert-warning"
                }).open();
            };
            function doDelete() {
                Forge.log.info("Deleting node " + key + " from xml " + xml);
                var commandId = "camel-delete-node-xml";
                var projectId = $scope.projectId;
                var request = {
                    namespace: $scope.namespace,
                    projectName: projectId,
                    resource: "",
                    inputList: [
                        {
                            node: key,
                            xml: xml
                        }
                    ]
                };
                var onData = function (jsonData) {
                    Forge.log.info("Deleted and got data: " + jsonData);
                    $scope.updateData();
                };
                Forge.executeCommand($scope, $http, ForgeApiURL, commandId, projectId, request, onData, false);
            }
            $scope.deleteNode = function () {
                var input = {
                    node: key,
                    xml: xml
                };
                var nextCommand = "camel-delete-node-xml";
                var nextPage = 1;
                Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
            };
            $scope.editNode = function () {
                Forge.log.info("about to edit the node!");
                var input = {
                    node: key,
                    xml: xml
                };
                var nextCommand = "camel-edit-node-xml";
                var nextPage = 2;
                Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
            };
            $scope.addPatternNode = function () {
                var input = {
                    parent: key,
                    xml: xml
                };
                var nextCommand = "camel-add-node-xml";
                var nextPage = 1;
                Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
            };
            $scope.addEndpointNode = function () {
                var input = {
                    node: key,
                    xml: xml
                };
                var nextCommand = "camel-add-endpoint-xml";
                var nextPage = 1;
                Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
            };
            $scope.addRoute = function () {
                var input = {
                    xml: xml
                };
                var nextCommand = "camel-add-route-xml";
                var nextPage = 1;
                Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
            };
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CamelOverviewController = Forge.controller("CamelOverviewController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel", "KubernetesModel",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel, KubernetesModel) {
            $scope.id = "camel-get-overview";
            Forge.initScope($scope, $location, $routeParams);
            var resourcePath = "";
            var projectId = $scope.projectId;
            $scope.componentTable = {
                data: 'camelProject.components',
                showSelectionCheckbox: true,
                enableRowClickSelection: true,
                multiSelect: false,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["cq"] || ''
                },
                columnDefs: [
                    {
                        field: 'scheme',
                        displayName: 'Scheme',
                        defaultSort: true
                    },
                    {
                        field: 'syntax',
                        displayName: 'Syntrax',
                        defaultSort: true
                    },
                    {
                        field: 'description',
                        displayName: 'Description'
                    }
                ]
            };
            $scope.tableConfig = {
                data: 'camelProject.endpoints',
                showSelectionCheckbox: true,
                enableRowClickSelection: true,
                multiSelect: false,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["q"] || ''
                },
                columnDefs: [
                    {
                        field: 'endpointInstance',
                        displayName: 'Name',
                        defaultSort: true
                    },
                    {
                        field: 'endpointUri',
                        displayName: 'URI',
                        defaultSort: true
                    },
                    {
                        field: '$kind',
                        displayName: 'Kind'
                    },
                    {
                        field: 'fileName',
                        displayName: 'File',
                        cellTemplate: $templateCache.get("endpointFileName.html")
                    },
                ]
            };
            $scope.routeTable = {
                data: 'camelProject.routes',
                showSelectionCheckbox: true,
                enableRowClickSelection: true,
                multiSelect: false,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["rq"] || ''
                },
                columnDefs: [
                    {
                        field: 'fileName',
                        displayName: 'RouteBuilder',
                        cellTemplate: $templateCache.get("endpointFileName.html")
                    },
                ]
            };
            $scope.addRouteBuilderLink = Forge.commandLink(projectId, "camel-new-routebuilder", "");
            $scope.createEndpointLink = Forge.commandLink(projectId, "camel-add-endpoint", "");
            $scope.addComponentLink = Forge.projectPerspectiveLink($scope.namespace, projectId, "camelAddComponent");
            $scope.editEndpoint = function () {
                var selection = $scope.tableConfig.selectedItems;
                if (selection && selection.length) {
                    var endpoint = selection[0];
                    var input = {
                        endpoints: endpoint.endpointUri
                    };
                    var commandId = "camel-edit-endpoint";
                    var fileName = endpoint.fileName || "";
                    if (fileName.endsWith(".xml")) {
                        commandId = "camel-edit-endpoint-xml";
                    }
                    Forge.gotoCommand($location, projectId, commandId, resourcePath, input, 2);
                }
            };
            $scope.createEndpointForComponent = function () {
                var selection = $scope.componentTable.selectedItems;
                if (selection && selection.length) {
                    var component = selection[0];
                    var input = {
                        componentName: component.scheme
                    };
                    var commandId = "camel-add-endpoint";
                    if (isXmlProject()) {
                        commandId = "camel-add-endpoint-xml";
                    }
                    Forge.gotoCommand($location, projectId, commandId, resourcePath, input, 1);
                }
                else {
                    Forge.log.warn("No component selected!");
                }
            };
            $scope.$on('$routeUpdate', function ($event) {
                updateData();
            });
            function isXmlProject() {
                var javaCount = 0;
                var xmlCount = 0;
                angular.forEach($scope.camelProject.routes, function (route) {
                    var fileName = route.fileName;
                    if (fileName) {
                        if (fileName.toLowerCase().endsWith(".xml")) {
                            xmlCount++;
                        }
                        else {
                            javaCount++;
                        }
                    }
                });
                return xmlCount || !javaCount;
            }
            $scope.updateData = updateData;
            updateData();
            function updateData() {
                var commandId = $scope.id;
                var request = {
                    namespace: $scope.namespace,
                    projectName: projectId,
                    resource: "",
                    inputList: [
                        {
                            format: "JSON"
                        }
                    ]
                };
                var onData = function (jsonData) {
                    var routes = [];
                    var routeBuilderCount = 0;
                    $scope.camelProject = jsonData || {};
                    $scope.xml = "";
                    angular.forEach($scope.camelProject.endpoints, function (endpoint) {
                        var fileName = endpoint.fileName;
                        if (fileName) {
                            var prefix = "src/main/java";
                            if (fileName.endsWith(".xml")) {
                                if (!$scope.xml) {
                                    $scope.xml = fileName;
                                }
                                prefix = "src/main/resources";
                                var pageId = UrlHelpers.join(prefix, fileName);
                                endpoint.$fileLink = Wiki.customEditLink($scope, pageId, $location, "camel/canvas");
                            }
                            else {
                                routeBuilderCount++;
                                var pageId = UrlHelpers.join(prefix, fileName);
                                endpoint.$fileLink = Wiki.editLink($scope, pageId, $location);
                            }
                            var kind = "";
                            if (endpoint.consumerOnly) {
                                kind = endpoint.producerOnly ? "pipe" : "consumer";
                            }
                            else if (endpoint.producerOnly) {
                                kind = "producer";
                            }
                            endpoint.$kind = kind;
                            if (!_.some(routes, { "fileName": fileName })) {
                                routes.push({
                                    fileName: fileName,
                                    $fileLink: endpoint.$fileLink
                                });
                            }
                        }
                    });
                    $scope.camelProject.$routeBuilderCount = routeBuilderCount;
                    if (!angular.isArray($scope.camelProject.routes) || !$scope.camelProject.routes.length) {
                        $scope.camelProject.routes = routes;
                    }
                    Forge.log.info("loaded the camel project");
                    Core.$apply($scope);
                };
                Forge.executeCommand($scope, $http, ForgeApiURL, commandId, projectId, request, onData);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CamelPatternPicker = Forge.controller("CamelPatternPicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var selectionValueProperty = "name";
            var propertyName = "name";
            var propertyInfo = properties[propertyName] || {};
            $scope.patterns = [];
            angular.forEach(propertyInfo.enum, function (pattern) {
                if (pattern.name === "crypto") {
                    pattern.title = "Crypto Data Format";
                    pattern.description = "Crypto (Java Cryptographic Extension)";
                }
                var tags = pattern.tags;
                if (angular.isArray(tags)) {
                    pattern.$class = tags.join(" ");
                }
                $scope.patterns.push(pattern);
            });
            $scope.patterns = _.sortBy($scope.patterns, "title");
            $scope.tileConfig = {
                selectionMatchProp: selectionValueProperty,
                selectedItems: [],
                showSelectBox: false,
                selectItems: true,
                multiSelect: false
            };
            entityChanged();
            $scope.$watch("entity." + propertyName, entityChanged);
            $scope.$watchCollection("tileConfig.selectedItems", userSelectionChanged);
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.patterns, function (pipeline) {
                        if (!answer && value === pipeline[selectionValueProperty]) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function entityChanged() {
                var component = $scope.entity[propertyName];
                var initialSelection = component;
                if (angular.isString(component)) {
                    initialSelection = getSelection(component);
                }
                if (initialSelection) {
                    $scope.tileConfig.selectedItems = [initialSelection];
                    userSelectionChanged();
                }
            }
            var first = true;
            function userSelectionChanged() {
                var selection = $scope.tileConfig.selectedItems;
                var selectedValue = "";
                var selected = null;
                if (selection && selection.length) {
                    selected = selection[0];
                    selectedValue = selected[selectionValueProperty];
                }
                if (selectedValue || !first) {
                    $scope.entity[propertyName] = selectedValue;
                    first = false;
                }
                $scope.selected = selected;
                Core.$apply($scope);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CamelRoutesController = Forge.controller("CamelRoutesController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel", "KubernetesModel",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel, KubernetesModel) {
            $scope.id = "camel-get-routes-xml";
            Forge.initScope($scope, $location, $routeParams);
            var resourcePath = "";
            $scope.$on('$routeUpdate', function ($event) {
                updateData();
            });
            updateData();
            $scope.updateData = updateData;
            $scope.addRoute = function () {
                var xml = $scope.xml || $scope.$parent.xml || "META-INF/spring/camel-context.xml";
                Forge.log.info("Adding route with xml: " + xml);
                var input = {
                    xml: xml
                };
                var nextCommand = "camel-add-route-xml";
                var nextPage = 1;
                Forge.gotoCommand($location, $scope.projectId, nextCommand, resourcePath, input, nextPage);
            };
            function updateData() {
                var commandId = $scope.id;
                var projectId = $scope.projectId;
                var request = {
                    namespace: $scope.namespace,
                    projectName: projectId,
                    resource: "",
                    inputList: [
                        {
                            format: "JSON"
                        }
                    ]
                };
                var onData = function (jsonData) {
                    $scope.contexts = jsonData;
                    angular.forEach($scope.contexts, function (component) {
                    });
                    Forge.log.info("Updated the camel routes");
                    Core.$apply($scope);
                };
                Forge.executeCommand($scope, $http, ForgeApiURL, commandId, projectId, request, onData);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    function configureCommands($timeout, $templateCache, localStorage, commandId, entity, schema) {
        var properties = schema.properties || {};
        var required = schema.required || [];
        _.forEach(required, function (name) {
            Core.pathSet(properties, [name, 'input-attributes', 'required'], true);
        });
        Forge.log.debug("Configuring schema, commandId: ", commandId);
        if (commandId === "project-new") {
            schema.controls = ["type", "*"];
            var overwrite = properties.overwrite;
            var catalog = properties.catalog;
            var targetLocation = properties.targetLocation;
            var archetype = properties.archetype;
            var named = properties.named || {};
            named.title = "Name";
            Core.pathSet(named, ['input-attributes', 'pattern'], '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)');
            var projectType = properties.type || {};
            projectType.formTemplate = $templateCache.get("forgeProjectTypeChooser.html");
            function hide(propertyName) {
                var property = properties[propertyName];
                if (property) {
                    property.hidden = true;
                }
            }
            if (targetLocation) {
                targetLocation.hidden = true;
                if (overwrite) {
                    overwrite.hidden = true;
                }
                Forge.log.debug("hiding targetLocation!");
            }
            if (!entity.type) {
                entity.type = localStorage["forgeProjectType"];
            }
            if (catalog) {
                if (!entity.catalog) {
                    entity.catalog = "fabric8";
                }
            }
            if (archetype) {
                archetype.formTemplate = $templateCache.get("devOpsArchetypeChooser.html");
            }
            var dependencies = properties.dependencies;
            if (dependencies) {
                dependencies.formTemplate = $templateCache.get("devOpsDependenciesChooser.html");
            }
            var fractions = properties.fractions;
            if (fractions) {
                fractions.formTemplate = $templateCache.get("devOpsFractionsChooser.html");
            }
            projectType.isMavenProjectType = Forge.isMavenProjectType;
            projectType.showStackBuildSystemFinalName = Forge.showStackBuildSystemFinalName;
            angular.forEach(["topLevelPackage", "version"], function (propertyName) {
                var property = properties[propertyName];
                if (property) {
                    property['control-group-attributes'] = {
                        'ng-show': "config.properties.type.isMavenProjectType(entity.type)"
                    };
                }
            });
            angular.forEach(["buildSystem", "finalName", "stack"], function (propertyName) {
                var property = properties[propertyName];
                if (property) {
                    property['control-group-attributes'] = {
                        'ng-show': "config.properties.type.showStackBuildSystemFinalName(entity.type)"
                    };
                }
            });
        }
        else if (commandId === "devops-edit") {
            var pipeline = properties.pipeline;
            if (pipeline) {
                pipeline.formTemplate = $templateCache.get("devOpsPipelineChooser.html");
            }
        }
        else if (commandId === "camel-edit-endpoint" || commandId === "camel-edit-endpoint-xml") {
            var endpoints = properties.endpoints;
            if (endpoints) {
                var values = endpoints.enum;
                if (values) {
                    endpoints.enum = _.drop(values);
                }
                endpoints.selectors = {
                    'select': function (select) {
                        select.attr({ size: '15' });
                    }
                };
            }
        }
        else if (commandId === "camel-add-endpoint") {
            configureCamelComponentName(properties, $templateCache);
            hide("componentNameFilter");
            var current = entity.componentName;
            if (angular.isString(current)) {
                angular.forEach(["componentNameFilter", "componentName"], function (propertyName) {
                    var property = properties[propertyName];
                    if (property) {
                        property.hidden = true;
                    }
                });
            }
        }
        else if (commandId === "camel-add-endpoint-xml") {
            configureCamelComponentName(properties, $templateCache);
            angular.forEach(["xml", "node"], function (propertyName) {
                var property = properties[propertyName];
                if (property && entity[propertyName]) {
                    property.hidden = true;
                }
            });
        }
        else if (commandId === "camel-add-node-xml") {
            configureCamelComponentName(properties, $templateCache);
            var name = properties.name;
            if (name) {
                name.formTemplate = $templateCache.get("camelPatternChooser.html");
            }
            angular.forEach(["xml", "parent"], function (propertyName) {
                var property = properties[propertyName];
                if (property && entity[propertyName]) {
                    property.hidden = true;
                }
            });
        }
        else if (commandId === "camel-edit-node-xml") {
            var componentNameProperty = properties.componentName || {};
            componentNameProperty.formTemplate = $templateCache.get("camelComponentChooser.html");
            angular.forEach(["xml", "node"], function (propertyName) {
                var property = properties[propertyName];
                if (property && entity[propertyName]) {
                    property.hidden = true;
                }
            });
        }
        else if (commandId.startsWith("camel-")) {
            configureCamelComponentName(properties, $templateCache);
        }
    }
    Forge.configureCommands = configureCommands;
    function configureCamelComponentName(properties, $templateCache) {
        var componentNameProperty = properties.componentName || {};
        componentNameProperty.formTemplate = $templateCache.get("camelComponentChooser.html");
        componentNameProperty.title = "Component";
    }
    function convertToStringArray(array, propertyName) {
        if (propertyName === void 0) { propertyName = "value"; }
        if (angular.isArray(array)) {
            for (var i = 0, size = array.length; i < size; i++) {
                var value = array[i];
                if (!angular.isString(value) && angular.isObject(value)) {
                    var textValue = value[propertyName];
                    if (textValue) {
                        array[i] = textValue;
                    }
                }
            }
        }
    }
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CommandController = Forge.controller("CommandController", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "localStorage", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, localStorage, ForgeApiURL, ForgeModel) {
            $scope.model = ForgeModel;
            $scope.resourcePath = $routeParams["path"] || $location.search()["path"] || "";
            $scope.id = $routeParams["id"];
            $scope.path = $routeParams["path"];
            $scope.avatar_url = localStorage["gogsAvatarUrl"];
            $scope.user = localStorage["gogsUser"];
            $scope.repoName = "";
            var pathSteps = $scope.resourcePath.split("/");
            if (pathSteps && pathSteps.length) {
                $scope.repoName = pathSteps[pathSteps.length - 1];
            }
            Forge.initScope($scope, $location, $routeParams);
            Forge.redirectToSetupSecretsIfNotDefined($scope, $location);
            $scope.$completeLink = $scope.$projectLink;
            $scope.completedLink = $scope.$completeLink;
            $scope.commandsLink = Forge.commandsLink($scope.resourcePath, $scope.projectId);
            $scope.entity = {};
            $scope.inputList = [$scope.entity];
            $scope.startup = true;
            function checkIfShouldMoveToPage2() {
                var search = $location.search();
                var pageNumber = search["_page"];
                if (pageNumber && $scope.inputList.length < 2 && $scope.startup) {
                    angular.forEach(search, function (value, key) {
                        if (key && !_.startsWith(key, "_")) {
                            $scope.entity[key] = value;
                        }
                    });
                    $scope.inputList = [$scope.entity];
                    if (pageNumber > 1) {
                        return true;
                    }
                }
                return false;
            }
            function onRouteChanged() {
                Forge.log.debug("route updated; lets clear the entity");
                $scope.entity = {};
                $scope.inputList = [$scope.entity];
                $scope.previousSchemaJson = "";
                $scope.schema = null;
                if (checkIfShouldMoveToPage2()) {
                    $scope.moveToPage2OnStartup = true;
                    $scope.execute();
                }
                else {
                    updateData();
                }
            }
            $scope.$on('$routeChangeSuccess', onRouteChanged);
            $scope.$on('hawtio-form2-form', function ($event, formInfo) {
                if (formInfo.name === "forge") {
                    $scope.form = formInfo.form;
                }
            });
            $scope.getLabel = function (name) {
                var property = $scope.schema.properties[name] || {};
                var label = property.label || property.title || _.capitalize(name);
                return label;
            };
            $scope.execute = function () {
                $scope.response = null;
                $scope.executing = true;
                $scope.invalid = false;
                $scope.validationError = null;
                var commandId = $scope.id;
                var resourcePath = $scope.resourcePath;
                var url = Forge.executeCommandApiUrl(ForgeApiURL, commandId);
                var inputList = $scope.inputList;
                inputList[inputList.length - 1] = postProcessEntity($scope.entity);
                var request = {
                    namespace: $scope.namespace,
                    projectName: $scope.projectId,
                    resource: resourcePath,
                    inputList: inputList
                };
                url = Forge.createHttpUrl($scope.projectId, url);
                Forge.log.info("About to post to " + url + " payload: " + angular.toJson(request));
                $http.post(url, request, Forge.createHttpConfig()).
                    success(function (data, status, headers, config) {
                    try {
                        $scope.invalid = false;
                        $scope.validationError = null;
                        if (data) {
                            data.message = data.message || data.output;
                            var wizardResults = data.wizardResults;
                            if (wizardResults) {
                                angular.forEach(wizardResults.stepValidations, function (validation) {
                                    if (!$scope.invalid && !validation.valid) {
                                        var messages = validation.messages || [];
                                        if (messages.length) {
                                            var message = messages[0];
                                            if (message) {
                                                if ($scope.startup && $scope.moveToPage2OnStartup) {
                                                }
                                                else {
                                                    $scope.invalid = true;
                                                    $scope.validationError = message.description;
                                                    $scope.validationInput = message.inputName;
                                                }
                                            }
                                        }
                                    }
                                });
                                var stepInputs = wizardResults.stepInputs;
                                if (stepInputs) {
                                    var schema = _.last(stepInputs);
                                    if (schema) {
                                        $scope.entity = {};
                                        $scope.inputList.push($scope.entity);
                                        updateSchema(schema);
                                        if (data.canMoveToNextStep) {
                                            data = null;
                                        }
                                        else {
                                            $scope.wizardCompleted = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (!$scope.invalid) {
                            $scope.response = data;
                            var dataOrEmpty = (data || {});
                            var status = (dataOrEmpty.status || "").toString().toLowerCase();
                            $scope.responseClass = toBackgroundStyle(status);
                            var outputProperties = (dataOrEmpty.outputProperties || {});
                            var projectId = dataOrEmpty.projectName || outputProperties.fullName;
                            if ($scope.response) {
                                switch ($scope.id) {
                                    case 'project-new':
                                        if (projectId) {
                                            var projectType = ($scope.entity || {}).type;
                                            if (projectType && angular.isString(projectType)) {
                                                localStorage["forgeProjectType"] = projectType;
                                            }
                                            if (!Forge.getProjectSourceSecret(localStorage, $scope.namespace, projectId)) {
                                                var defaultSecretName = Forge.getProjectSourceSecret(localStorage, $scope.namespace, null);
                                                Forge.setProjectSourceSecret(localStorage, $scope.namespace, projectId, defaultSecretName);
                                            }
                                            var editPath = UrlHelpers.join(Developer.projectLink(projectId), "/forge/command/devops-edit");
                                            Kubernetes.goToPath($location, editPath);
                                        }
                                        break;
                                    case 'devops-edit':
                                        if (status === 'success') {
                                            Kubernetes.goToPath($location, $scope.completedLink);
                                        }
                                        break;
                                    default:
                                        if ($scope.id && status === 'success' && _.startsWith($scope.id, "camel-")) {
                                            var response = $scope.response || {};
                                            var message = response.message;
                                            if (message) {
                                                Core.notification("success", message);
                                            }
                                            Kubernetes.goToPath($location, $scope.completedLink);
                                        }
                                }
                            }
                        }
                    }
                    catch (e) {
                        Forge.log.error("Failed to process execute() results: " + e, e);
                    }
                    $scope.startup = false;
                    $scope.executing = false;
                }).
                    error(function (data, status, headers, config) {
                    $scope.executing = false;
                    $scope.errorData = data;
                    Forge.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            };
            $scope.$watchCollection("entity", function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    validate();
                }
            });
            function updateSchema(schema) {
                if (schema) {
                    Forge.configureCommands($timeout, $templateCache, localStorage, $scope.id, $scope.entity, schema);
                    $scope.schema = onSchemaLoad(schema);
                }
            }
            function validate() {
                if ($scope.wizardCompleted || $scope.executing || $scope.validating) {
                    return;
                }
                var newJson = angular.toJson($scope.entity);
                if (newJson === $scope.validatedEntityJson) {
                    return;
                }
                else {
                    $scope.validatedEntityJson = newJson;
                }
                var commandId = $scope.id;
                var resourcePath = $scope.resourcePath;
                var url = Forge.validateCommandApiUrl(ForgeApiURL, commandId);
                var inputList = $scope.inputList;
                inputList[inputList.length - 1] = postProcessEntity($scope.entity);
                var request = {
                    namespace: $scope.namespace,
                    projectName: $scope.projectId,
                    resource: resourcePath,
                    inputList: inputList
                };
                url = Forge.createHttpUrl($scope.projectId, url);
                $scope.validating = true;
                $http.post(url, request, Forge.createHttpConfig()).
                    success(function (data, status, headers, config) {
                    $scope.validation = data;
                    var wizardResults = data.wizardResults;
                    if (wizardResults) {
                        var stepInputs = wizardResults.stepInputs;
                        if (stepInputs) {
                            var schema = _.last(stepInputs);
                            updateSchema(schema);
                        }
                    }
                    $timeout(function () {
                        $scope.validating = false;
                        validate();
                    }, 200);
                }).
                    error(function (data, status, headers, config) {
                    $scope.executing = false;
                    Forge.log.warn("Failed to load " + url + " " + data + " " + status);
                });
            }
            if (checkIfShouldMoveToPage2()) {
                $scope.fetched = true;
            }
            else {
                updateData();
            }
            function toBackgroundStyle(status) {
                if (!status) {
                    status = "";
                }
                if (status.startsWith("suc")) {
                    return "alert-success";
                }
                return "alert-warning";
            }
            function updateData() {
                $scope.item = null;
                var commandId = $scope.id;
                if (commandId) {
                    var resourcePath = $scope.resourcePath;
                    var url = Forge.commandInputApiUrl(ForgeApiURL, commandId, $scope.namespace, $scope.projectId, resourcePath);
                    url = Forge.createHttpUrl($scope.projectId, url);
                    $http.get(url, Forge.createHttpConfig()).
                        success(function (data, status, headers, config) {
                        if (data) {
                            var schema = data;
                            $scope.fetched = true;
                            Forge.log.debug("updateData loaded schema: ", schema);
                            updateSchema(schema);
                            Forge.setModelCommandInputs(ForgeModel, $scope.resourcePath, $scope.id, $scope.schema);
                        }
                    }).
                        error(function (data, status, headers, config) {
                        Forge.log.warn("Failed to load " + url + " " + data + " " + status);
                    });
                }
            }
            function postProcessEntity(entity) {
                var answer = {};
                angular.forEach(entity, function (value, key) {
                    if (!angular.isArray(value) && angular.isObject(value)) {
                        var textValue = value.label || value.id || value.name || value.$id || value._key;
                        Forge.log.info("Converting property " + key + " to value " + textValue + " for selection: " + angular.toJson(value));
                        if (textValue) {
                            value = textValue;
                        }
                    }
                    answer[key] = value;
                });
                return answer;
            }
            function onSchemaLoad(schema) {
                $scope.fetched = schema ? true : false;
                var entity = $scope.entity;
                if (schema) {
                    angular.forEach(schema.properties, function (property, key) {
                        var value = getValidatedSchemaPropertyValue(property, key);
                        if (value && !entity[key]) {
                            entity[key] = value;
                        }
                        delete property.value;
                    });
                }
                return schema;
            }
        }]);
    function getValidatedSchemaPropertyValue(property, name) {
        var value = property.value;
        if (value) {
            var enumValues = property.enum;
            if (angular.isArray(enumValues) && enumValues.length) {
                var found = false;
                var strings = true;
                angular.forEach(enumValues, function (enumValue) {
                    if (angular.isString(enumValue)) {
                        if (enumValue === value) {
                            found = true;
                        }
                    }
                    else {
                        strings = false;
                    }
                });
                if (strings && !found) {
                    Forge.log.warn("Value " + value + " of property " + name + " is not in the enum list: " + angular.toJson(enumValues, false));
                    value = null;
                }
            }
        }
        return value;
    }
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.CommandsController = Forge.controller("CommandsController", ["$scope", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel) {
            $scope.model = ForgeModel;
            $scope.resourcePath = $routeParams["path"] || $location.search()["path"] || "";
            $scope.repoName = "";
            $scope.projectDescription = $scope.resourcePath || "";
            var pathSteps = $scope.projectDescription.split("/");
            if (pathSteps && pathSteps.length) {
                $scope.repoName = pathSteps[pathSteps.length - 1];
            }
            if (!$scope.projectDescription.startsWith("/") && $scope.projectDescription.length > 0) {
                $scope.projectDescription = "/" + $scope.projectDescription;
            }
            $scope.avatar_url = localStorage["gogsAvatarUrl"];
            $scope.user = localStorage["gogsUser"];
            $scope.commands = Forge.getModelCommands(ForgeModel, $scope.resourcePath);
            $scope.fetched = $scope.commands.length !== 0;
            Forge.initScope($scope, $location, $routeParams);
            Forge.redirectToSetupSecretsIfNotDefined($scope, $location);
            $scope.tableConfig = {
                data: 'commands',
                showSelectionCheckbox: true,
                enableRowClickSelection: false,
                multiSelect: true,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["q"] || ''
                },
                columnDefs: [
                    {
                        field: 'name',
                        displayName: 'Name',
                        cellTemplate: $templateCache.get("idTemplate.html")
                    },
                    {
                        field: 'description',
                        displayName: 'Description'
                    },
                    {
                        field: 'category',
                        displayName: 'Category'
                    }
                ]
            };
            function commandMatches(command) {
                var filterText = $scope.tableConfig.filterOptions.filterText;
                return Forge.commandMatchesText(command, filterText);
            }
            $scope.commandSelector = {
                filterText: "",
                folders: [],
                selectedCommands: [],
                expandedFolders: {},
                isOpen: function (folder) {
                    var filterText = $scope.tableConfig.filterOptions.filterText;
                    if (filterText !== '' || $scope.commandSelector.expandedFolders[folder.id]) {
                        return "opened";
                    }
                    return "closed";
                },
                clearSelected: function () {
                    openAllCommands();
                    Core.$apply($scope);
                },
                updateSelected: function () {
                    var selectedCommands = [];
                    angular.forEach($scope.model.appFolders, function (folder) {
                        var apps = folder.apps.filter(function (app) { return app.selected; });
                        if (apps) {
                            selectedCommands = selectedCommands.concat(apps);
                        }
                    });
                    $scope.commandSelector.selectedCommands = _.sortBy(selectedCommands, "name");
                },
                select: function (command, flag) {
                    var id = command.name;
                    $scope.commandSelector.updateSelected();
                },
                getSelectedClass: function (app) {
                    if (app.abstract) {
                        return "abstract";
                    }
                    if (app.selected) {
                        return "selected";
                    }
                    return "";
                },
                showCommand: function (command) {
                    return commandMatches(command);
                },
                showFolder: function (folder) {
                    var filterText = $scope.tableConfig.filterOptions.filterText;
                    return !filterText || folder.commands.some(function (app) { return commandMatches(app); });
                }
            };
            function openAllCommands() {
                $scope.commandSelector.expandedFolders = {};
                angular.forEach($scope.commands, function (command) {
                    var id = command.id || command.name;
                    if (id) {
                        $scope.commandSelector.expandedFolders[id] = true;
                    }
                });
            }
            function toElementId(name) {
                return name.replace("/", "_");
            }
            var ignorePrefixes = [];
            var ignoreCommands = {};
            function isValidCommand(id) {
                if (!id)
                    return false;
                var answer = true;
                angular.forEach(ignorePrefixes, function (prefix) {
                    if (answer && id.startsWith(prefix)) {
                        answer = false;
                    }
                });
                if (answer && ignoreCommands[id]) {
                    return false;
                }
                return answer;
            }
            var url = UrlHelpers.join(ForgeApiURL, "commands", $scope.namespace, $scope.projectId, $scope.resourcePath);
            url = Forge.createHttpUrl($scope.projectId, url);
            Forge.log.info("Fetching commands from: " + url);
            $http.get(url, Forge.createHttpConfig()).
                success(function (data, status, headers, config) {
                if (angular.isArray(data) && status === 200) {
                    var resourcePath = $scope.resourcePath;
                    var folderMap = {};
                    var folders = [];
                    var commands = _.sortBy(data, "name");
                    angular.forEach(commands, function (command) {
                        var id = command.id || command.name;
                        if (isValidCommand(id)) {
                            command.$link = Forge.commandLink($scope.projectId, id, resourcePath);
                            var name = command.name || command.id;
                            var folderName = command.category;
                            var shortName = name;
                            var names = name.split(":", 2);
                            if (names != null && names.length > 1) {
                                folderName = names[0];
                                shortName = names[1].trim();
                            }
                            if (folderName === "Project/Build") {
                                folderName = "Project";
                            }
                            command.$shortName = shortName;
                            command.$folderName = folderName;
                            var folder = folderMap[folderName];
                            if (!folder) {
                                var lowerName = folderName.toLowerCase();
                                folder = {
                                    name: folderName,
                                    lowerName: lowerName,
                                    id: "folder_" + toElementId(lowerName),
                                    commands: []
                                };
                                folderMap[folderName] = folder;
                                folders.push(folder);
                            }
                            folder.commands.push(command);
                        }
                    });
                    $scope.commands = commands;
                    folders = _.sortBy(folders, "lowerName");
                    angular.forEach(folders, function (folder) {
                        folder.commands = _.sortBy(folder.commands, "$shortName");
                    });
                    $scope.commandSelector.folders = folders;
                    openAllCommands();
                    Forge.setModelCommands($scope.model, $scope.resourcePath, $scope.commands);
                    $scope.fetched = true;
                }
            }).
                error(function (data, status, headers, config) {
                Forge.log.warn("failed to load " + url + ". status: " + status + " data: " + data);
            });
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.DependenciesPicker = Forge.controller("DependenciesPicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var dependencies = properties.dependencies || {};
            $scope.dependencies = dependencies.enum;
            $scope.selectedItems = [];
            $scope.currentItem = null;
            entityChanged();
            $scope.$watch("currentItem", function () {
                var currentItem = $scope.currentItem;
                if (angular.isObject(currentItem)) {
                    var id = currentItem.id;
                    if (id) {
                        if (!_.find($scope.selectedItems, { id: id })) {
                            $scope.selectedItems.push(currentItem);
                            userSelectionChanged();
                        }
                    }
                    $scope.currentItem = null;
                }
            });
            $scope.removeItem = function (item) {
                if (item) {
                    _.remove($scope.selectedItems, item);
                    userSelectionChanged();
                }
            };
            $scope.$watch("entity.dependencies", entityChanged);
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.dependencies, function (pipeline) {
                        if (!answer && value === pipeline.$value) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function entityChanged() {
            }
            var first = true;
            function userSelectionChanged() {
                var answer = [];
                angular.forEach($scope.selectedItems, function (item) {
                    var id = (item || {}).groupAndName;
                    if (id) {
                        answer.push(id);
                    }
                });
                $scope.entity.dependencies = answer;
                Forge.log.info("updated dependencies to: " + $scope.entity.dependencies);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    function updateForgeProject($scope) {
        forgeProject().updateProject($scope);
    }
    Forge.updateForgeProject = updateForgeProject;
    function forgeProject() {
        var answer = Kubernetes.inject("ForgeProject");
        if (!answer) {
            Forge.log.warn("No ForgeProject service!");
            answer = new ForgeProjectService();
        }
        return answer;
    }
    Forge.forgeProject = forgeProject;
    function forgeProjectHasBuilder(name) {
        return Forge.forgeProject().hasBuilder(name);
    }
    Forge.forgeProjectHasBuilder = forgeProjectHasBuilder;
    function forgeProjectHasPerspective(name) {
        return Forge.forgeProject().hasPerspective(name);
    }
    Forge.forgeProjectHasPerspective = forgeProjectHasPerspective;
    var ForgeProjectService = (function () {
        function ForgeProjectService() {
            this.projectId = "";
            this.namespace = "";
            this.overview = null;
            this.$scope = null;
        }
        ForgeProjectService.prototype.hasBuilder = function (name) {
            var array = (this.overview || {}).builders;
            return angular.isArray(array) && array.indexOf(name) >= 0;
        };
        ForgeProjectService.prototype.hasPerspective = function (name) {
            var array = (this.overview || {}).perspectives;
            return angular.isArray(array) && array.indexOf(name) >= 0;
        };
        ForgeProjectService.prototype.updateProject = function ($scope) {
            this.$scope = $scope;
            $scope.$forgeProject = this;
            var projectId = $scope.projectId;
            var namespace = $scope.namespace;
            if (this.projectId !== projectId || this.namespace !== namespace) {
                this.projectId = projectId;
                this.namespace = namespace;
                this.clearCache();
            }
        };
        ForgeProjectService.prototype.clearCache = function () {
            var _this = this;
            this.overview = null;
            var commandId = "devops-get-overview";
            var projectId = this.projectId;
            var request = {
                namespace: this.namespace,
                projectName: projectId,
                resource: "",
                inputList: [
                    {
                        format: "JSON"
                    }
                ]
            };
            var onData = function (jsonData) {
                _this.overview = jsonData;
                Core.$apply(_this.$scope);
            };
            var $http = Kubernetes.inject("$http");
            var ForgeApiURL = Kubernetes.inject("ForgeApiURL");
            Forge.executeCommand(this.$scope, $http, ForgeApiURL, commandId, projectId, request, onData);
        };
        return ForgeProjectService;
    }());
    Forge.ForgeProjectService = ForgeProjectService;
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.FractionsPicker = Forge.controller("FractionsPicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var fractions = properties.fractions || {};
            $scope.fractions = [];
            angular.forEach(fractions.enum, function (fraction) {
                $scope.fractions.push({
                    id: fraction,
                    label: fraction
                });
            });
            $scope.selectedItems = [];
            $scope.currentItem = null;
            entityChanged();
            $scope.$watch("currentItem", function () {
                var currentItem = $scope.currentItem;
                if (angular.isObject(currentItem)) {
                    var id = currentItem.id;
                    if (id) {
                        if (!_.find($scope.selectedItems, { id: id })) {
                            $scope.selectedItems.push(currentItem);
                            userSelectionChanged();
                        }
                        $scope.currentItem = null;
                    }
                }
            });
            $scope.removeItem = function (item) {
                if (item) {
                    _.remove($scope.selectedItems, item);
                    userSelectionChanged();
                }
            };
            $scope.$watch("entity.fractions", entityChanged);
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.fractions, function (pipeline) {
                        if (!answer && value === pipeline.$value) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function entityChanged() {
            }
            var first = true;
            function userSelectionChanged() {
                var answer = [];
                angular.forEach($scope.selectedItems, function (item) {
                    var id = (item || {}).id;
                    if (id) {
                        answer.push(id);
                    }
                });
                $scope.entity.fractions = answer;
                Forge.log.info("updated fractions to: " + $scope.entity.fractions);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.FunktionOverviewController = Forge.controller("FunktionOverviewController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel", "KubernetesModel",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel, KubernetesModel) {
            $scope.id = "funktion-get-overview";
            Forge.initScope($scope, $location, $routeParams);
            var resourcePath = "";
            var projectId = $scope.projectId;
            $scope.addComponentLink = Forge.projectPerspectiveLink($scope.namespace, projectId, "camelAddComponent");
            $scope.$on('$routeUpdate', function ($event) {
                updateData();
            });
            $scope.updateData = updateData;
            updateData();
            function updateData() {
                var commandId = $scope.id;
                var request = {
                    namespace: $scope.namespace,
                    projectName: projectId,
                    resource: "",
                    inputList: [
                        {
                            format: "JSON"
                        }
                    ]
                };
                var onData = function (jsonData) {
                    var routes = [];
                    var routeBuilderCount = 0;
                    $scope.funktionProject = jsonData || {};
                    $scope.funktionRules = Core.pathGet($scope.funktionProject, ["config", "rules"]) || [];
                    angular.forEach($scope.funktionRules, function (rule) {
                    });
                    Forge.log.info("loaded the funktion project");
                    Core.$apply($scope);
                };
                Forge.executeCommand($scope, $http, ForgeApiURL, commandId, projectId, request, onData);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.PipelinePicker = Forge.controller("PipelinePicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var pipeline = properties.pipeline || {};
            $scope.pipelines = pipeline.typeaheadData;
            angular.forEach($scope.pipelines, function (pipeline) {
                pipeline.$description = marked(pipeline.descriptionMarkdown || "");
            });
            $scope.tableConfig = {
                data: 'pipelines',
                primaryKeyFn: function (item) { return item.value; },
                showSelectionCheckbox: false,
                enableRowClickSelection: true,
                multiSelect: false,
                selectedItems: [],
                filterOptions: {
                    filterText: ''
                },
                columnDefs: [
                    {
                        field: 'label',
                        displayName: 'Pipeline',
                        defaultSort: true
                    },
                    {
                        field: 'environments',
                        displayName: 'Environments',
                        cellTemplate: $templateCache.get("devOpsPipelineChooserEnvironments.html")
                    },
                    {
                        field: 'stages',
                        displayName: 'Stages',
                        cellTemplate: $templateCache.get("devOpsPipelineChooserStages.html")
                    }
                ]
            };
            var selectionValueProperty = "value";
            $scope.tileConfig = {
                selectionMatchProp: selectionValueProperty,
                selectedItems: [],
                showSelectBox: false,
                selectItems: true,
                multiSelect: false
            };
            entityChanged();
            $scope.$watch("entity.pipeline", entityChanged);
            $scope.$watchCollection("tileConfig.selectedItems", updateSelection);
            function entityChanged() {
                var pipeline = $scope.entity.pipeline || {};
                var pipelineValue = angular.isString(pipeline) ? pipeline : pipeline.value;
                var initialSelection = getSelection(pipelineValue);
                if (initialSelection) {
                    $scope.tileConfig.selectedItems = [initialSelection];
                    updateSelection();
                    Core.$apply($scope);
                }
            }
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.pipelines, function (pipeline) {
                        if (!answer && (value === pipeline.value || value === pipeline.label)) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function updateSelection() {
                var selection = $scope.tileConfig.selectedItems;
                var selectedValue = "";
                var description = "";
                var selected = null;
                if (selection && selection.length) {
                    selected = selection[0];
                    selectedValue = selected.value;
                    description = selected.descriptionMarkdown;
                }
                $scope.selected = selected;
                $scope.html = description ? marked(description) : "";
                $scope.entity.pipeline = selectedValue;
                Forge.log.info("entity pipeline is now: " + $scope.entity.pipeline);
                Core.$apply($scope);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.ProjectTypePicker = Forge.controller("ProjectTypePicker", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL", "ForgeModel",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL, ForgeModel) {
            var config = $scope.config || {};
            var properties = config.properties || {};
            var selectionValueProperty = "value";
            var propertyName = "type";
            var propertyInfo = properties[propertyName] || {};
            var projectTypes = [];
            angular.forEach(propertyInfo.enum, function (typeName) {
                if (typeName === "Parent" || typeName === "Forge Addon (JAR)" || typeName === "Java Resources (JAR)") {
                }
                else {
                    var label = typeName;
                    if (_.startsWith(label, "WildFly Swarm")) {
                        label = "WildFly Swarm";
                    }
                    else if (_.startsWith(label, "From Archetype Catalog")) {
                        label = "Quickstart";
                    }
                    var projectType = {
                        label: label,
                        value: typeName,
                        $icon: "",
                        $maven: true
                    };
                    Forge.projectTypeIcon(typeName, projectType);
                    projectTypes.push(projectType);
                }
            });
            $scope.projectTypes = _.sortBy(projectTypes, "label");
            $scope.tileConfig = {
                selectionMatchProp: selectionValueProperty,
                selectedItems: [],
                showSelectBox: false,
                selectItems: true,
                multiSelect: false
            };
            entityChanged();
            $scope.$watch("entity." + propertyName, entityChanged);
            $scope.$watchCollection("tileConfig.selectedItems", userSelectionChanged);
            function getSelection(value) {
                var answer = null;
                if (value) {
                    angular.forEach($scope.projectTypes, function (pipeline) {
                        if (!answer && value === pipeline[selectionValueProperty]) {
                            answer = pipeline;
                        }
                    });
                }
                return answer;
            }
            function entityChanged() {
                var component = $scope.entity[propertyName];
                var initialSelection = component;
                if (angular.isString(component)) {
                    initialSelection = getSelection(component);
                }
                if (initialSelection) {
                    $scope.tileConfig.selectedItems = [initialSelection];
                    userSelectionChanged();
                }
            }
            var first = true;
            function userSelectionChanged() {
                var selection = $scope.tileConfig.selectedItems;
                var selectedValue = "";
                var selected = null;
                if (selection && selection.length) {
                    selected = selection[0];
                    selectedValue = selected[selectionValueProperty];
                }
                if (selectedValue || !first) {
                    $scope.entity[propertyName] = selectedValue;
                    first = false;
                }
                $scope.selected = selected;
                Core.$apply($scope);
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.RepoController = Forge.controller("RepoController", ["$scope", "$templateCache", "$location", "$routeParams", "$http", "$timeout", "ForgeApiURL",
        function ($scope, $templateCache, $location, $routeParams, $http, $timeout, ForgeApiURL) {
            $scope.name = $routeParams["path"];
            Forge.initScope($scope, $location, $routeParams);
            Forge.redirectToSetupSecretsIfNotDefined($scope, $location);
            $scope.$on('$routeUpdate', function ($event) {
                updateData();
            });
            updateData();
            function updateData() {
                if ($scope.name) {
                    var url = Forge.repoApiUrl(ForgeApiURL, $scope.name);
                    url = Forge.createHttpUrl($scope.projectId, url);
                    var config = Forge.createHttpConfig();
                    $http.get(url, config).
                        success(function (data, status, headers, config) {
                        if (data) {
                            Forge.enrichRepo(data);
                        }
                        $scope.entity = data;
                        $scope.fetched = true;
                    }).
                        error(function (data, status, headers, config) {
                        Forge.log.warn("failed to load " + url + ". status: " + status + " data: " + data);
                    });
                }
                else {
                    $scope.fetched = true;
                }
            }
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.ReposController = Forge.controller("ReposController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "KubernetesModel", "ServiceRegistry", "documentBase",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, KubernetesModel, ServiceRegistry, documentBase) {
            $scope.model = KubernetesModel;
            $scope.resourcePath = $routeParams["path"];
            $scope.commandsLink = function (path) { return Forge.commandsLink(path, $scope.projectId); };
            Forge.initScope($scope, $location, $routeParams);
            $scope.breadcrumbConfig.push({
                label: "Create Project"
            });
            $scope.subTabConfig = [];
            $scope.$on('kubernetesModelUpdated', function () {
                updateLinks();
                Core.$apply($scope);
            });
            var projectId = null;
            var ns = $scope.namespace;
            $scope.sourceSecret = Forge.getProjectSourceSecret(localStorage, ns, projectId);
            $scope.tableConfig = {
                data: 'projects',
                showSelectionCheckbox: true,
                enableRowClickSelection: false,
                multiSelect: true,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["q"] || ''
                },
                columnDefs: [
                    {
                        field: 'name',
                        displayName: 'Repository Name',
                        cellTemplate: $templateCache.get("repoTemplate.html")
                    },
                    {
                        field: 'actions',
                        displayName: 'Actions',
                        cellTemplate: $templateCache.get("repoActionsTemplate.html")
                    }
                ]
            };
            $scope.login = {
                authHeader: localStorage["gogsAuthorization"] || "",
                relogin: false,
                avatar_url: localStorage["gogsAvatarUrl"] || "",
                user: localStorage["gogsUser"] || "",
                password: "",
                email: localStorage["gogsEmail"] || ""
            };
            $scope.doLogin = function () {
                var login = $scope.login;
                var user = login.user;
                var password = login.password;
                if (user && password) {
                    var userPwd = user + ':' + password;
                    login.authHeader = 'Basic ' + btoa(userPwd);
                    updateData();
                }
            };
            $scope.logout = function () {
                delete localStorage["gogsAuthorization"];
                $scope.login.authHeader = null;
                $scope.login.loggedIn = false;
                $scope.login.failed = false;
                Forge.loggedInToGogs = false;
            };
            $scope.openCommands = function () {
                var resourcePath = null;
                var selected = $scope.tableConfig.selectedItems;
                if (_.isArray(selected) && selected.length) {
                    resourcePath = selected[0].path;
                }
                var link = Forge.commandsLink(resourcePath, $scope.projectId);
                Forge.log.info("moving to commands link: " + link);
                Kubernetes.goToPath($location, link);
            };
            $scope.delete = function (projects) {
                UI.multiItemConfirmActionDialog({
                    collection: projects,
                    index: 'path',
                    onClose: function (result) {
                        if (result) {
                            doDelete(projects);
                        }
                    },
                    title: 'Delete projects?',
                    action: 'The following projects will be removed (though the files will remain on your file system):',
                    okText: 'Delete',
                    okClass: 'btn-danger',
                    custom: "This operation is permanent once completed!",
                    customClass: "alert alert-warning"
                }).open();
            };
            updateLinks();
            watchSecrets();
            function onPersonalSecrets(secrets) {
                if ($scope.sourceSecret) {
                    var found = false;
                    angular.forEach(secrets, function (secret) {
                        var name = Kubernetes.getName(secret);
                        if (name === $scope.sourceSecret) {
                            var requiredDataKeys = Kubernetes.httpsSecretDataKeys;
                            var valid = Forge.secretValid(secret, requiredDataKeys);
                            if (valid) {
                                found = true;
                            }
                            else {
                                Forge.log.warn("secret " + name + " is not valid, it does not contain keys: " + requiredDataKeys + " so clearing!");
                            }
                        }
                    });
                    if (!found) {
                        $scope.sourceSecret = "";
                    }
                }
                Core.$apply($scope);
            }
            function watchSecrets() {
                var namespaceName = Forge.getSourceSecretNamespace(localStorage);
                Kubernetes.watch($scope, $element, "secrets", namespaceName, onPersonalSecrets);
            }
            function doDelete(projects) {
                angular.forEach(projects, function (project) {
                    Forge.log.info("Deleting " + angular.toJson($scope.projects));
                    var path = project.path;
                    if (path) {
                        var url = Forge.repoApiUrl(ForgeApiURL, path);
                        $http.delete(url).
                            success(function (data, status, headers, config) {
                            updateData();
                        }).
                            error(function (data, status, headers, config) {
                            Forge.log.warn("failed to load " + url + ". status: " + status + " data: " + data);
                            var message = "Failed to POST to " + url + " got status: " + status;
                            Core.notification('error', message);
                        });
                    }
                });
            }
            function updateLinks() {
                var $gogsLink = ServiceRegistry.serviceReadyLink(Forge.gogsServiceName);
                if ($gogsLink) {
                    $scope.signUpUrl = UrlHelpers.join($gogsLink, "user/sign_up");
                    $scope.forgotPasswordUrl = UrlHelpers.join($gogsLink, "user/forget_password");
                }
                $scope.$gogsLink = $gogsLink;
                $scope.$forgeLink = ServiceRegistry.serviceReadyLink(Kubernetes.fabric8ForgeServiceName);
                $scope.$hasCDPipelineTemplate = _.any($scope.model.templates, function (t) { return "cd-pipeline" === Kubernetes.getName(t); });
                var expectedRCS = [Kubernetes.gogsServiceName, Kubernetes.fabric8ForgeServiceName, Kubernetes.jenkinsServiceName];
                var requiredRCs = {};
                var ns = Kubernetes.currentKubernetesNamespace();
                var runningCDPipeline = true;
                angular.forEach(expectedRCS, function (rcName) {
                    var rc = $scope.model.getReplicationController(ns, rcName);
                    if (!rc) {
                        rc = $scope.model.getDeployment(ns, rcName);
                    }
                    if (rc) {
                        requiredRCs[rcName] = rc;
                    }
                    else {
                        runningCDPipeline = false;
                    }
                });
                $scope.$requiredRCs = requiredRCs;
                $scope.$runningCDPipeline = runningCDPipeline;
                var url = window.location.toString();
                var templateNamespace = "default";
                $scope.$runCDPipelineLink = UrlHelpers.join(documentBase, "kubernetes/namespace", templateNamespace, "templates", ns + "?q=cd-pipeline&returnTo=" + URI.encode(url));
            }
            function updateData() {
                var authHeader = $scope.login.authHeader;
                var email = $scope.login.email || "";
                if (authHeader) {
                    var url = Forge.reposApiUrl(ForgeApiURL);
                    url = Forge.createHttpUrl($scope.projectId, url, authHeader, email);
                    var config = {};
                    $http.get(url, config).
                        success(function (data, status, headers, config) {
                        $scope.login.failed = false;
                        $scope.login.loggedIn = true;
                        Forge.loggedInToGogs = true;
                        var avatar_url = null;
                        if (status === 200) {
                            if (!data || !angular.isArray(data)) {
                                data = [];
                            }
                            localStorage["gogsAuthorization"] = authHeader;
                            localStorage["gogsEmail"] = email;
                            localStorage["gogsUser"] = $scope.login.user || "";
                            $scope.projects = _.sortBy(data, "name");
                            angular.forEach($scope.projects, function (repo) {
                                Forge.enrichRepo(repo);
                                if (!avatar_url) {
                                    avatar_url = Core.pathGet(repo, ["owner", "avatar_url"]);
                                    if (avatar_url) {
                                        $scope.login.avatar_url = avatar_url;
                                        localStorage["gogsAvatarUrl"] = avatar_url;
                                    }
                                }
                            });
                            $scope.fetched = true;
                        }
                    }).
                        error(function (data, status, headers, config) {
                        $scope.logout();
                        $scope.login.failed = true;
                        if (status !== 403) {
                            Forge.log.warn("failed to load " + url + ". status: " + status + " data: " + data);
                        }
                    });
                }
            }
            updateData();
        }]);
})(Forge || (Forge = {}));

var Forge;
(function (Forge) {
    Forge.SecretsController = Forge.controller("SecretsController", ["$scope", "$dialog", "$window", "$element", "$templateCache", "$routeParams", "$location", "localStorage", "$http", "$timeout", "ForgeApiURL", "ForgeModel", "KubernetesModel",
        function ($scope, $dialog, $window, $element, $templateCache, $routeParams, $location, localStorage, $http, $timeout, ForgeApiURL, ForgeModel, KubernetesModel) {
            $scope.model = KubernetesModel;
            Forge.initScope($scope, $location, $routeParams);
            $scope.breadcrumbConfig = Developer.createProjectSettingsBreadcrumbs($scope.projectId);
            $scope.subTabConfig = Developer.createProjectSubNavBars($scope.projectId);
            $scope.tabs = Developer.createProjectSettingsSubNavBars($scope.projectId);
            var projectId = $scope.projectId;
            var ns = $scope.namespace;
            var userName = Kubernetes.currentUserName();
            var createdSecret = $location.search()["secret"];
            var projectOrNamespaceKind = Kubernetes.isOpenShift ? "Project" : "Namespace";
            var projectClient = Kubernetes.createKubernetesClient(projectOrNamespaceKind.toLowerCase() + "s");
            $scope.requiredDataKeys = Kubernetes.httpsSecretDataKeys;
            $scope.sourceSecretNamespace = Forge.getSourceSecretNamespace(localStorage);
            $scope.setupSecretsLink = Developer.projectSecretsLink(ns, projectId);
            $scope.secretNamespaceLink = Developer.secretsNamespaceLink(ns, projectId, $scope.sourceSecretNamespace);
            getCurrentSecretName();
            Forge.log.debug("Found source secret namespace " + $scope.sourceSecretNamespace);
            Forge.log.debug("Found source secret for " + ns + "/" + projectId + " = " + $scope.sourceSecret);
            $scope.$on('$routeUpdate', function ($event) {
                updateData();
            });
            $scope.$on('kubernetesModelUpdated', function () {
                updateData();
            });
            $scope.tableConfig = {
                data: 'filteredSecrets',
                showSelectionCheckbox: true,
                enableRowClickSelection: true,
                multiSelect: false,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["q"] || ''
                },
                columnDefs: [
                    {
                        field: '_key',
                        displayName: 'Secret Name',
                        defaultSort: true,
                        cellTemplate: '<div class="ngCellText nowrap">{{row.entity.metadata.name}}</div>'
                    },
                    {
                        field: '$labelsText',
                        displayName: 'Labels',
                        cellTemplate: $templateCache.get("labelTemplate.html")
                    },
                ]
            };
            if (createdSecret) {
                $location.search("secret", null);
                $scope.selectedSecretName = createdSecret;
            }
            else {
                selectedSecretName();
            }
            $scope.$watchCollection("tableConfig.selectedItems", function () {
                selectedSecretName();
            });
            function updateData() {
                checkNamespaceCreated();
                updateProject();
                Core.$apply($scope);
            }
            checkNamespaceCreated();
            function getLocalStoredSecretName() {
                var localStoredSecretName = Forge.getProjectSourceSecret(localStorage, ns, projectId);
                if (localStoredSecretName) {
                    if ($scope.personalSecrets && $scope.personalSecrets.length) {
                        var valid = false;
                        angular.forEach($scope.personalSecrets, function (secret) {
                            if (localStoredSecretName === Kubernetes.getName(secret)) {
                                if (Forge.secretValid(secret, $scope.requiredDataKeys)) {
                                    valid = true;
                                }
                            }
                        });
                        if (!valid) {
                            Forge.log.info("Clearing secret name configuration: " + localStoredSecretName + " as the secret no longer exists!");
                            localStoredSecretName = "";
                            Forge.setProjectSourceSecret(localStorage, ns, projectId, localStoredSecretName);
                        }
                    }
                }
                return localStoredSecretName;
            }
            function getCurrentSecretName() {
                var answer = null;
                if (createdSecret) {
                    answer = createdSecret;
                }
                else {
                    answer = getLocalStoredSecretName();
                }
                $scope.sourceSecret = answer;
                return answer;
            }
            function selectedSecretName() {
                $scope.selectedSecretName = getCurrentSecretName();
                var selectedItems = $scope.tableConfig.selectedItems;
                if (selectedItems && selectedItems.length) {
                    var secret = selectedItems[0];
                    var name = Kubernetes.getName(secret);
                    if (name) {
                        $scope.selectedSecretName = name;
                        if (createdSecret && name !== createdSecret) {
                            createdSecret = null;
                        }
                    }
                }
                return $scope.selectedSecretName;
            }
            $scope.cancel = function () {
                var selectedItems = $scope.tableConfig.selectedItems;
                selectedItems.splice(0, selectedItems.length);
                var current = getCurrentSecretName();
                if (current) {
                    angular.forEach($scope.personalSecrets, function (secret) {
                        if (!selectedItems.length && current === Kubernetes.getName(secret)) {
                            selectedItems.push(secret);
                        }
                    });
                }
                $scope.tableConfig.selectedItems = selectedItems;
                selectedSecretName();
            };
            $scope.hasSavedSecret = function () {
                return getLocalStoredSecretName();
            };
            $scope.canSave = function () {
                var selected = selectedSecretName();
                var current = getCurrentSecretName();
                return selected && (selected !== current || selected == createdSecret);
            };
            $scope.save = function () {
                var selected = selectedSecretName();
                if (selected) {
                    Forge.setProjectSourceSecret(localStorage, ns, projectId, selected);
                    if (!projectId) {
                        Kubernetes.goToPath($location, Developer.createProjectLink(ns));
                    }
                }
            };
            checkNamespaceCreated();
            function updateProject() {
                angular.forEach($scope.model.buildconfigs, function (project) {
                    if (projectId === Kubernetes.getName(project)) {
                        $scope.project = project;
                    }
                });
                $scope.gitUrl = Core.pathGet($scope.project, ['spec', 'source', 'git', 'uri']);
                var parser = Forge.parseUrl($scope.gitUrl);
                var kind = parser.protocol;
                if (!$scope.gitUrl) {
                    kind = "https";
                }
                else if ($scope.gitUrl && $scope.gitUrl.startsWith("git@")) {
                    kind = "ssh";
                }
                var host = parser.host;
                var requiredDataKeys = Kubernetes.sshSecretDataKeys;
                if (kind && _.startsWith(kind, 'http')) {
                    kind = 'https';
                    requiredDataKeys = Kubernetes.httpsSecretDataKeys;
                }
                else {
                    kind = 'ssh';
                }
                $scope.kind = kind;
                $scope.requiredDataKeys = requiredDataKeys;
                var savedUrl = $location.path();
                var newSecretPath = UrlHelpers.join("namespace", $scope.sourceSecretNamespace, "secretCreate?kind=" + kind + "&savedUrl=" + savedUrl);
                $scope.addNewSecretLink = (projectId) ?
                    Developer.projectWorkspaceLink(ns, projectId, newSecretPath) :
                    UrlHelpers.join(HawtioCore.documentBase(), Kubernetes.context, newSecretPath);
                var filteredSecrets = [];
                var selection = [];
                var currentSecretName = getCurrentSecretName() || selectedSecretName();
                angular.forEach($scope.personalSecrets, function (secret) {
                    var valid = Forge.secretValid(secret, requiredDataKeys);
                    if (valid) {
                        var secretName = Kubernetes.getName(secret);
                        secret["_key"] = secretName;
                        filteredSecrets.push(secret);
                        if (secretName === currentSecretName) {
                            selection.push(secret);
                        }
                    }
                });
                $scope.filteredSecrets = _.sortBy(filteredSecrets, "_key");
                $scope.tableConfig.selectedItems = selection;
            }
            function onPersonalSecrets(secrets) {
                $scope.personalSecrets = secrets;
                $scope.fetched = true;
                $scope.cancel();
                updateProject();
                Core.$apply($scope);
            }
            function onBuildConfigs(buildconfigs) {
                if (onBuildConfigs && !($scope.model.buildconfigs || []).length) {
                    $scope.model.buildconfigs = buildconfigs;
                }
                updateProject();
            }
            function checkNamespaceCreated() {
                var namespaceName = Forge.getSourceSecretNamespace(localStorage);
                function watchSecrets() {
                    Forge.log.info("watching secrets on namespace: " + namespaceName);
                    Kubernetes.watch($scope, $element, "secrets", namespaceName, onPersonalSecrets);
                    Kubernetes.watch($scope, $element, "buildconfigs", ns, onBuildConfigs);
                    Core.$apply($scope);
                }
                var projectsOrNamespaces = Kubernetes.isOpenShift ? $scope.model.projects : $scope.model.namespaces;
                if (!$scope.secretNamespace) {
                    angular.forEach(projectsOrNamespaces, function (project) {
                        var name = Kubernetes.getName(project);
                        if (name === namespaceName) {
                            $scope.secretNamespace = project;
                            watchSecrets();
                        }
                    });
                }
                if (!$scope.secretNamespace && projectsOrNamespaces && projectsOrNamespaces.length) {
                    Forge.log.info("Creating a new namespace for the user secrets.... " + namespaceName);
                    var project = {
                        apiVersion: Kubernetes.defaultApiVersion,
                        kind: projectOrNamespaceKind,
                        metadata: {
                            name: namespaceName,
                            labels: {
                                user: userName,
                                group: 'secrets',
                                project: 'source'
                            }
                        }
                    };
                    projectClient.put(project, function (data) {
                        $scope.secretNamespace = project;
                        watchSecrets();
                    }, function (err) {
                        Forge.log.warn("Failed to create secret namespace: " + namespaceName + ": " + angular.toJson(err));
                    });
                }
            }
        }]);
})(Forge || (Forge = {}));

var Github;
(function (Github) {
    Github.context = '/github';
    Github.hash = '#' + Github.context;
    Github.pluginName = 'Github';
    Github.pluginPath = 'plugins/github/';
    Github.templatePath = Github.pluginPath + 'html/';
    Github.log = Logger.get(Github.pluginName);
    function initScope($scope, $location, $routeParams) {
    }
    Github.initScope = initScope;
})(Github || (Github = {}));

var Github;
(function (Github) {
    Github._module = angular.module(Github.pluginName, []);
    Github.controller = PluginHelpers.createControllerFunction(Github._module, Github.pluginName);
    Github.route = PluginHelpers.createRoutingFunction(Github.templatePath);
    Github._module.config(['$routeProvider', function ($routeProvider) {
            $routeProvider.when(UrlHelpers.join(Github.context, '/organisations'), Github.route('organisations.html', false));
        }]);
    Github._module.run(['viewRegistry', 'HawtioNav', function (viewRegistry, HawtioNav) {
            viewRegistry['github'] = Github.templatePath + 'layoutGithub.html';
        }]);
    hawtioPluginLoader.addModule(Github.pluginName);
})(Github || (Github = {}));

var Github;
(function (Github) {
    Github.OrganisationsController = Github.controller("OrganisationsController", ["$scope", "$dialog", "$window", "$templateCache", "$routeParams", "$location", "localStorage", "$timeout", 'GithubOAuth', 'HawtioPreferences',
        function ($scope, $dialog, $window, $templateCache, $routeParams, $location, localStorage, $timeout, GithubOAuth, HawtioPreferences) {
            var oauth = $scope.oauth = GithubOAuth;
            $scope.prefs = HawtioPreferences;
            $scope.data = [];
            if (!oauth.hasToken()) {
                return;
            }
            $scope.fetched = false;
            $scope.tableConfig = {
                data: 'data',
                showSelectionCheckbox: false,
                enableRowClickSelection: true,
                selectedItems: [],
                filterOptions: {
                    filterText: $location.search()["q"] || ''
                },
                columnDefs: [
                    {
                        field: 'login',
                        cellTemplate: "\n            <div>\n              <img style=\"width: 32px; height: 32px;\" ng-src=\"{{row.entity.avatar_url}}\">&nbsp;<span ng-bind=\"row.entity.login\"></span>\n            </div>\n          ",
                        displayName: 'Name'
                    }]
            };
            Github.initScope($scope, $location, $routeParams);
            function updateData() {
                $.ajax('https://api.github.com/user/orgs', {
                    method: 'GET',
                    headers: {
                        'Authorization': oauth.getHeader(),
                    },
                    success: function (data) {
                        $scope.data = data;
                    },
                    error: function (data) {
                        $scope.data = data;
                    },
                    complete: function () {
                        $scope.fetched = true;
                        Core.$apply($scope);
                    },
                    beforeSend: function () { }
                });
            }
            updateData();
        }]);
})(Github || (Github = {}));

var Main;
(function (Main) {
    Main.pluginName = "fabric8-console";
    Main.log = Logger.get(Main.pluginName);
    Main.templatePath = "plugins/main/html";
    Main.chatServiceName = "letschat";
    Main.grafanaServiceName = "grafana";
    Main.appLibraryServiceName = "app-library";
    Main.version = {};
})(Main || (Main = {}));

var Main;
(function (Main) {
    Main._module = angular.module(Main.pluginName, [Forge.pluginName]);
    Main.route = PluginHelpers.createRoutingFunction(Main.templatePath);
    Main._module.config(['$routeProvider', function ($routeProvider) {
            $routeProvider.when('/help', Main.route('help.html'));
        }]);
    var tab = undefined;
    Main._module.run(["$rootScope", "HawtioNav", "KubernetesModel", "ServiceRegistry", "preferencesRegistry", "HawtioBranding", function ($rootScope, HawtioNav, KubernetesModel, ServiceRegistry, preferencesRegistry, HawtioBranding) {
        HawtioNav.on(HawtioMainNav.Actions.CHANGED, Main.pluginName, function (items) {
            items.forEach(function (item) {
                switch (item.id) {
                    case 'forge':
                    case 'jvm':
                    case 'wiki':
                    case 'docker-registry':
                        item.isValid = function () { return false; };
                }
            });
        });
        HawtioNav.add({
            id: 'library',
            title: function () { return 'Library'; },
            tooltip: function () { return 'View the library of applications'; },
            isValid: function () { return ServiceRegistry.hasService(Main.appLibraryServiceName) && ServiceRegistry.hasService("app-library-jolokia"); },
            href: function () { return "/wiki/view"; },
            isActive: function () { return false; }
        });
        var kibanaServiceName = Kubernetes.kibanaServiceName;
        HawtioNav.add({
            id: 'kibana',
            title: function () { return 'Logs'; },
            tooltip: function () { return 'View and search all logs across all containers using Kibana and ElasticSearch'; },
            isValid: function () { return ServiceRegistry.hasService(kibanaServiceName); },
            href: function () { return Kubernetes.kibanaLogsLink(ServiceRegistry); },
            isActive: function () { return false; }
        });
        HawtioNav.add({
            id: 'apiman',
            title: function () { return 'API Management'; },
            tooltip: function () { return 'Add Policies and Plans to your APIs with Apiman'; },
            isValid: function () { return ServiceRegistry.hasService('apiman'); },
            oldHref: function () { },
            href: function () {
                var hash = {
                    backTo: new URI().toString(),
                    token: HawtioOAuth.getOAuthToken()
                };
                var uri = new URI(ServiceRegistry.serviceLink('apiman'));
                uri.port('80').query({}).path('apimanui/index.html').hash(URI.encode(angular.toJson(hash)));
                return uri.toString();
            }
        });
        HawtioNav.add({
            id: 'grafana',
            title: function () { return 'Metrics'; },
            tooltip: function () { return 'Views metrics across all containers using Grafana and InfluxDB'; },
            isValid: function () { return ServiceRegistry.hasService(Main.grafanaServiceName); },
            href: function () { return ServiceRegistry.serviceLink(Main.grafanaServiceName); },
            isActive: function () { return false; }
        });
        HawtioNav.add({
            id: "chat",
            title: function () { return 'Chat'; },
            tooltip: function () { return 'Chat room for discussing this namespace'; },
            isValid: function () { return ServiceRegistry.hasService(Main.chatServiceName); },
            href: function () {
                var answer = ServiceRegistry.serviceLink(Main.chatServiceName);
                if (answer) {
                }
                return answer;
            },
            isActive: function () { return false; }
        });
        preferencesRegistry.addTab('About ' + HawtioBranding.appName, UrlHelpers.join(Main.templatePath, 'about.html'));
        Main.log.info("started, version: ", Main.version.version);
        Main.log.info("commit ID: ", Main.version.commitId);
    }]);
    hawtioPluginLoader.registerPreBootstrapTask(function (next) {
        JVM.skipJolokia = true;
        next();
    }, true);
    hawtioPluginLoader.registerPreBootstrapTask(function (next) {
        $.ajax({
            url: 'version.json?rev=' + Date.now(),
            success: function (data) {
                try {
                    Main.version = angular.fromJson(data);
                }
                catch (err) {
                    Main.version = {
                        name: 'fabric8-console',
                        version: ''
                    };
                }
                next();
            },
            error: function (jqXHR, text, status) {
                Main.log.debug("Failed to fetch version: jqXHR: ", jqXHR, " text: ", text, " status: ", status);
                next();
            },
            dataType: "html"
        });
    });
    hawtioPluginLoader.addModule(Main.pluginName);
    hawtioPluginLoader.addModule('patternfly');
    hawtioPluginLoader.addModule('patternfly.charts');
})(Main || (Main = {}));

var Main;
(function (Main) {
    Main._module.controller('Main.About', ["$scope", "HawtioBranding", function ($scope, HawtioBranding) {
        $scope.info = Main.version;
        $scope.branding = HawtioBranding;
    }]);
})(Main || (Main = {}));

var Main;
(function (Main) {
    Main.bodyController = Main._module.controller("Main.BodyController", ["HawtioBranding", "$scope", function (HawtioBranding, $scope) {
        $scope.branding = HawtioBranding;
        $scope.$on('$locationChangeSuccess', function ($event, newUrl, oldUrl) {
            if (newUrl !== oldUrl) {
                $scope.previousUrl = oldUrl;
            }
            else {
                $scope.previousUrl = undefined;
            }
        });
    }]);
    Main.headController = Main._module.controller("Main.HeadController", ["HawtioBranding", "$scope", "$element", "$document", function (HawtioBranding, $scope, $element, $document) {
        var branding = $scope.branding = HawtioBranding;
        $document.attr("title", branding.appName);
        $element.append('<link rel="shortcut icon" type="image/x-icon" href="' + branding.favIcon + '"/>');
        $element.append('<link rel="stylesheet" href="' + branding.css + '"/>');
    }]);
})(Main || (Main = {}));

var Main;
(function (Main) {
    var defaultBranding = 'fabric8-branding';
    hawtioPluginLoader.registerPreBootstrapTask({
        name: 'ConsoleBranding',
        depends: 'KubernetesApiInit',
        task: function (next) {
            var config = window['OPENSHIFT_CONFIG'];
            var branding = defaultBranding;
            if (config) {
                branding = _.get(config, 'branding.kind');
                if (Core.isBlank(branding)) {
                    branding = defaultBranding;
                }
            }
            Main.log.info("Using branding: ", branding);
            hawtioPluginLoader.addModule(branding);
            next();
        }
    });
    var branding = angular.module('hawtio-branding', []);
    branding.run(["HawtioBranding", "$document", function (HawtioBranding, $document) {
        Logger.get('hawtio-branding').debug("Loaded");
        if (angular.isFunction(HawtioBranding.load)) {
            HawtioBranding.load(HawtioBranding);
        }
    }]);
    var fabric8Branding = angular.module(defaultBranding, ['hawtio-branding']);
    fabric8Branding.constant('HawtioBranding', {
        kind: 'fabric8-branding',
        appName: 'fabric8-console',
        appLogo: 'resources/branding/fabric8/img/fabric8_logo_white.svg',
        favIcon: 'resources/branding/fabric8/img/favicon.ico',
        css: 'resources/branding/fabric8/style.css',
        load: function (self) {
            Logger.get('fabric8-branding').debug("Applied");
        }
    });
    var redhatBranding = angular.module('redhat-branding', ['hawtio-branding']);
    redhatBranding.constant('HawtioBranding', {
        kind: 'redhat-branding',
        appName: 'Red Hat iPaas Console',
        appLogo: 'resources/branding/redhat/img/test.svg',
        favIcon: 'resources/branding/redhat/img/favicon.ico',
        css: 'resources/branding/redhat/style.css',
        load: function (self) {
            Logger.get('redhat-branding').debug("Applied");
        }
    });
})(Main || (Main = {}));

var Main;
(function (Main) {
    Main.HelpController = Main._module.controller('Main.HelpController', ['$scope', '$route', '$location', function ($scope, $route, $location) {
            $scope.breadcrumbConfig = [{
                    label: 'Help'
                }];
            $scope.subTabConfig = [];
        }]);
})(Main || (Main = {}));

var Main;
(function (Main) {
    Main._module.controller('Main.NavController', ['$scope', '$location', 'documentBase', function ($scope, $location, documentBase) {
            var ACTIVE = 'active';
            $scope.projectsLink = function () {
                return UrlHelpers.join(documentBase, 'workspaces');
            };
            $scope.runtimeLink = function () {
                return UrlHelpers.join(documentBase, 'namespaces');
            };
            $scope.projectsActive = function () {
                var path = $location.path();
                if (_.startsWith(path, '/workspaces')) {
                    return true;
                }
                return false;
            };
            $scope.runtimeActive = function () {
                var path = $location.path();
                if (_.startsWith(path, '/namespaces')) {
                    return true;
                }
                if (_.startsWith(path, '/kubernetes')) {
                    return true;
                }
                return false;
            };
        }]);
})(Main || (Main = {}));

var Wiki;
(function (Wiki) {
    Wiki.CamelController = Wiki._module.controller("Wiki.CamelController", ["$scope", "$rootScope", "$location", "$routeParams", "$compile", "$templateCache", "localStorage", function ($scope, $rootScope, $location, $routeParams, $compile, $templateCache, localStorage) {
            var jolokia = null;
            var jolokiaStatus = null;
            var jmxTreeLazyLoadRegistry = null;
            var userDetails = null;
            var HawtioNav = null;
            var workspace = new Workspace(jolokia, jolokiaStatus, jmxTreeLazyLoadRegistry, $location, $compile, $templateCache, localStorage, $rootScope, userDetails, HawtioNav);
            Wiki.initScope($scope, $routeParams, $location);
            Camel.initEndpointChooserScope($scope, $location, localStorage, workspace, jolokia);
            var wikiRepository = $scope.wikiRepository;
            $scope.schema = Camel.getConfiguredCamelModel();
            $scope.modified = false;
            $scope.switchToCanvasView = new UI.Dialog();
            $scope.findProfileCamelContext = true;
            $scope.camelSelectionDetails = {
                selectedCamelContextId: null,
                selectedRouteId: null
            };
            $scope.isValid = function (nav) {
                return nav && nav.isValid(workspace);
            };
            $scope.camelSubLevelTabs = [
                {
                    content: '<i class="fa fa-picture-o"></i> Canvas',
                    title: "Edit the diagram in a draggy droppy way",
                    isValid: function (workspace) { return true; },
                    href: function () { return Wiki.startLink($scope) + "/camel/canvas/" + $scope.pageId; }
                },
                {
                    content: '<i class="fa fa-tree"></i> Tree',
                    title: "View the routes as a tree",
                    isValid: function (workspace) { return true; },
                    href: function () { return Wiki.startLink($scope) + "/camel/properties/" + $scope.pageId; }
                }
            ];
            var routeModel = _apacheCamelModel.definitions.route;
            routeModel["_id"] = "route";
            $scope.addDialog = new UI.Dialog();
            $scope.addDialog.options["dialogClass"] = "modal-large";
            $scope.addDialog.options["cssClass"] = "modal-large";
            $scope.paletteItemSearch = "";
            $scope.paletteTree = new Folder("Palette");
            $scope.paletteActivations = ["Routing_aggregate"];
            angular.forEach(_apacheCamelModel.definitions, function (value, key) {
                if (value.group) {
                    var group = (key === "route") ? $scope.paletteTree : $scope.paletteTree.getOrElse(value.group);
                    if (!group.key) {
                        group.key = value.group;
                    }
                    value["_id"] = key;
                    var title = value["title"] || key;
                    var node = new Folder(title);
                    node.key = group.key + "_" + key;
                    node["nodeModel"] = value;
                    var imageUrl = Camel.getRouteNodeIcon(value);
                    node.icon = imageUrl;
                    var tooltip = value["tooltip"] || value["description"] || '';
                    node.tooltip = tooltip;
                    group.children.push(node);
                }
            });
            $scope.componentTree = new Folder("Endpoints");
            $scope.$watch("componentNames", function () {
                var componentNames = $scope.componentNames;
                if (componentNames && componentNames.length) {
                    $scope.componentTree = new Folder("Endpoints");
                    angular.forEach($scope.componentNames, function (endpointName) {
                        var category = Camel.getEndpointCategory(endpointName);
                        var groupName = category.label || "Core";
                        var groupKey = category.id || groupName;
                        var group = $scope.componentTree.getOrElse(groupName);
                        var value = Camel.getEndpointConfig(endpointName, category);
                        var key = endpointName;
                        var label = value["label"] || endpointName;
                        var node = new Folder(label);
                        node.key = groupKey + "_" + key;
                        node.key = key;
                        node["nodeModel"] = value;
                        var tooltip = value["tooltip"] || value["description"] || label;
                        var imageUrl = Core.url(value["icon"] || Camel.endpointIcon);
                        node.icon = imageUrl;
                        node.tooltip = tooltip;
                        group.children.push(node);
                    });
                }
            });
            $scope.componentActivations = ["bean"];
            $scope.$watch('addDialog.show', function () {
                if ($scope.addDialog.show) {
                    setTimeout(function () {
                        $('#submit').focus();
                    }, 50);
                }
            });
            $scope.$on("hawtio.form.modelChange", onModelChangeEvent);
            $scope.onRootTreeNode = function (rootTreeNode) {
                $scope.rootTreeNode = rootTreeNode;
                rootTreeNode.data = $scope.camelContextTree;
            };
            $scope.addNode = function () {
                if ($scope.nodeXmlNode) {
                    $scope.addDialog.open();
                }
                else {
                    addNewNode(routeModel);
                }
            };
            $scope.onPaletteSelect = function (node) {
                $scope.selectedPaletteNode = (node && node["nodeModel"]) ? node : null;
                if ($scope.selectedPaletteNode) {
                    $scope.selectedComponentNode = null;
                }
                Wiki.log.debug("Selected " + $scope.selectedPaletteNode + " : " + $scope.selectedComponentNode);
            };
            $scope.onComponentSelect = function (node) {
                $scope.selectedComponentNode = (node && node["nodeModel"]) ? node : null;
                if ($scope.selectedComponentNode) {
                    $scope.selectedPaletteNode = null;
                    var nodeName = node.key;
                    Wiki.log.debug("loading endpoint schema for node " + nodeName);
                    $scope.loadEndpointSchema(nodeName);
                    $scope.selectedComponentName = nodeName;
                }
                Wiki.log.debug("Selected " + $scope.selectedPaletteNode + " : " + $scope.selectedComponentNode);
            };
            $scope.selectedNodeModel = function () {
                var nodeModel = null;
                if ($scope.selectedPaletteNode) {
                    nodeModel = $scope.selectedPaletteNode["nodeModel"];
                    $scope.endpointConfig = null;
                }
                else if ($scope.selectedComponentNode) {
                    var endpointConfig = $scope.selectedComponentNode["nodeModel"];
                    var endpointSchema = $scope.endpointSchema;
                    nodeModel = $scope.schema.definitions.endpoint;
                    $scope.endpointConfig = {
                        key: $scope.selectedComponentNode.key,
                        schema: endpointSchema,
                        details: endpointConfig
                    };
                }
                return nodeModel;
            };
            $scope.addAndCloseDialog = function () {
                var nodeModel = $scope.selectedNodeModel();
                if (nodeModel) {
                    addNewNode(nodeModel);
                }
                else {
                    Wiki.log.debug("WARNING: no nodeModel!");
                }
                $scope.addDialog.close();
            };
            $scope.removeNode = function () {
                if ($scope.selectedFolder && $scope.treeNode) {
                    $scope.selectedFolder.detach();
                    $scope.treeNode.remove();
                    $scope.selectedFolder = null;
                    $scope.treeNode = null;
                }
            };
            $scope.canDelete = function () {
                return $scope.selectedFolder ? true : false;
            };
            $scope.isActive = function (nav) {
                if (angular.isString(nav))
                    return workspace.isLinkActive(nav);
                var fn = nav.isActive;
                if (fn) {
                    return fn(workspace);
                }
                return workspace.isLinkActive(nav.href());
            };
            $scope.save = function () {
                if ($scope.modified && $scope.rootTreeNode) {
                    var xmlNode = Camel.generateXmlFromFolder($scope.rootTreeNode);
                    if (xmlNode) {
                        var text = Core.xmlNodeToString(xmlNode);
                        if (text) {
                            var commitMessage = $scope.commitMessage || "Updated page " + $scope.pageId;
                            wikiRepository.putPage($scope.branch, $scope.pageId, text, commitMessage, function (status) {
                                Wiki.onComplete(status);
                                Core.notification("success", "Saved " + $scope.pageId);
                                $scope.modified = false;
                                goToView();
                                Core.$apply($scope);
                            });
                        }
                    }
                }
            };
            $scope.cancel = function () {
                Wiki.log.debug("cancelling...");
            };
            $scope.$watch('workspace.tree', function () {
                if (!$scope.git) {
                    setTimeout(updateView, 50);
                }
            });
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(updateView, 50);
            });
            function getFolderXmlNode(treeNode) {
                var routeXmlNode = Camel.createFolderXmlTree(treeNode, null);
                if (routeXmlNode) {
                    $scope.nodeXmlNode = routeXmlNode;
                }
                return routeXmlNode;
            }
            $scope.onNodeSelect = function (folder, treeNode) {
                $scope.selectedFolder = folder;
                $scope.treeNode = treeNode;
                $scope.propertiesTemplate = null;
                $scope.diagramTemplate = null;
                $scope.nodeXmlNode = null;
                if (folder) {
                    $scope.nodeData = Camel.getRouteFolderJSON(folder);
                    $scope.nodeDataChangedFields = {};
                }
                var nodeName = Camel.getFolderCamelNodeId(folder);
                var routeXmlNode = getFolderXmlNode(treeNode);
                if (nodeName) {
                    $scope.nodeModel = Camel.getCamelSchema(nodeName);
                    if ($scope.nodeModel) {
                        $scope.propertiesTemplate = "plugins/wiki/html/camelPropertiesEdit.html";
                    }
                    $scope.diagramTemplate = "app/camel/html/routes.html";
                    Core.$apply($scope);
                }
            };
            $scope.onNodeDragEnter = function (node, sourceNode) {
                var nodeFolder = node.data;
                var sourceFolder = sourceNode.data;
                if (nodeFolder && sourceFolder) {
                    var nodeId = Camel.getFolderCamelNodeId(nodeFolder);
                    var sourceId = Camel.getFolderCamelNodeId(sourceFolder);
                    if (nodeId && sourceId) {
                        if (sourceId === "route") {
                            return nodeId === "route";
                        }
                        return true;
                    }
                }
                return false;
            };
            $scope.onNodeDrop = function (node, sourceNode, hitMode, ui, draggable) {
                var nodeFolder = node.data;
                var sourceFolder = sourceNode.data;
                if (nodeFolder && sourceFolder) {
                    var nodeId = Camel.getFolderCamelNodeId(nodeFolder);
                    var sourceId = Camel.getFolderCamelNodeId(sourceFolder);
                    if (nodeId === "route") {
                        if (sourceId === "route") {
                            if (hitMode === "over") {
                                hitMode = "after";
                            }
                        }
                        else {
                            hitMode = "over";
                        }
                    }
                    else {
                        if (Camel.acceptOutput(nodeId)) {
                            hitMode = "over";
                        }
                        else {
                            if (hitMode !== "before") {
                                hitMode = "after";
                            }
                        }
                    }
                    Wiki.log.debug("nodeDrop nodeId: " + nodeId + " sourceId: " + sourceId + " hitMode: " + hitMode);
                    sourceNode.move(node, hitMode);
                }
            };
            updateView();
            function addNewNode(nodeModel) {
                var doc = $scope.doc || document;
                var parentFolder = $scope.selectedFolder || $scope.camelContextTree;
                var key = nodeModel["_id"];
                var beforeNode = null;
                if (!key) {
                    Wiki.log.debug("WARNING: no id for model " + JSON.stringify(nodeModel));
                }
                else {
                    var treeNode = $scope.treeNode;
                    if (key === "route") {
                        treeNode = $scope.rootTreeNode;
                    }
                    else {
                        if (!treeNode) {
                            var root = $scope.rootTreeNode;
                            var children = root.getChildren();
                            if (!children || !children.length) {
                                addNewNode(Camel.getCamelSchema("route"));
                                children = root.getChildren();
                            }
                            if (children && children.length) {
                                treeNode = children[children.length - 1];
                            }
                            else {
                                Wiki.log.debug("Could not add a new route to the empty tree!");
                                return;
                            }
                        }
                        var parentId = Camel.getFolderCamelNodeId(treeNode.data);
                        if (!Camel.acceptOutput(parentId)) {
                            beforeNode = treeNode.getNextSibling();
                            treeNode = treeNode.getParent() || treeNode;
                        }
                    }
                    if (treeNode) {
                        var node = doc.createElement(key);
                        parentFolder = treeNode.data;
                        var addedNode = Camel.addRouteChild(parentFolder, node);
                        if (addedNode) {
                            var added = treeNode.addChild(addedNode, beforeNode);
                            if (added) {
                                getFolderXmlNode(added);
                                added.expand(true);
                                added.select(true);
                                added.activate(true);
                            }
                        }
                    }
                }
            }
            function onModelChangeEvent(event, name) {
                if ($scope.nodeData) {
                    var fieldMap = $scope.nodeDataChangedFields;
                    if (fieldMap) {
                        if (fieldMap[name]) {
                            onNodeDataChanged();
                        }
                        else {
                            fieldMap[name] = true;
                        }
                    }
                }
            }
            function onNodeDataChanged() {
                $scope.modified = true;
                var selectedFolder = $scope.selectedFolder;
                if ($scope.treeNode && selectedFolder) {
                    var routeXmlNode = getFolderXmlNode($scope.treeNode);
                    if (routeXmlNode) {
                        var nodeName = routeXmlNode.localName;
                        var nodeSettings = Camel.getCamelSchema(nodeName);
                        if (nodeSettings) {
                            Camel.updateRouteNodeLabelAndTooltip(selectedFolder, routeXmlNode, nodeSettings);
                            $scope.treeNode.render(false, false);
                        }
                    }
                    selectedFolder["camelNodeData"] = $scope.nodeData;
                }
            }
            function onResults(response) {
                var text = response.text;
                if (text) {
                    var tree = Camel.loadCamelTree(text, $scope.pageId);
                    if (tree) {
                        $scope.camelContextTree = tree;
                    }
                }
                else {
                    Wiki.log.debug("No XML found for page " + $scope.pageId);
                }
                Core.$applyLater($scope);
            }
            function updateView() {
                $scope.loadEndpointNames();
                $scope.pageId = Wiki.pageId($routeParams, $location);
                Wiki.log.debug("Has page id: " + $scope.pageId + " with $routeParams " + JSON.stringify($routeParams));
                wikiRepository.getPage($scope.branch, $scope.pageId, $scope.objectId, onResults);
            }
            function goToView() {
            }
            $scope.doSwitchToCanvasView = function () {
                var link = $location.url().replace(/\/properties\//, '/canvas/');
                Wiki.log.debug("Link: ", link);
                $location.url(link);
            };
            $scope.confirmSwitchToCanvasView = function () {
                if ($scope.modified) {
                    $scope.switchToCanvasView.open();
                }
                else {
                    $scope.doSwitchToCanvasView();
                }
            };
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki.CamelCanvasController = Wiki._module.controller("Wiki.CamelCanvasController", ["$scope", "$element", "$routeParams", "$templateCache", "$interpolate", "$location", function ($scope, $element, $routeParams, $templateCache, $interpolate, $location) {
            var jsPlumbInstance = jsPlumb.getInstance();
            $element.on('$destroy', function () {
                jsPlumbInstance.reset();
            });
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.addDialog = new UI.Dialog();
            $scope.propertiesDialog = new UI.Dialog();
            $scope.switchToTreeView = new UI.Dialog();
            $scope.modified = false;
            $scope.camelIgnoreIdForLabel = Camel.ignoreIdForLabel(localStorage);
            $scope.camelMaximumLabelWidth = Camel.maximumLabelWidth(localStorage);
            $scope.camelMaximumTraceOrDebugBodyLength = Camel.maximumTraceOrDebugBodyLength(localStorage);
            $scope.forms = {};
            $scope.nodeTemplate = $interpolate($templateCache.get("nodeTemplate"));
            $scope.$watch("camelContextTree", function () {
                var tree = $scope.camelContextTree;
                $scope.rootFolder = tree;
                $scope.folders = Camel.addFoldersToIndex($scope.rootFolder);
                var doc = Core.pathGet(tree, ["xmlDocument"]);
                if (doc) {
                    $scope.doc = doc;
                    reloadRouteIds();
                    onRouteSelectionChanged();
                }
            });
            $scope.addAndCloseDialog = function () {
                var nodeModel = $scope.selectedNodeModel();
                if (nodeModel) {
                    addNewNode(nodeModel);
                }
                $scope.addDialog.close();
            };
            $scope.removeNode = function () {
                var folder = getSelectedOrRouteFolder();
                if (folder) {
                    var nodeName = Camel.getFolderCamelNodeId(folder);
                    folder.detach();
                    if ("route" === nodeName) {
                        $scope.selectedRouteId = null;
                    }
                    updateSelection(null);
                    treeModified();
                }
            };
            $scope.doLayout = function () {
                $scope.drawnRouteId = null;
                onRouteSelectionChanged();
            };
            function isRouteOrNode() {
                return !$scope.selectedFolder;
            }
            $scope.getDeleteTitle = function () {
                if (isRouteOrNode()) {
                    return "Delete this route";
                }
                return "Delete this node";
            };
            $scope.getDeleteTarget = function () {
                if (isRouteOrNode()) {
                    return "Route";
                }
                return "Node";
            };
            $scope.isFormDirty = function () {
                Wiki.log.debug("endpointForm: ", $scope.endpointForm);
                if ($scope.endpointForm.$dirty) {
                    return true;
                }
                if (!$scope.forms['formEditor']) {
                    return false;
                }
                else {
                    return $scope.forms['formEditor']['$dirty'];
                }
            };
            function createEndpointURI(endpointScheme, slashesText, endpointPath, endpointParameters) {
                Wiki.log.debug("scheme " + endpointScheme + " path " + endpointPath + " parameters " + endpointParameters);
                var uri = ((endpointScheme) ? endpointScheme + ":" + slashesText : "") + (endpointPath ? endpointPath : "");
                var paramText = Core.hashToString(endpointParameters);
                if (paramText) {
                    uri += "?" + paramText;
                }
                return uri;
            }
            $scope.updateProperties = function () {
                Wiki.log.info("old URI is " + $scope.nodeData.uri);
                var uri = createEndpointURI($scope.endpointScheme, ($scope.endpointPathHasSlashes ? "//" : ""), $scope.endpointPath, $scope.endpointParameters);
                Wiki.log.info("new URI is " + uri);
                if (uri) {
                    $scope.nodeData.uri = uri;
                }
                var key = null;
                var selectedFolder = $scope.selectedFolder;
                if (selectedFolder) {
                    key = selectedFolder.key;
                    var elements = $element.find(".canvas").find("[id='" + key + "']").first().remove();
                }
                treeModified();
                if (key) {
                    updateSelection(key);
                }
                if ($scope.isFormDirty()) {
                    $scope.endpointForm.$setPristine();
                    if ($scope.forms['formEditor']) {
                        $scope.forms['formEditor'].$setPristine();
                    }
                }
                Core.$apply($scope);
            };
            $scope.save = function () {
                if ($scope.modified && $scope.rootFolder) {
                    var xmlNode = Camel.generateXmlFromFolder($scope.rootFolder);
                    if (xmlNode) {
                        var text = Core.xmlNodeToString(xmlNode);
                        if (text) {
                            var decoded = decodeURIComponent(text);
                            Wiki.log.debug("Saving xml decoded: " + decoded);
                            var commitMessage = $scope.commitMessage || "Updated page " + $scope.pageId;
                            wikiRepository.putPage($scope.branch, $scope.pageId, decoded, commitMessage, function (status) {
                                Wiki.onComplete(status);
                                Core.notification("success", "Saved " + $scope.pageId);
                                $scope.modified = false;
                                goToView();
                                Core.$apply($scope);
                            });
                        }
                    }
                }
            };
            $scope.cancel = function () {
                Wiki.log.debug("cancelling...");
            };
            $scope.$watch("selectedRouteId", onRouteSelectionChanged);
            function goToView() {
            }
            function addNewNode(nodeModel) {
                var doc = $scope.doc || document;
                var parentFolder = $scope.selectedFolder || $scope.rootFolder;
                var key = nodeModel["_id"];
                if (!key) {
                    Wiki.log.debug("WARNING: no id for model " + JSON.stringify(nodeModel));
                }
                else {
                    var treeNode = $scope.selectedFolder;
                    if (key === "route") {
                        treeNode = $scope.rootFolder;
                    }
                    else {
                        if (!treeNode) {
                            var root = $scope.rootFolder;
                            var children = root.children;
                            if (!children || !children.length) {
                                addNewNode(Camel.getCamelSchema("route"));
                                children = root.children;
                            }
                            if (children && children.length) {
                                treeNode = getRouteFolder($scope.rootFolder, $scope.selectedRouteId) || children[children.length - 1];
                            }
                            else {
                                Wiki.log.debug("Could not add a new route to the empty tree!");
                                return;
                            }
                        }
                        var parentTypeName = Camel.getFolderCamelNodeId(treeNode);
                        if (!Camel.acceptOutput(parentTypeName)) {
                            treeNode = treeNode.parent || treeNode;
                        }
                    }
                    if (treeNode) {
                        var node = doc.createElement(key);
                        parentFolder = treeNode;
                        var addedNode = Camel.addRouteChild(parentFolder, node);
                        var nodeData = {};
                        if (key === "endpoint" && $scope.endpointConfig) {
                            var key = $scope.endpointConfig.key;
                            if (key) {
                                nodeData["uri"] = key + ":";
                            }
                        }
                        addedNode["camelNodeData"] = nodeData;
                        addedNode["endpointConfig"] = $scope.endpointConfig;
                        if (key === "route") {
                            var count = $scope.routeIds.length;
                            var nodeId = null;
                            while (true) {
                                nodeId = "route" + (++count);
                                if (!$scope.routeIds.find(nodeId)) {
                                    break;
                                }
                            }
                            addedNode["routeXmlNode"].setAttribute("id", nodeId);
                            $scope.selectedRouteId = nodeId;
                        }
                    }
                }
                treeModified();
            }
            function treeModified(reposition) {
                if (reposition === void 0) { reposition = true; }
                var newDoc = Camel.generateXmlFromFolder($scope.rootFolder);
                var tree = Camel.loadCamelTree(newDoc, $scope.pageId);
                if (tree) {
                    $scope.rootFolder = tree;
                    $scope.doc = Core.pathGet(tree, ["xmlDocument"]);
                }
                $scope.modified = true;
                reloadRouteIds();
                $scope.doLayout();
                Core.$apply($scope);
            }
            function reloadRouteIds() {
                $scope.routeIds = [];
                var doc = $($scope.doc);
                $scope.camelSelectionDetails.selectedCamelContextId = doc.find("camelContext").attr("id");
                doc.find("route").each(function (idx, route) {
                    var id = route.getAttribute("id");
                    if (id) {
                        $scope.routeIds.push(id);
                    }
                });
            }
            function onRouteSelectionChanged() {
                if ($scope.doc) {
                    if (!$scope.selectedRouteId && $scope.routeIds && $scope.routeIds.length) {
                        $scope.selectedRouteId = $scope.routeIds[0];
                    }
                    if ($scope.selectedRouteId && $scope.selectedRouteId !== $scope.drawnRouteId) {
                        var nodes = [];
                        var links = [];
                        Camel.loadRouteXmlNodes($scope, $scope.doc, $scope.selectedRouteId, nodes, links, getWidth());
                        updateSelection($scope.selectedRouteId);
                        $scope.folders = Camel.addFoldersToIndex($scope.rootFolder);
                        showGraph(nodes, links);
                        $scope.drawnRouteId = $scope.selectedRouteId;
                    }
                    $scope.camelSelectionDetails.selectedRouteId = $scope.selectedRouteId;
                }
            }
            function showGraph(nodes, links) {
                layoutGraph(nodes, links);
            }
            function getNodeId(node) {
                if (angular.isNumber(node)) {
                    var idx = node;
                    node = $scope.nodeStates[idx];
                    if (!node) {
                        Wiki.log.debug("Cant find node at " + idx);
                        return "node-" + idx;
                    }
                }
                return node.cid || "node-" + node.id;
            }
            function getSelectedOrRouteFolder() {
                return $scope.selectedFolder || getRouteFolder($scope.rootFolder, $scope.selectedRouteId);
            }
            function getContainerElement() {
                var rootElement = $element;
                var containerElement = rootElement.find(".canvas");
                if (!containerElement || !containerElement.length)
                    containerElement = rootElement;
                return containerElement;
            }
            var endpointStyle = ["Dot", { radius: 4, cssClass: 'camel-canvas-endpoint' }];
            var hoverPaintStyle = { strokeStyle: "red", lineWidth: 3 };
            var labelStyles = ["Label"];
            var arrowStyles = ["Arrow", {
                    location: 1,
                    id: "arrow",
                    length: 8,
                    width: 8,
                    foldback: 0.8
                }];
            var connectorStyle = ["StateMachine", { curviness: 10, proximityLimit: 50 }];
            jsPlumbInstance.importDefaults({
                Endpoint: endpointStyle,
                HoverPaintStyle: hoverPaintStyle,
                ConnectionOverlays: [
                    arrowStyles,
                    labelStyles
                ]
            });
            jsPlumbInstance.bind("dblclick", function (connection, originalEvent) {
                if (jsPlumbInstance.isSuspendDrawing()) {
                    return;
                }
                alert("double click on connection from " + connection.sourceId + " to " + connection.targetId);
            });
            jsPlumbInstance.bind('connection', function (info, evt) {
                Wiki.log.debug("Creating connection from ", info.sourceId, " to ", info.targetId);
                var link = getLink(info);
                var source = $scope.nodes[link.source];
                var sourceFolder = $scope.folders[link.source];
                var targetFolder = $scope.folders[link.target];
                if (Camel.isNextSiblingAddedAsChild(source.type)) {
                    sourceFolder.moveChild(targetFolder);
                }
                else {
                    sourceFolder.parent.insertAfter(targetFolder, sourceFolder);
                }
                treeModified();
            });
            jsPlumbInstance.bind("click", function (c) {
                if (jsPlumbInstance.isSuspendDrawing()) {
                    return;
                }
                jsPlumbInstance.detach(c);
            });
            function layoutGraph(nodes, links) {
                var transitions = [];
                var states = Core.createGraphStates(nodes, links, transitions);
                Wiki.log.debug("links: ", links);
                Wiki.log.debug("transitions: ", transitions);
                $scope.nodeStates = states;
                var containerElement = getContainerElement();
                jsPlumbInstance.doWhileSuspended(function () {
                    containerElement.css({
                        'width': '800px',
                        'height': '800px',
                        'min-height': '800px',
                        'min-width': '800px'
                    });
                    var containerHeight = 0;
                    var containerWidth = 0;
                    containerElement.find('div.component').each(function (i, el) {
                        Wiki.log.debug("Checking: ", el, " ", i);
                        if (!states.any(function (node) {
                            return el.id === getNodeId(node);
                        })) {
                            Wiki.log.debug("Removing element: ", el.id);
                            jsPlumbInstance.remove(el);
                        }
                    });
                    angular.forEach(states, function (node) {
                        Wiki.log.debug("node: ", node);
                        var id = getNodeId(node);
                        var div = containerElement.find('#' + id);
                        if (!div[0]) {
                            div = $($scope.nodeTemplate({
                                id: id,
                                node: node
                            }));
                            div.appendTo(containerElement);
                        }
                        jsPlumbInstance.makeSource(div, {
                            filter: "img.nodeIcon",
                            anchor: "Continuous",
                            connector: connectorStyle,
                            connectorStyle: { strokeStyle: "#666", lineWidth: 3 },
                            maxConnections: -1
                        });
                        jsPlumbInstance.makeTarget(div, {
                            dropOptions: { hoverClass: "dragHover" },
                            anchor: "Continuous"
                        });
                        jsPlumbInstance.draggable(div, {
                            containment: '.camel-canvas'
                        });
                        div.click(function () {
                            var newFlag = !div.hasClass("selected");
                            containerElement.find('div.component').toggleClass("selected", false);
                            div.toggleClass("selected", newFlag);
                            var id = div.attr("id");
                            updateSelection(newFlag ? id : null);
                            Core.$apply($scope);
                        });
                        div.dblclick(function () {
                            var id = div.attr("id");
                            updateSelection(id);
                            Core.$apply($scope);
                        });
                        var height = div.height();
                        var width = div.width();
                        if (height || width) {
                            node.width = width;
                            node.height = height;
                            div.css({
                                'min-width': width,
                                'min-height': height
                            });
                        }
                    });
                    var edgeSep = 10;
                    dagre.layout()
                        .nodeSep(100)
                        .edgeSep(edgeSep)
                        .rankSep(75)
                        .nodes(states)
                        .edges(transitions)
                        .debugLevel(1)
                        .run();
                    angular.forEach(states, function (node) {
                        var id = getNodeId(node);
                        var div = $("#" + id);
                        var divHeight = div.height();
                        var divWidth = div.width();
                        var leftOffset = node.dagre.x + divWidth;
                        var bottomOffset = node.dagre.y + divHeight;
                        if (containerHeight < bottomOffset) {
                            containerHeight = bottomOffset + edgeSep * 2;
                        }
                        if (containerWidth < leftOffset) {
                            containerWidth = leftOffset + edgeSep * 2;
                        }
                        div.css({ top: node.dagre.y, left: node.dagre.x });
                    });
                    containerElement.css({
                        'width': containerWidth,
                        'height': containerHeight,
                        'min-height': containerHeight,
                        'min-width': containerWidth
                    });
                    containerElement.dblclick(function () {
                        $scope.propertiesDialog.open();
                    });
                    jsPlumbInstance.setSuspendEvents(true);
                    jsPlumbInstance.detachEveryConnection({ fireEvent: false });
                    angular.forEach(links, function (link) {
                        jsPlumbInstance.connect({
                            source: getNodeId(link.source),
                            target: getNodeId(link.target)
                        });
                    });
                    jsPlumbInstance.setSuspendEvents(false);
                });
                return states;
            }
            function getLink(info) {
                var sourceId = info.sourceId;
                var targetId = info.targetId;
                return {
                    source: sourceId,
                    target: targetId
                };
            }
            function getNodeByCID(nodes, cid) {
                return nodes.find(function (node) {
                    return node.cid === cid;
                });
            }
            function updateSelection(folderOrId) {
                var folder = null;
                if (angular.isString(folderOrId)) {
                    var id = folderOrId;
                    folder = (id && $scope.folders) ? $scope.folders[id] : null;
                }
                else {
                    folder = folderOrId;
                }
                $scope.selectedFolder = folder;
                folder = getSelectedOrRouteFolder();
                $scope.nodeXmlNode = null;
                $scope.propertiesTemplate = null;
                if (folder) {
                    var nodeName = Camel.getFolderCamelNodeId(folder);
                    $scope.nodeData = Camel.getRouteFolderJSON(folder);
                    $scope.nodeDataChangedFields = {};
                    $scope.nodeModel = Camel.getCamelSchema(nodeName);
                    if ($scope.nodeModel) {
                        $scope.propertiesTemplate = "plugins/wiki/html/camelPropertiesEdit.html";
                    }
                    $scope.selectedEndpoint = null;
                    if ("endpoint" === nodeName) {
                        var uri = $scope.nodeData["uri"];
                        if (uri) {
                            var idx = uri.indexOf(":");
                            if (idx > 0) {
                                var endpointScheme = uri.substring(0, idx);
                                var endpointPath = uri.substring(idx + 1);
                                $scope.endpointPathHasSlashes = endpointPath ? false : true;
                                if (endpointPath.startsWith("//")) {
                                    endpointPath = endpointPath.substring(2);
                                    $scope.endpointPathHasSlashes = true;
                                }
                                idx = endpointPath.indexOf("?");
                                var endpointParameters = {};
                                if (idx > 0) {
                                    var parameters = endpointPath.substring(idx + 1);
                                    endpointPath = endpointPath.substring(0, idx);
                                    endpointParameters = Core.stringToHash(parameters);
                                }
                                $scope.endpointScheme = endpointScheme;
                                $scope.endpointPath = endpointPath;
                                $scope.endpointParameters = endpointParameters;
                                Wiki.log.debug("endpoint " + endpointScheme + " path " + endpointPath + " and parameters " + JSON.stringify(endpointParameters));
                                $scope.loadEndpointSchema(endpointScheme);
                                $scope.selectedEndpoint = {
                                    endpointScheme: endpointScheme,
                                    endpointPath: endpointPath,
                                    parameters: endpointParameters
                                };
                            }
                        }
                    }
                }
            }
            function getWidth() {
                var canvasDiv = $($element);
                return canvasDiv.width();
            }
            function getFolderIdAttribute(route) {
                var id = null;
                if (route) {
                    var xmlNode = route["routeXmlNode"];
                    if (xmlNode) {
                        id = xmlNode.getAttribute("id");
                    }
                }
                return id;
            }
            function getRouteFolder(tree, routeId) {
                var answer = null;
                if (tree) {
                    angular.forEach(tree.children, function (route) {
                        if (!answer) {
                            var id = getFolderIdAttribute(route);
                            if (routeId === id) {
                                answer = route;
                            }
                        }
                    });
                }
                return answer;
            }
            $scope.doSwitchToTreeView = function () {
                $location.url(Core.trimLeading(($scope.startLink + "/camel/properties/" + $scope.pageId), '#'));
            };
            $scope.confirmSwitchToTreeView = function () {
                if ($scope.modified) {
                    $scope.switchToTreeView.open();
                }
                else {
                    $scope.doSwitchToTreeView();
                }
            };
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.CommitController", ["$scope", "$location", "$routeParams", "$templateCache", "marked", "fileExtensionTypeRegistry", function ($scope, $location, $routeParams, $templateCache, marked, fileExtensionTypeRegistry) {
            var isFmc = false;
            var jolokia = null;
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.commitId = $scope.objectId;
            $scope.dateFormat = 'EEE, MMM d, y : hh:mm:ss a';
            $scope.gridOptions = {
                data: 'commits',
                showFilter: false,
                multiSelect: false,
                selectWithCheckboxOnly: true,
                showSelectionCheckbox: true,
                displaySelectionCheckbox: true,
                selectedItems: [],
                filterOptions: {
                    filterText: ''
                },
                columnDefs: [
                    {
                        field: 'path',
                        displayName: 'File Name',
                        cellTemplate: $templateCache.get('fileCellTemplate.html'),
                        width: "***",
                        cellFilter: ""
                    },
                    {
                        field: '$diffLink',
                        displayName: 'Options',
                        cellTemplate: $templateCache.get('viewDiffTemplate.html')
                    }
                ]
            };
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(updateView, 50);
            });
            $scope.$watch('workspace.tree', function () {
                if (!$scope.git) {
                    setTimeout(updateView, 50);
                }
            });
            $scope.canRevert = function () {
                return $scope.gridOptions.selectedItems.length === 1;
            };
            $scope.revert = function () {
                var selectedItems = $scope.gridOptions.selectedItems;
                if (selectedItems.length > 0) {
                    var path = commitPath(selectedItems[0]);
                    var objectId = $scope.commitId;
                    if (path && objectId) {
                        var commitMessage = "Reverting file " + $scope.pageId + " to previous version " + objectId;
                        wikiRepository.revertTo($scope.branch, objectId, $scope.pageId, commitMessage, function (result) {
                            Wiki.onComplete(result);
                            updateView();
                        });
                    }
                }
            };
            function commitPath(commit) {
                return commit.path || commit.name;
            }
            $scope.diff = function () {
                var selectedItems = $scope.gridOptions.selectedItems;
                if (selectedItems.length > 0) {
                    var commit = selectedItems[0];
                    var otherCommitId = $scope.commitId;
                    var link = UrlHelpers.join(Wiki.startLink($scope), "/diff/" + $scope.commitId + "/" + otherCommitId + "/" + commitPath(commit));
                    var path = Core.trimLeading(link, "#");
                    Kubernetes.goToPath($location, path);
                }
            };
            updateView();
            function updateView() {
                var commitId = $scope.commitId;
                Wiki.loadBranches(jolokia, wikiRepository, $scope, isFmc);
                wikiRepository.commitInfo(commitId, function (commitInfo) {
                    $scope.commitInfo = commitInfo;
                    Core.$apply($scope);
                });
                wikiRepository.commitTree(commitId, function (commits) {
                    $scope.commits = commits;
                    angular.forEach(commits, function (commit) {
                        commit.fileIconHtml = Wiki.fileIconHtml(commit, $scope);
                        commit.fileClass = commit.name.endsWith(".profile") ? "green" : "";
                        var changeType = commit.changeType;
                        var path = commitPath(commit);
                        if (path) {
                            commit.fileLink = Wiki.startLink($scope) + '/version/' + path + '/' + commitId;
                        }
                        commit.$diffLink = Wiki.startLink($scope) + "/diff/" + commitId + "/" + commitId + "/" + (path || "");
                        if (changeType) {
                            changeType = changeType.toLowerCase();
                            if (changeType.startsWith("a")) {
                                commit.changeClass = "change-add";
                                commit.change = "add";
                                commit.title = "added";
                            }
                            else if (changeType.startsWith("d")) {
                                commit.changeClass = "change-delete";
                                commit.change = "delete";
                                commit.title = "deleted";
                                commit.fileLink = null;
                            }
                            else {
                                commit.changeClass = "change-modify";
                                commit.change = "modify";
                                commit.title = "modified";
                            }
                            commit.changeTypeHtml = '<span class="' + commit.changeClass + '">' + commit.title + '</span>';
                        }
                    });
                    Core.$apply($scope);
                });
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.CommitDetailController", ["$scope", "$location", "$routeParams", "$templateCache", "marked", "fileExtensionTypeRegistry", function ($scope, $location, $routeParams, $templateCache, marked, fileExtensionTypeRegistry) {
            var isFmc = false;
            var jolokia = null;
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.commitId = $scope.objectId;
            var options = {
                readOnly: true,
                mode: {
                    name: 'diff'
                }
            };
            $scope.codeMirrorOptions = CodeEditor.createEditorSettings(options);
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(updateView, 50);
            });
            $scope.$watch('workspace.tree', function () {
                if (!$scope.git) {
                    setTimeout(updateView, 50);
                }
            });
            $scope.revert = function () {
                if ($scope.commit) {
                    var path = commitPath($scope.commit);
                    var objectId = $scope.commitId;
                    if (path && objectId) {
                        var commitMessage = "Reverting file " + $scope.pageId + " to previous version " + objectId;
                        wikiRepository.revertTo($scope.branch, objectId, $scope.pageId, commitMessage, function (result) {
                            Wiki.onComplete(result);
                            updateView();
                        });
                    }
                }
            };
            function commitPath(commit) {
                return commit.path || commit.name || "/";
            }
            $scope.diff = function () {
                var selectedItems = $scope.gridOptions.selectedItems;
                if (selectedItems.length > 0) {
                    var commit = selectedItems[0];
                    var otherCommitId = $scope.commitId;
                    var link = UrlHelpers.join(Wiki.startLink($scope), "/diff/" + $scope.commitId + "/" + otherCommitId + "/" + commitPath(commit));
                    var path = Core.trimLeading(link, "#");
                    Kubernetes.goToPath($location, path);
                }
            };
            updateView();
            function updateView() {
                var commitId = $scope.commitId;
                Wiki.loadBranches(jolokia, wikiRepository, $scope, isFmc);
                wikiRepository.commitDetail(commitId, function (commitDetail) {
                    if (commitDetail) {
                        $scope.commitDetail = commitDetail;
                        var commit = commitDetail.commit_info;
                        $scope.commit = commit;
                        if (commit) {
                            commit.$date = Developer.asDate(commit.date);
                        }
                        angular.forEach(commitDetail.diffs, function (diff) {
                            var path = diff.new_path;
                            if (path) {
                                diff.$viewLink = UrlHelpers.join(Wiki.startWikiLink($scope.projectId, commitId), "view", path);
                            }
                        });
                    }
                    Core.$apply($scope);
                });
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    var CreateController = Wiki.controller("CreateController", ["$scope", "$location", "$routeParams", "$route", "$http", "$timeout", function ($scope, $location, $routeParams, $route, $http, $timeout) {
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            var workspace = null;
            $scope.createDocumentTree = Wiki.createWizardTree(workspace, $scope);
            $scope.createDocumentTreeChildren = $scope.createDocumentTree.children;
            $scope.createDocumentTreeActivations = ["camel-spring.xml", "ReadMe.md"];
            $scope.treeOptions = {
                nodeChildren: "children",
                dirSelectable: true,
                injectClasses: {
                    ul: "a1",
                    li: "a2",
                    liSelected: "a7",
                    iExpanded: "a3",
                    iCollapsed: "a4",
                    iLeaf: "a5",
                    label: "a6",
                    labelSelected: "a8"
                }
            };
            $scope.fileExists = {
                exists: false,
                name: ""
            };
            $scope.newDocumentName = "";
            $scope.selectedCreateDocumentExtension = null;
            $scope.fileExists.exists = false;
            $scope.fileExists.name = "";
            $scope.newDocumentName = "";
            function returnToDirectory() {
                var link = Wiki.viewLink($scope.projectId, $scope.branch, $scope.pageId, $location);
                Wiki.log.debug("Cancelling, going to link: ", link);
                Wiki.goToLink(link, $timeout, $location);
            }
            $scope.cancel = function () {
                returnToDirectory();
            };
            $scope.onCreateDocumentSelect = function (node) {
                $scope.fileExists.exists = false;
                $scope.fileExists.name = "";
                var entity = node ? node.entity : null;
                $scope.selectedCreateDocumentTemplate = entity;
                $scope.selectedCreateDocumentTemplateRegex = $scope.selectedCreateDocumentTemplate.regex || /.*/;
                $scope.selectedCreateDocumentTemplateInvalid = $scope.selectedCreateDocumentTemplate.invalid || "invalid name";
                $scope.selectedCreateDocumentTemplateExtension = $scope.selectedCreateDocumentTemplate.extension || null;
                Wiki.log.debug("Entity: ", entity);
                if (entity) {
                    if (entity.generated) {
                        $scope.formSchema = entity.generated.schema;
                        $scope.formData = entity.generated.form(workspace, $scope);
                    }
                    else {
                        $scope.formSchema = {};
                        $scope.formData = {};
                    }
                    Core.$apply($scope);
                }
            };
            $scope.addAndCloseDialog = function (fileName) {
                $scope.newDocumentName = fileName;
                var template = $scope.selectedCreateDocumentTemplate;
                var path = getNewDocumentPath();
                $scope.newDocumentName = null;
                $scope.fileExists.exists = false;
                $scope.fileExists.name = "";
                $scope.fileExtensionInvalid = null;
                if (!template || !path) {
                    return;
                }
                if ($scope.selectedCreateDocumentTemplateExtension) {
                    var idx = path.lastIndexOf('.');
                    if (idx > 0) {
                        var ext = path.substring(idx);
                        if ($scope.selectedCreateDocumentTemplateExtension !== ext) {
                            $scope.fileExtensionInvalid = "File extension must be: " + $scope.selectedCreateDocumentTemplateExtension;
                            Core.$apply($scope);
                            return;
                        }
                    }
                }
                wikiRepository.exists($scope.branch, path, function (exists) {
                    $scope.fileExists.exists = exists;
                    $scope.fileExists.name = exists ? path : false;
                    if (!exists) {
                        doCreate();
                    }
                    Core.$apply($scope);
                });
                function doCreate() {
                    var name = Wiki.fileName(path);
                    var folder = Wiki.fileParent(path);
                    var exemplar = template.exemplar;
                    var commitMessage = "Created " + template.label;
                    var exemplarUri = Core.url("/plugins/wiki/exemplar/" + exemplar);
                    if (template.folder) {
                        Core.notification("success", "Creating new folder " + name);
                        wikiRepository.createDirectory($scope.branch, path, commitMessage, function (status) {
                            var link = Wiki.viewLink($scope.projectId, $scope.branch, path, $location);
                            Wiki.goToLink(link, $timeout, $location);
                        });
                    }
                    else if (template.profile) {
                        function toPath(profileName) {
                            var answer = "fabric/profiles/" + profileName;
                            answer = answer.replace(/-/g, "/");
                            answer = answer + ".profile";
                            return answer;
                        }
                        function toProfileName(path) {
                            var answer = path.replace(/^fabric\/profiles\//, "");
                            answer = answer.replace(/\//g, "-");
                            answer = answer.replace(/\.profile$/, "");
                            return answer;
                        }
                        folder = folder.replace(/\/=?(\w*)\.profile$/, "");
                        var concatenated = folder + "/" + name;
                        var profileName = toProfileName(concatenated);
                        var targetPath = toPath(profileName);
                    }
                    else if (template.generated) {
                        var options = {
                            workspace: workspace,
                            form: $scope.formData,
                            name: fileName,
                            parentId: folder,
                            branch: $scope.branch,
                            success: function (contents) {
                                if (contents) {
                                    wikiRepository.putPage($scope.branch, path, contents, commitMessage, function (status) {
                                        Wiki.log.debug("Created file " + name);
                                        Wiki.onComplete(status);
                                        returnToDirectory();
                                    });
                                }
                                else {
                                    returnToDirectory();
                                }
                            },
                            error: function (error) {
                                Core.notification('error', error);
                                Core.$apply($scope);
                            }
                        };
                        template.generated.generate(options);
                    }
                    else {
                        $http.get(exemplarUri)
                            .success(function (data, status, headers, config) {
                            putPage(path, name, folder, data, commitMessage);
                        })
                            .error(function (data, status, headers, config) {
                            putPage(path, name, folder, "", commitMessage);
                        });
                    }
                }
            };
            function putPage(path, name, folder, contents, commitMessage) {
                wikiRepository.putPage($scope.branch, path, contents, commitMessage, function (status) {
                    Wiki.log.debug("Created file " + name);
                    Wiki.onComplete(status);
                    $scope.git = wikiRepository.getPage($scope.branch, folder, $scope.objectId, function (details) {
                        var link = null;
                        if (details && details.children) {
                            Wiki.log.debug("scanned the directory " + details.children.length + " children");
                            var child = details.children.find(function (c) { return c.name === Wiki.fileName; });
                            if (child) {
                                link = $scope.childLink(child);
                            }
                            else {
                                Wiki.log.debug("Could not find name '" + Wiki.fileName + "' in the list of file names " + JSON.stringify(details.children.map(function (c) { return c.name; })));
                            }
                        }
                        if (!link) {
                            Wiki.log.debug("WARNING: could not find the childLink so reverting to the wiki edit page!");
                            link = Wiki.editLink($scope, path, $location);
                        }
                        Wiki.goToLink(link, $timeout, $location);
                    });
                });
            }
            function getNewDocumentPath() {
                var template = $scope.selectedCreateDocumentTemplate;
                if (!template) {
                    Wiki.log.debug("No template selected.");
                    return null;
                }
                var exemplar = template.exemplar || "";
                var name = $scope.newDocumentName || exemplar;
                if (name.indexOf('.') < 0) {
                    var idx = exemplar.lastIndexOf(".");
                    if (idx > 0) {
                        name += exemplar.substring(idx);
                    }
                }
                var folder = $scope.pageId;
                if ($scope.isFile) {
                    var idx = folder.lastIndexOf("/");
                    if (idx <= 0) {
                        folder = "";
                    }
                    else {
                        folder = folder.substring(0, idx);
                    }
                }
                var idx = name.lastIndexOf("/");
                if (idx > 0) {
                    folder += "/" + name.substring(0, idx);
                    name = name.substring(idx + 1);
                }
                folder = Core.trimLeading(folder, "/");
                return folder + (folder ? "/" : "") + name;
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.EditController", ["$scope", "$location", "$routeParams", "fileExtensionTypeRegistry", function ($scope, $location, $routeParams, fileExtensionTypeRegistry) {
            Wiki.initScope($scope, $routeParams, $location);
            $scope.breadcrumbConfig.push(Wiki.createEditingBreadcrumb($scope));
            var wikiRepository = $scope.wikiRepository;
            $scope.entity = {
                source: null
            };
            var format = Wiki.fileFormat($scope.pageId, fileExtensionTypeRegistry);
            var form = null;
            if ((format && format === "javascript") || isCreate()) {
                form = $location.search()["form"];
            }
            var options = {
                mode: {
                    name: format
                }
            };
            $scope.codeMirrorOptions = CodeEditor.createEditorSettings(options);
            $scope.modified = false;
            $scope.isValid = function () { return $scope.fileName; };
            $scope.canSave = function () { return !$scope.modified; };
            $scope.$watch('entity.source', function (newValue, oldValue) {
                $scope.modified = newValue && oldValue && newValue !== oldValue;
            }, true);
            Wiki.log.debug("path: ", $scope.path);
            $scope.$watch('modified', function (newValue, oldValue) {
                Wiki.log.debug("modified: ", newValue);
            });
            $scope.viewLink = function () { return Wiki.viewLink($scope.projectId, $scope.branch, $scope.pageId, $location, $scope.fileName); };
            $scope.cancel = function () {
                goToView();
            };
            $scope.save = function () {
                if ($scope.modified && $scope.fileName) {
                    saveTo($scope["pageId"]);
                }
            };
            $scope.create = function () {
                var path = $scope.pageId + "/" + $scope.fileName;
                Wiki.log.debug("creating new file at " + path);
                saveTo(path);
            };
            $scope.onSubmit = function (json, form) {
                if (isCreate()) {
                    $scope.create();
                }
                else {
                    $scope.save();
                }
            };
            $scope.onCancel = function (form) {
                setTimeout(function () {
                    goToView();
                    Core.$apply($scope);
                }, 50);
            };
            updateView();
            function isCreate() {
                return _.startsWith($location.path(), "/wiki/create");
            }
            function updateView() {
                if (isCreate()) {
                    updateSourceView();
                }
                else {
                    Wiki.log.debug("Getting page, branch: ", $scope.branch, " pageId: ", $scope.pageId, " objectId: ", $scope.objectId);
                    wikiRepository.getPage($scope.branch, $scope.pageId, $scope.objectId, onFileContents);
                }
            }
            function onFileContents(details) {
                var contents = details.text;
                $scope.entity.source = contents;
                $scope.fileName = _.last($scope.pageId.split('/'));
                Wiki.log.debug("file name: ", $scope.fileName);
                Wiki.log.debug("file details: ", details);
                updateSourceView();
                Core.$apply($scope);
            }
            function updateSourceView() {
                if (form) {
                    if (isCreate()) {
                        if (!$scope.fileName) {
                            $scope.fileName = "" + Core.getUUID() + ".json";
                        }
                    }
                    $scope.sourceView = null;
                    $scope.git = wikiRepository.getPage($scope.branch, form, $scope.objectId, function (details) {
                        onFormSchema(Wiki.parseJson(details.text));
                    });
                }
                else {
                    $scope.sourceView = "plugins/wiki/html/sourceEdit.html";
                }
            }
            function onFormSchema(json) {
                $scope.formDefinition = json;
                if ($scope.entity.source) {
                    $scope.formEntity = Wiki.parseJson($scope.entity.source);
                }
                $scope.sourceView = "plugins/wiki/html/formEdit.html";
                Core.$apply($scope);
            }
            function goToView() {
                var path = Core.trimLeading($scope.viewLink(), "#");
                Wiki.log.debug("going to view " + path);
                Kubernetes.goToPath($location, Wiki.decodePath(path));
                Wiki.log.debug("location is now " + $location.path());
            }
            function saveTo(path) {
                var commitMessage = $scope.commitMessage || "Updated page " + $scope.pageId;
                var contents = $scope.entity.source;
                if ($scope.formEntity) {
                    contents = JSON.stringify($scope.formEntity, null, "  ");
                }
                Wiki.log.debug("Saving file, branch: ", $scope.branch, " path: ", $scope.path);
                wikiRepository.putPage($scope.branch, path, contents, commitMessage, function (status) {
                    Wiki.onComplete(status);
                    $scope.modified = false;
                    Core.notification("success", "Saved " + path);
                    goToView();
                    Core.$apply($scope);
                });
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki.FileDropController = Wiki._module.controller("Wiki.FileDropController", ["$scope", "FileUploader", "$route", "$timeout", "userDetails", function ($scope, FileUploader, $route, $timeout, userDetails) {
            var uploadURI = Wiki.gitRestURL($scope, $scope.pageId) + '/';
            var uploader = $scope.uploader = new FileUploader({
                headers: {
                    'Authorization': Core.authHeaderValue(userDetails)
                },
                autoUpload: true,
                withCredentials: true,
                method: 'POST',
                url: uploadURI
            });
            $scope.doUpload = function () {
                uploader.uploadAll();
            };
            uploader.onWhenAddingFileFailed = function (item, filter, options) {
                Wiki.log.debug('onWhenAddingFileFailed', item, filter, options);
            };
            uploader.onAfterAddingFile = function (fileItem) {
                Wiki.log.debug('onAfterAddingFile', fileItem);
            };
            uploader.onAfterAddingAll = function (addedFileItems) {
                Wiki.log.debug('onAfterAddingAll', addedFileItems);
            };
            uploader.onBeforeUploadItem = function (item) {
                if ('file' in item) {
                    item.fileSizeMB = (item.file.size / 1024 / 1024).toFixed(2);
                }
                else {
                    item.fileSizeMB = 0;
                }
                item.url = uploadURI;
                Wiki.log.info("Loading files to " + uploadURI);
                Wiki.log.debug('onBeforeUploadItem', item);
            };
            uploader.onProgressItem = function (fileItem, progress) {
                Wiki.log.debug('onProgressItem', fileItem, progress);
            };
            uploader.onProgressAll = function (progress) {
                Wiki.log.debug('onProgressAll', progress);
            };
            uploader.onSuccessItem = function (fileItem, response, status, headers) {
                Wiki.log.debug('onSuccessItem', fileItem, response, status, headers);
            };
            uploader.onErrorItem = function (fileItem, response, status, headers) {
                Wiki.log.debug('onErrorItem', fileItem, response, status, headers);
            };
            uploader.onCancelItem = function (fileItem, response, status, headers) {
                Wiki.log.debug('onCancelItem', fileItem, response, status, headers);
            };
            uploader.onCompleteItem = function (fileItem, response, status, headers) {
                Wiki.log.debug('onCompleteItem', fileItem, response, status, headers);
            };
            uploader.onCompleteAll = function () {
                Wiki.log.debug('onCompleteAll');
                uploader.clearQueue();
                $timeout(function () {
                    Wiki.log.info("Completed all uploads. Lets force a reload");
                    $route.reload();
                    Core.$apply($scope);
                }, 200);
            };
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.FormTableController", ["$scope", "$location", "$routeParams", function ($scope, $location, $routeParams) {
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.columnDefs = [];
            $scope.gridOptions = {
                data: 'list',
                displayFooter: false,
                showFilter: false,
                filterOptions: {
                    filterText: ''
                },
                columnDefs: $scope.columnDefs
            };
            $scope.viewLink = function (row) {
                return childLink(row, "/view");
            };
            $scope.editLink = function (row) {
                return childLink(row, "/edit");
            };
            function childLink(child, prefix) {
                var start = Wiki.startLink($scope);
                var childId = (child) ? child["_id"] || "" : "";
                return Core.createHref($location, start + prefix + "/" + $scope.pageId + "/" + childId);
            }
            var linksColumn = {
                field: '_id',
                displayName: 'Actions',
                cellTemplate: '<div class="ngCellText""><a ng-href="{{viewLink(row.entity)}}" class="btn">View</a> <a ng-href="{{editLink(row.entity)}}" class="btn">Edit</a></div>'
            };
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(updateView, 50);
            });
            var form = $location.search()["form"];
            if (form) {
                wikiRepository.getPage($scope.branch, form, $scope.objectId, onFormData);
            }
            updateView();
            function onResults(response) {
                var list = [];
                var map = Wiki.parseJson(response);
                angular.forEach(map, function (value, key) {
                    value["_id"] = key;
                    list.push(value);
                });
                $scope.list = list;
                Core.$apply($scope);
            }
            function updateView() {
                var filter = Core.pathGet($scope, ["gridOptions", "filterOptions", "filterText"]) || "";
                $scope.git = wikiRepository.jsonChildContents($scope.pageId, "*.json", filter, onResults);
            }
            function onFormData(details) {
                var text = details.text;
                if (text) {
                    $scope.formDefinition = Wiki.parseJson(text);
                    var columnDefs = [];
                    var schema = $scope.formDefinition;
                    angular.forEach(schema.properties, function (property, name) {
                        if (name) {
                            if (!Forms.isArrayOrNestedObject(property, schema)) {
                                var colDef = {
                                    field: name,
                                    displayName: property.description || name,
                                    visible: true
                                };
                                columnDefs.push(colDef);
                            }
                        }
                    });
                    columnDefs.push(linksColumn);
                    $scope.columnDefs = columnDefs;
                    $scope.gridOptions.columnDefs = columnDefs;
                    $scope.tableView = "plugins/wiki/html/formTableDatatable.html";
                }
            }
            Core.$apply($scope);
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.GitPreferences", ["$scope", "localStorage", "userDetails", function ($scope, localStorage, userDetails) {
            var config = {
                properties: {
                    gitUserName: {
                        type: 'string',
                        label: 'Username',
                        description: 'The user name to be used when making changes to files with the source control system'
                    },
                    gitUserEmail: {
                        type: 'string',
                        label: 'Email',
                        description: 'The email address to use when making changes to files with the source control system'
                    }
                }
            };
            $scope.entity = $scope;
            $scope.config = config;
            Core.initPreferenceScope($scope, localStorage, {
                'gitUserName': {
                    'value': userDetails.username || ""
                },
                'gitUserEmail': {
                    'value': ''
                }
            });
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.HistoryController", ["$scope", "$location", "$routeParams", "$templateCache", "marked", "fileExtensionTypeRegistry", function ($scope, $location, $routeParams, $templateCache, marked, fileExtensionTypeRegistry) {
            var isFmc = false;
            var jolokia = null;
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.fetched = false;
            $scope.dateFormat = 'EEE, MMM d, y at HH:mm:ss Z';
            $scope.gridOptions = {
                data: 'logs',
                showFilter: false,
                enableRowClickSelection: true,
                multiSelect: true,
                selectedItems: [],
                showSelectionCheckbox: true,
                displaySelectionCheckbox: true,
                filterOptions: {
                    filterText: ''
                },
                columnDefs: [
                    {
                        field: '$date',
                        displayName: 'Modified',
                        defaultSort: true,
                        ascending: false,
                        cellTemplate: '<div class="ngCellText text-nowrap" title="{{row.entity.$date | date:\'EEE, MMM d, yyyy : HH:mm:ss Z\'}}">{{row.entity.$date.relative()}}</div>',
                        width: "**"
                    },
                    {
                        field: 'sha',
                        displayName: 'Change',
                        cellTemplate: '<div class="ngCellText text-nowrap"><a class="commit-link" ng-href="{{row.entity.commitLink}}{{hash}}" title="{{row.entity.sha}}">{{row.entity.sha | limitTo:7}} <i class="fa fa-arrow-circle-right"></i></a></div>',
                        cellFilter: "",
                        width: "*"
                    },
                    {
                        field: 'author',
                        displayName: 'Author',
                        cellFilter: "",
                        width: "**"
                    },
                    {
                        field: 'short_message',
                        displayName: 'Message',
                        cellTemplate: '<div class="ngCellText text-nowrap" title="{{row.entity.short_message}}">{{row.entity.short_message}}</div>',
                        width: "****"
                    }
                ]
            };
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(updateView, 50);
            });
            $scope.canRevert = function () {
                var selectedItems = $scope.gridOptions.selectedItems;
                return selectedItems.length === 1 && selectedItems[0] !== $scope.logs[0];
            };
            $scope.revert = function () {
                var selectedItems = $scope.gridOptions.selectedItems;
                if (selectedItems.length > 0) {
                    var objectId = selectedItems[0].sha;
                    if (objectId) {
                        var commitMessage = "Reverting file " + $scope.pageId + " to previous version " + objectId;
                        wikiRepository.revertTo($scope.branch, objectId, $scope.pageId, commitMessage, function (result) {
                            Wiki.onComplete(result);
                            Core.notification('success', "Successfully reverted " + $scope.pageId);
                            updateView();
                        });
                    }
                    selectedItems.splice(0, selectedItems.length);
                }
            };
            $scope.diff = function () {
                var defaultValue = " ";
                var objectId = defaultValue;
                var selectedItems = $scope.gridOptions.selectedItems;
                if (selectedItems.length > 0) {
                    objectId = selectedItems[0].sha || defaultValue;
                }
                var baseObjectId = defaultValue;
                if (selectedItems.length > 1) {
                    baseObjectId = selectedItems[1].sha || defaultValue;
                    if (selectedItems[0].date < selectedItems[1].date) {
                        var _ = baseObjectId;
                        baseObjectId = objectId;
                        objectId = _;
                    }
                }
                var link = Wiki.startLink($scope) + "/diff/" + objectId + "/" + baseObjectId + "/" + $scope.pageId;
                var path = Core.trimLeading(link, "#");
                Kubernetes.goToPath($location, path);
            };
            updateView();
            function updateView() {
                var objectId = "";
                var limit = 0;
                $scope.git = wikiRepository.history($scope.branch, objectId, $scope.pageId, limit, function (logArray) {
                    angular.forEach(logArray, function (log) {
                        var commitId = log.sha;
                        log.$date = Developer.asDate(log.date);
                        log.commitLink = Wiki.startLink($scope) + "/commitDetail/" + $scope.pageId + "/" + commitId;
                    });
                    $scope.logs = _.sortBy(logArray, "$date").reverse();
                    $scope.fetched = true;
                    Core.$apply($scope);
                });
                Wiki.loadBranches(jolokia, wikiRepository, $scope, isFmc);
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.directive("commitHistoryPanel", function () {
        return {
            templateUrl: Wiki.templatePath + 'historyPanel.html'
        };
    });
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller("Wiki.NavBarController", ["$scope", "$location", "$routeParams", "wikiBranchMenu", function ($scope, $location, $routeParams, wikiBranchMenu) {
            var isFmc = false;
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            $scope.branchMenuConfig = {
                title: $scope.branch,
                items: []
            };
            $scope.ViewMode = Wiki.ViewMode;
            $scope.setViewMode = function (mode) {
                $scope.$emit('Wiki.SetViewMode', mode);
            };
            wikiBranchMenu.applyMenuExtensions($scope.branchMenuConfig.items);
            $scope.$watch('branches', function (newValue, oldValue) {
                if (newValue === oldValue || !newValue) {
                    return;
                }
                $scope.branchMenuConfig.items = [];
                if (newValue.length > 0) {
                    $scope.branchMenuConfig.items.push({
                        heading: isFmc ? "Versions" : "Branches"
                    });
                }
                newValue.sort().forEach(function (item) {
                    var menuItem = {
                        title: item,
                        icon: '',
                        action: function () { }
                    };
                    if (item === $scope.branch) {
                        menuItem.icon = "fa fa-ok";
                    }
                    else {
                        menuItem.action = function () {
                            var targetUrl = Wiki.branchLink($scope.projectId, item, $scope.pageId, $location);
                            Kubernetes.goToPath($location, Core.toPath(targetUrl));
                            Core.$apply($scope);
                        };
                    }
                    $scope.branchMenuConfig.items.push(menuItem);
                });
                wikiBranchMenu.applyMenuExtensions($scope.branchMenuConfig.items);
            }, true);
            $scope.createLink = function () {
                var pageId = Wiki.pageId($routeParams, $location);
                return Wiki.createLink($scope, pageId, $location);
            };
            $scope.startLink = Wiki.startLink($scope);
            $scope.sourceLink = function () {
                var path = $location.path();
                var answer = null;
                angular.forEach(Wiki.customViewLinks($scope), function (link) {
                    if (path.startsWith(link)) {
                        answer = Core.createHref($location, Wiki.startLink($scope) + "/view" + path.substring(link.length));
                    }
                });
                return (!answer && $location.search()["form"])
                    ? Core.createHref($location, "#" + path, ["form"])
                    : answer;
            };
            $scope.isActive = function (href) {
                if (!href) {
                    return false;
                }
                return href.endsWith($routeParams['page']);
            };
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(loadBreadcrumbs, 50);
            });
            loadBreadcrumbs();
            function switchFromViewToCustomLink(breadcrumb, link) {
                var href = breadcrumb.href;
                if (href) {
                    breadcrumb.href = href.replace("wiki/view", link);
                }
            }
            function loadBreadcrumbs() {
                var start = Wiki.startLink($scope);
                var href = start + "/view";
                $scope.breadcrumbs = [
                    { href: href, name: "root" }
                ];
                var path = Wiki.pageId($routeParams, $location);
                var array = path ? path.split("/") : [];
                angular.forEach(array, function (name) {
                    if (!_.startsWith(name, "/") && !_.endsWith(href, "/")) {
                        href += "/";
                    }
                    href += Wiki.encodePath(name);
                    if (!Core.isBlank(name)) {
                        $scope.breadcrumbs.push({ href: href, name: name });
                    }
                });
                var loc = $location.path();
                if ($scope.breadcrumbs.length) {
                    var last = $scope.breadcrumbs[$scope.breadcrumbs.length - 1];
                    last.name = Wiki.hideFileNameExtensions(last.name);
                    var swizzled = false;
                    angular.forEach(Wiki.customViewLinks($scope), function (link) {
                        if (!swizzled && loc.startsWith(link)) {
                            switchFromViewToCustomLink($scope.breadcrumbs.last(), Core.trimLeading(link, "/"));
                            swizzled = true;
                        }
                    });
                    if (!swizzled && $location.search()["form"]) {
                        var lastName = $scope.breadcrumbs.last().name;
                        if (lastName && lastName.endsWith(".json")) {
                            switchFromViewToCustomLink($scope.breadcrumbs[$scope.breadcrumbs.length - 2], "wiki/formTable");
                        }
                    }
                }
                var name = null;
                if (loc.startsWith("/wiki/version")) {
                    name = ($routeParams["objectId"] || "").substring(0, 6) || "Version";
                    $scope.breadcrumbs.push({ href: "#" + loc, name: name });
                }
                if (loc.startsWith("/wiki/diff")) {
                    var v1 = ($routeParams["objectId"] || "").substring(0, 6);
                    var v2 = ($routeParams["baseObjectId"] || "").substring(0, 6);
                    name = "Diff";
                    if (v1) {
                        if (v2) {
                            name += " " + v1 + " " + v2;
                        }
                        else {
                            name += " " + v1;
                        }
                    }
                    $scope.breadcrumbs.push({ href: "#" + loc, name: name });
                }
                Core.$apply($scope);
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.controller('Wiki.OverviewDashboard', ["$scope", "$location", "$routeParams", function ($scope, $location, $routeParams) {
        Wiki.initScope($scope, $routeParams, $location);
        $scope.dashboardEmbedded = true;
        $scope.dashboardId = '0';
        $scope.dashboardIndex = '0';
        $scope.dashboardRepository = {
            getType: function () { return 'GitWikiRepository'; },
            putDashboards: function (array, commitMessage, cb) {
                return null;
            },
            deleteDashboards: function (array, fn) {
                return null;
            },
            getDashboards: function (fn) {
                Wiki.log.debug("getDashboards called");
                setTimeout(function () {
                    fn([{
                            group: 'Test',
                            id: '0',
                            title: 'Test',
                            widgets: [{
                                    col: 1,
                                    id: 'w1',
                                    include: 'plugins/wiki/html/projectsCommitPanel.html',
                                    path: $location.path(),
                                    row: 1,
                                    search: $location.search(),
                                    size_x: 3,
                                    size_y: 2,
                                    title: 'Commits'
                                }]
                        }]);
                }, 1000);
            },
            getDashboard: function (id, fn) {
                $scope.$watch('model.fetched', function (fetched) {
                    if (!fetched) {
                        return;
                    }
                    $scope.$watch('selectedBuild', function (build) {
                        if (!build) {
                            return;
                        }
                        $scope.$watch('entity', function (entity) {
                            if (!entity) {
                                return;
                            }
                            var model = $scope.$eval('model');
                            console.log("Build: ", build);
                            console.log("Model: ", model);
                            console.log("Entity: ", entity);
                            setTimeout(function () {
                                var search = {
                                    projectId: $scope.projectId,
                                    namespace: $scope.namespace,
                                    owner: $scope.owner,
                                    branch: $scope.branch,
                                    job: build.$jobId,
                                    id: $scope.projectId,
                                    build: build.id
                                };
                                var dashboard = {
                                    group: 'Test',
                                    id: '0',
                                    title: 'Test',
                                    widgets: [
                                        {
                                            col: 1,
                                            row: 3,
                                            id: 'w3',
                                            include: 'plugins/kubernetes/html/pendingPipelines.html',
                                            path: $location.path(),
                                            search: search,
                                            size_x: 9,
                                            size_y: 1,
                                            title: 'Pipelines'
                                        },
                                        {
                                            col: 1,
                                            row: 4,
                                            id: 'w2',
                                            include: 'plugins/developer/html/logPanel.html',
                                            path: $location.path(),
                                            search: search,
                                            size_x: 4,
                                            size_y: 2,
                                            title: 'Logs for job: ' + build.$jobId + ' build: ' + build.id
                                        },
                                        {
                                            col: 5,
                                            id: 'w4',
                                            include: 'plugins/wiki/html/projectCommitsPanel.html',
                                            path: $location.path(),
                                            row: 4,
                                            search: search,
                                            size_x: 5,
                                            size_y: 2,
                                            title: 'Commits'
                                        }
                                    ]
                                };
                                if (entity.environments.length) {
                                    var colPosition = 1;
                                    _.forEach(entity.environments, function (env, index) {
                                        var s = _.extend({
                                            label: env.label
                                        }, search);
                                        dashboard.widgets.push({
                                            id: env.url,
                                            title: 'Environment: ' + env.label,
                                            size_x: 3,
                                            size_y: 2,
                                            col: colPosition,
                                            row: 1,
                                            include: 'plugins/developer/html/environmentPanel.html',
                                            path: $location.path(),
                                            search: s
                                        });
                                        colPosition = colPosition + 3;
                                    });
                                }
                                fn(dashboard);
                            }, 1);
                        });
                    });
                });
            },
            createDashboard: function (options) {
            }
        };
    }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki.ViewController = Wiki._module.controller("Wiki.ViewController", ["$scope", "$location", "$routeParams", "$route", "$http", "$timeout", "marked", "fileExtensionTypeRegistry", "$compile", "$templateCache", "localStorage", "$interpolate", "$dialog", function ($scope, $location, $routeParams, $route, $http, $timeout, marked, fileExtensionTypeRegistry, $compile, $templateCache, localStorage, $interpolate, $dialog) {
            $scope.name = "WikiViewController";
            var isFmc = false;
            Wiki.initScope($scope, $routeParams, $location);
            var wikiRepository = $scope.wikiRepository;
            SelectionHelpers.decorate($scope);
            $scope.fabricTopLevel = "fabric/profiles/";
            $scope.versionId = $scope.branch;
            $scope.paneTemplate = '';
            $scope.profileId = "";
            $scope.showProfileHeader = false;
            $scope.showAppHeader = false;
            $scope.operationCounter = 1;
            $scope.renameDialog = null;
            $scope.moveDialog = null;
            $scope.deleteDialog = null;
            $scope.isFile = false;
            $scope.rename = {
                newFileName: ""
            };
            $scope.move = {
                moveFolder: ""
            };
            $scope.ViewMode = Wiki.ViewMode;
            Core.bindModelToSearchParam($scope, $location, "searchText", "q", "");
            StorageHelpers.bindModelToLocalStorage({
                $scope: $scope,
                $location: $location,
                localStorage: localStorage,
                modelName: 'mode',
                paramName: 'wikiViewMode',
                initialValue: Wiki.ViewMode.Icon,
                to: Core.numberToString,
                from: Core.parseIntValue
            });
            Core.reloadWhenParametersChange($route, $scope, $location, ['wikiViewMode']);
            $scope.gridOptions = {
                data: 'children',
                displayFooter: false,
                selectedItems: [],
                showSelectionCheckbox: true,
                enableSorting: false,
                useExternalSorting: true,
                columnDefs: [
                    {
                        field: 'name',
                        displayName: 'Name',
                        cellTemplate: $templateCache.get('fileCellTemplate.html'),
                        headerCellTemplate: $templateCache.get('fileColumnTemplate.html')
                    }
                ]
            };
            $scope.$on('Wiki.SetViewMode', function ($event, mode) {
                $scope.mode = mode;
                switch (mode) {
                    case Wiki.ViewMode.List:
                        Wiki.log.debug("List view mode");
                        break;
                    case Wiki.ViewMode.Icon:
                        Wiki.log.debug("Icon view mode");
                        break;
                    default:
                        $scope.mode = Wiki.ViewMode.List;
                        Wiki.log.debug("Defaulting to list view mode");
                        break;
                }
            });
            $scope.childActions = [];
            var maybeUpdateView = Core.throttled(updateView, 1000);
            $scope.marked = function (text) {
                if (text) {
                    return marked(text);
                }
                else {
                    return '';
                }
            };
            $scope.$on('wikiBranchesUpdated', function () {
                updateView();
            });
            $scope.createDashboardLink = function () {
                var href = '/wiki/branch/:branch/view/*page';
                var page = $routeParams['page'];
                var title = page ? page.split("/").last() : null;
                var size = angular.toJson({
                    size_x: 2,
                    size_y: 2
                });
                var answer = "#/dashboard/add?tab=dashboard" +
                    "&href=" + encodeURIComponent(href) +
                    "&size=" + encodeURIComponent(size) +
                    "&routeParams=" + encodeURIComponent(angular.toJson($routeParams));
                if (title) {
                    answer += "&title=" + encodeURIComponent(title);
                }
                return answer;
            };
            $scope.displayClass = function () {
                if (!$scope.children || $scope.children.length === 0) {
                    return "";
                }
                return "span9";
            };
            $scope.parentLink = function () {
                var start = Wiki.startLink($scope);
                var prefix = start + "/view";
                var parts = $scope.pageId.split("/");
                var path = "/" + parts.first(parts.length - 1).join("/");
                return Core.createHref($location, prefix + path, []);
            };
            $scope.childLink = function (child) {
                var start = Wiki.startLink($scope);
                var prefix = start + "/view";
                var postFix = "";
                var path = Wiki.encodePath(child.path);
                if (child.directory) {
                    var formPath = path + ".form";
                    var children = $scope.children;
                    if (children) {
                        var formFile = children.find(function (child) {
                            return child['path'] === formPath;
                        });
                        if (formFile) {
                            prefix = start + "/formTable";
                            postFix = "?form=" + formPath;
                        }
                    }
                }
                else {
                    var xmlNamespaces = child.xml_namespaces || child.xmlNamespaces;
                    if (xmlNamespaces && xmlNamespaces.length) {
                        if (_.some(xmlNamespaces, function (ns) { return _.some(Wiki.camelNamespaces, ns); })) {
                            if (Wiki.useCamelCanvasByDefault) {
                                prefix = start + "/camel/canvas";
                            }
                            else {
                                prefix = start + "/camel/properties";
                            }
                        }
                        else if (_.some(xmlNamespaces, function (ns) { return _.some(Wiki.dozerNamespaces, ns); })) {
                            prefix = start + "/dozer/mappings";
                        }
                        else {
                            Wiki.log.debug("child " + path + " has namespaces " + xmlNamespaces);
                        }
                    }
                    if (_.endsWith(child.path, ".form")) {
                        postFix = "?form=/";
                    }
                    else if (Wiki.isIndexPage(child.path)) {
                        prefix = start + "/book";
                    }
                }
                return Core.createHref($location, UrlHelpers.join(prefix, path) + postFix, ["form"]);
            };
            $scope.fileName = function (entity) {
                return Wiki.hideFileNameExtensions(entity.displayName || entity.name);
            };
            $scope.fileClass = function (entity) {
                if (entity.name.indexOf(".profile") > -1) {
                    return "green";
                }
                return "";
            };
            $scope.fileIconHtml = function (entity) { return Wiki.fileIconHtml(entity, $scope); };
            $scope.format = Wiki.fileFormat($scope.pageId, fileExtensionTypeRegistry);
            var options = {
                readOnly: true,
                mode: {
                    name: $scope.format
                }
            };
            $scope.codeMirrorOptions = CodeEditor.createEditorSettings(options);
            $scope.editLink = function () {
                var pageName = ($scope.directory) ? $scope.readMePath : $scope.pageId;
                return (pageName) ? Wiki.editLink($scope, pageName, $location) : null;
            };
            $scope.forgeLink = function () {
                return Forge.projectCommandsLink($scope.namespace, $scope.projectId);
            };
            $scope.camelLink = function () {
                return Forge.projectCamelOverviewLink($scope.namespace, $scope.projectId);
            };
            $scope.branchLink = function (branch) {
                if (branch) {
                    return Wiki.branchLink($scope.projectId, $scope.branch, $scope.pageId, $location);
                }
                return null;
            };
            $scope.historyLink = "#/wiki" + ($scope.branch ? "/branch/" + $scope.branch : "") + "/history/" + $scope.pageId;
            $scope.$watch('workspace.tree', function () {
                if (!$scope.git) {
                    setTimeout(maybeUpdateView, 50);
                }
            });
            $scope.$on("$routeChangeSuccess", function (event, current, previous) {
                setTimeout(maybeUpdateView, 50);
            });
            $scope.openDeleteDialog = function () {
                if ($scope.gridOptions.selectedItems.length) {
                    $scope.selectedFileHtml = "<ul>" + $scope.gridOptions.selectedItems.map(function (file) { return "<li>" + file.name + "</li>"; }).sort().join("") + "</ul>";
                    if ($scope.gridOptions.selectedItems.find(function (file) { return file.name.endsWith(".profile"); })) {
                        $scope.deleteWarning = "You are about to delete document(s) which represent Fabric8 profile(s). This really can't be undone! Wiki operations are low level and may lead to non-functional state of Fabric.";
                    }
                    else {
                        $scope.deleteWarning = null;
                    }
                    $scope.deleteDialog = Wiki.getDeleteDialog($dialog, {
                        callbacks: function () { return $scope.deleteAndCloseDialog; },
                        selectedFileHtml: function () { return $scope.selectedFileHtml; },
                        warning: function () { return $scope.deleteWarning; }
                    });
                    $scope.deleteDialog.open();
                }
                else {
                    Wiki.log.debug("No items selected right now! " + $scope.gridOptions.selectedItems);
                }
            };
            $scope.deleteAndCloseDialog = function () {
                var files = $scope.gridOptions.selectedItems;
                var fileCount = files.length;
                Wiki.log.debug("Deleting selection: " + files);
                var pathsToDelete = [];
                angular.forEach(files, function (file, idx) {
                    var path = UrlHelpers.join($scope.pageId, file.name);
                    pathsToDelete.push(path);
                });
                Wiki.log.debug("About to delete " + pathsToDelete);
                $scope.git = wikiRepository.removePages($scope.branch, pathsToDelete, null, function (result) {
                    $scope.gridOptions.selectedItems = [];
                    var message = Core.maybePlural(fileCount, "document");
                    Core.notification("success", "Deleted " + message);
                    Core.$apply($scope);
                    updateView();
                });
                $scope.deleteDialog.close();
            };
            $scope.$watch("rename.newFileName", function () {
                var path = getRenameFilePath();
                if ($scope.originalRenameFilePath === path) {
                    $scope.fileExists = { exists: false, name: null };
                }
                else {
                    checkFileExists(path);
                }
            });
            $scope.renameAndCloseDialog = function () {
                if ($scope.gridOptions.selectedItems.length) {
                    var selected = $scope.gridOptions.selectedItems[0];
                    var newPath = getRenameFilePath();
                    if (selected && newPath) {
                        var oldName = selected.name;
                        var newName = Wiki.fileName(newPath);
                        var oldPath = UrlHelpers.join($scope.pageId, oldName);
                        Wiki.log.debug("About to rename file " + oldPath + " to " + newPath);
                        $scope.git = wikiRepository.rename($scope.branch, oldPath, newPath, null, function (result) {
                            Core.notification("success", "Renamed file to  " + newName);
                            $scope.gridOptions.selectedItems.splice(0, 1);
                            $scope.renameDialog.close();
                            Core.$apply($scope);
                            updateView();
                        });
                    }
                }
                $scope.renameDialog.close();
            };
            $scope.openRenameDialog = function () {
                var name = null;
                if ($scope.gridOptions.selectedItems.length) {
                    var selected = $scope.gridOptions.selectedItems[0];
                    name = selected.name;
                }
                if (name) {
                    $scope.rename.newFileName = name;
                    $scope.originalRenameFilePath = getRenameFilePath();
                    $scope.renameDialog = Wiki.getRenameDialog($dialog, {
                        rename: function () { return $scope.rename; },
                        fileExists: function () { return $scope.fileExists; },
                        fileName: function () { return $scope.fileName; },
                        callbacks: function () { return $scope.renameAndCloseDialog; }
                    });
                    $scope.renameDialog.open();
                    $timeout(function () {
                        $('#renameFileName').focus();
                    }, 50);
                }
                else {
                    Wiki.log.debug("No items selected right now! " + $scope.gridOptions.selectedItems);
                }
            };
            $scope.moveAndCloseDialog = function () {
                var files = $scope.gridOptions.selectedItems;
                var fileCount = files.length;
                var moveFolder = $scope.move.moveFolder;
                var oldFolder = $scope.pageId;
                if (moveFolder && fileCount && moveFolder !== oldFolder) {
                    Wiki.log.debug("Moving " + fileCount + " file(s) to " + moveFolder);
                    angular.forEach(files, function (file, idx) {
                        var oldPath = oldFolder + "/" + file.name;
                        var newPath = moveFolder + "/" + file.name;
                        Wiki.log.debug("About to move " + oldPath + " to " + newPath);
                        $scope.git = wikiRepository.rename($scope.branch, oldPath, newPath, null, function (result) {
                            if (idx + 1 === fileCount) {
                                $scope.gridOptions.selectedItems.splice(0, fileCount);
                                var message = Core.maybePlural(fileCount, "document");
                                Core.notification("success", "Moved " + message + " to " + newPath);
                                $scope.moveDialog.close();
                                Core.$apply($scope);
                                updateView();
                            }
                        });
                    });
                }
                $scope.moveDialog.close();
            };
            $scope.folderNames = function (text) {
                return wikiRepository.completePath($scope.branch, text, true, null);
            };
            $scope.openMoveDialog = function () {
                if ($scope.gridOptions.selectedItems.length) {
                    $scope.move.moveFolder = $scope.pageId;
                    $scope.moveDialog = Wiki.getMoveDialog($dialog, {
                        move: function () { return $scope.move; },
                        folderNames: function () { return $scope.folderNames; },
                        callbacks: function () { return $scope.moveAndCloseDialog; }
                    });
                    $scope.moveDialog.open();
                    $timeout(function () {
                        $('#moveFolder').focus();
                    }, 50);
                }
                else {
                    Wiki.log.debug("No items selected right now! " + $scope.gridOptions.selectedItems);
                }
            };
            setTimeout(maybeUpdateView, 50);
            function isDiffView() {
                return $routeParams["diffObjectId1"] || $routeParams["diffObjectId2"] ? true : false;
            }
            function updateView() {
                var jolokia = null;
                if (isDiffView()) {
                    var baseObjectId = $routeParams["diffObjectId2"];
                    $scope.git = wikiRepository.diff($scope.objectId, baseObjectId, $scope.pageId, onFileDetails);
                }
                else {
                    $scope.git = wikiRepository.getPage($scope.branch, $scope.pageId, $scope.objectId, onFileDetails);
                }
                Wiki.loadBranches(jolokia, wikiRepository, $scope, isFmc);
            }
            $scope.updateView = updateView;
            function viewContents(pageName, details) {
                var contents = details.text;
                $scope.sourceView = null;
                var format = null;
                if (isDiffView()) {
                    format = "diff";
                }
                else {
                    format = Wiki.fileFormat(pageName, fileExtensionTypeRegistry) || $scope.format;
                }
                Wiki.log.debug("File format: ", format);
                switch (format) {
                    case "image":
                        $scope.html = $interpolate($templateCache.get("imageTemplate.html"))({
                            imageUrl: Wiki.gitRestURL($scope, $scope.pageId, $scope.branch),
                            mediaType: Wiki.fileExtension($scope.pageId).toLowerCase() === 'svg' ? 'image/svg+xml' : 'application/octet-stream'
                        });
                        break;
                    case "markdown":
                        var renderer = new marked.Renderer();
                        renderer.image = function (href, title, text) {
                            var uri = new URI(href);
                            if (uri.is('relative')) {
                                if (_.startsWith(uri.path(), '/')) {
                                    uri.segment(['profiles'].concat(uri.segment()));
                                }
                                else {
                                    uri = uri.absoluteTo(new URI(details.path).filename(''));
                                }
                                return '<img http-src="' + Wiki.gitRestURL($scope, uri.normalize().toString()) + '" alt="' + (title ? title : text) + '" />';
                            }
                            else {
                                return '<img src="' + href + '" alt="' + (title ? title : text) + '" />';
                            }
                        };
                        $scope.html = contents ? marked(contents, { renderer: renderer }) : "";
                        break;
                    case "javascript":
                        var form = null;
                        form = $location.search()["form"];
                        $scope.source = contents;
                        $scope.form = form;
                        if (form) {
                            $scope.sourceView = null;
                            $scope.git = wikiRepository.getPage($scope.branch, form, $scope.objectId, function (details) {
                                onFormSchema(Wiki.parseJson(details.text));
                            });
                        }
                        else {
                            $scope.sourceView = "plugins/wiki/html/sourceView.html";
                        }
                        break;
                    default:
                        $scope.html = null;
                        $scope.source = contents;
                        $scope.sourceView = "plugins/wiki/html/sourceView.html";
                }
                Core.$apply($scope);
            }
            function onFormSchema(json) {
                $scope.formDefinition = json;
                if ($scope.source) {
                    $scope.formEntity = Wiki.parseJson($scope.source);
                }
                $scope.sourceView = "plugins/wiki/html/formView.html";
                Core.$apply($scope);
            }
            function onFileDetails(details) {
                $scope.directory = details.directory;
                $scope.fileDetails = details;
                if (details && details.format) {
                    $scope.format = details.format;
                }
                else {
                    $scope.format = Wiki.fileFormat($scope.pageId, fileExtensionTypeRegistry);
                }
                $scope.codeMirrorOptions.mode.name = $scope.format;
                $scope.children = null;
                if (details.directory) {
                    var directories = _.filter(details.children, function (dir) { return dir.directory; });
                    var profiles = _.filter(details.children, function (dir) { return false; });
                    var files = _.filter(details.children, function (file) { return !file.directory; });
                    directories = _.sortBy(directories, function (dir) { return dir.name; });
                    profiles = _.sortBy(profiles, function (dir) { return dir.name; });
                    files = _.sortBy(_.sortBy(files, function (file) { return file.name; }), function (file) { return _.last(file.name.split('.')); });
                    $scope.children = [].concat(directories, profiles, files).map(function (file) {
                        file.branch = $scope.branch;
                        file.fileName = file.name;
                        if (file.directory) {
                            file.fileName += ".zip";
                        }
                        file.downloadURL = Wiki.gitRestURL($scope, file.path);
                        return file;
                    });
                }
                $scope.html = null;
                $scope.source = null;
                $scope.readMePath = null;
                $scope.isFile = false;
                if ($scope.children) {
                    $scope.$broadcast('pane.open');
                    var item = $scope.children.find(function (info) {
                        var name = (info.name || "").toLowerCase();
                        var ext = Wiki.fileExtension(name);
                        return name && ext && ((name.startsWith("readme.") || name === "readme") || (name.startsWith("index.") || name === "index"));
                    });
                    if (item) {
                        var pageName = item.path;
                        $scope.readMePath = pageName;
                        wikiRepository.getPage($scope.branch, pageName, $scope.objectId, function (readmeDetails) {
                            viewContents(pageName, readmeDetails);
                        });
                    }
                    var kubernetesJson = $scope.children.find(function (child) {
                        var name = (child.name || "").toLowerCase();
                        var ext = Wiki.fileExtension(name);
                        return name && ext && name.startsWith("kubernetes") && ext === "json";
                    });
                    if (kubernetesJson) {
                        wikiRepository.getPage($scope.branch, kubernetesJson.path, undefined, function (json) {
                            if (json && json.text) {
                                try {
                                    $scope.kubernetesJson = angular.fromJson(json.text);
                                }
                                catch (e) {
                                    $scope.kubernetesJson = {
                                        errorParsing: true,
                                        error: e
                                    };
                                }
                                $scope.showAppHeader = true;
                                Core.$apply($scope);
                            }
                        });
                    }
                    $scope.$broadcast('Wiki.ViewPage.Children', $scope.pageId, $scope.children);
                }
                else {
                    $scope.$broadcast('pane.close');
                    var pageName = $scope.pageId;
                    viewContents(pageName, details);
                    $scope.isFile = true;
                }
                Core.$apply($scope);
            }
            function checkFileExists(path) {
                $scope.operationCounter += 1;
                var counter = $scope.operationCounter;
                if (path) {
                    wikiRepository.exists($scope.branch, path, function (result) {
                        if ($scope.operationCounter === counter) {
                            Wiki.log.debug("checkFileExists for path " + path + " got result " + result);
                            $scope.fileExists.exists = result ? true : false;
                            $scope.fileExists.name = result ? result.name : null;
                            Core.$apply($scope);
                        }
                        else {
                        }
                    });
                }
            }
            $scope.getContents = function (filename, cb) {
                var pageId = filename;
                if ($scope.directory) {
                    pageId = $scope.pageId + '/' + filename;
                }
                else {
                    var pathParts = $scope.pageId.split('/');
                    pathParts = pathParts.remove(pathParts.last());
                    pathParts.push(filename);
                    pageId = pathParts.join('/');
                }
                Wiki.log.debug("pageId: ", $scope.pageId);
                Wiki.log.debug("branch: ", $scope.branch);
                Wiki.log.debug("filename: ", filename);
                Wiki.log.debug("using pageId: ", pageId);
                wikiRepository.getPage($scope.branch, pageId, undefined, function (data) {
                    cb(data.text);
                });
            };
            function getRenameFilePath() {
                var newFileName = $scope.rename.newFileName;
                return ($scope.pageId && newFileName) ? UrlHelpers.join($scope.pageId, newFileName) : null;
            }
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    function getRenameDialog($dialog, $scope) {
        return $dialog.dialog({
            resolve: $scope,
            templateUrl: 'plugins/wiki/html/modal/renameDialog.html',
            controller: ["$scope", "dialog", "callbacks", "rename", "fileExists", "fileName", function ($scope, dialog, callbacks, rename, fileExists, fileName) {
                    $scope.rename = rename;
                    $scope.fileExists = fileExists;
                    $scope.fileName = fileName;
                    $scope.close = function (result) {
                        dialog.close();
                    };
                    $scope.renameAndCloseDialog = callbacks;
                }]
        });
    }
    Wiki.getRenameDialog = getRenameDialog;
    function getMoveDialog($dialog, $scope) {
        return $dialog.dialog({
            resolve: $scope,
            templateUrl: 'plugins/wiki/html/modal/moveDialog.html',
            controller: ["$scope", "dialog", "callbacks", "move", "folderNames", function ($scope, dialog, callbacks, move, folderNames) {
                    $scope.move = move;
                    $scope.folderNames = folderNames;
                    $scope.close = function (result) {
                        dialog.close();
                    };
                    $scope.moveAndCloseDialog = callbacks;
                }]
        });
    }
    Wiki.getMoveDialog = getMoveDialog;
    function getDeleteDialog($dialog, $scope) {
        return $dialog.dialog({
            resolve: $scope,
            templateUrl: 'plugins/wiki/html/modal/deleteDialog.html',
            controller: ["$scope", "dialog", "callbacks", "selectedFileHtml", "warning", function ($scope, dialog, callbacks, selectedFileHtml, warning) {
                    $scope.selectedFileHtml = selectedFileHtml;
                    $scope.close = function (result) {
                        dialog.close();
                    };
                    $scope.deleteAndCloseDialog = callbacks;
                    $scope.warning = warning;
                }]
        });
    }
    Wiki.getDeleteDialog = getDeleteDialog;
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki._module.directive('wikiHrefAdjuster', ["$location", function ($location) {
            return {
                restrict: 'A',
                link: function ($scope, $element, $attr) {
                    $element.bind('DOMNodeInserted', function (event) {
                        var ays = $element.find('a');
                        angular.forEach(ays, function (a) {
                            if (a.hasAttribute('no-adjust')) {
                                return;
                            }
                            a = $(a);
                            var href = (a.attr('href') || "").trim();
                            if (href) {
                                var fileExtension = a.attr('file-extension');
                                var newValue = Wiki.adjustHref($scope, $location, href, fileExtension);
                                if (newValue) {
                                    a.attr('href', newValue);
                                }
                            }
                        });
                        var imgs = $element.find('img');
                        angular.forEach(imgs, function (a) {
                            if (a.hasAttribute('no-adjust')) {
                                return;
                            }
                            a = $(a);
                            var href = (a.attr('src') || "").trim();
                            if (href) {
                                if (href.startsWith("/")) {
                                    href = Core.url(href);
                                    a.attr('src', href);
                                    a.attr('no-adjust', 'true');
                                }
                            }
                        });
                    });
                }
            };
        }]);
    Wiki._module.directive('wikiTitleLinker', ["$location", function ($location) {
            return {
                restrict: 'A',
                link: function ($scope, $element, $attr) {
                    var loaded = false;
                    function offsetTop(elements) {
                        if (elements) {
                            var offset = elements.offset();
                            if (offset) {
                                return offset.top;
                            }
                        }
                        return 0;
                    }
                    function scrollToHash() {
                        var answer = false;
                        var id = $location.search()["hash"];
                        return scrollToId(id);
                    }
                    function scrollToId(id) {
                        var answer = false;
                        var id = $location.search()["hash"];
                        if (id) {
                            var selector = 'a[name="' + id + '"]';
                            var targetElements = $element.find(selector);
                            if (targetElements && targetElements.length) {
                                var scrollDuration = 1;
                                var delta = offsetTop($($element));
                                var top = offsetTop(targetElements) - delta;
                                if (top < 0) {
                                    top = 0;
                                }
                                $('body,html').animate({
                                    scrollTop: top
                                }, scrollDuration);
                                answer = true;
                            }
                            else {
                            }
                        }
                        return answer;
                    }
                    function addLinks(event) {
                        var headings = $element.find('h1,h2,h3,h4,h5,h6,h7');
                        var updated = false;
                        angular.forEach(headings, function (he) {
                            var h1 = $(he);
                            var a = h1.parent("a");
                            if (!a || !a.length) {
                                var text = h1.text();
                                if (text) {
                                    var target = text.replace(/ /g, "-");
                                    var pathWithHash = "#" + $location.path() + "?hash=" + target;
                                    var link = Core.createHref($location, pathWithHash, ['hash']);
                                    var newA = $('<a name="' + target + '" href="' + link + '" ng-click="onLinkClick()"></a>');
                                    newA.on("click", function () {
                                        setTimeout(function () {
                                            if (scrollToId(target)) {
                                            }
                                        }, 50);
                                    });
                                    newA.insertBefore(h1);
                                    h1.detach();
                                    newA.append(h1);
                                    updated = true;
                                }
                            }
                        });
                        if (updated && !loaded) {
                            setTimeout(function () {
                                if (scrollToHash()) {
                                    loaded = true;
                                }
                            }, 50);
                        }
                    }
                    function onEventInserted(event) {
                        $element.unbind('DOMNodeInserted', onEventInserted);
                        addLinks(event);
                        $element.bind('DOMNodeInserted', onEventInserted);
                    }
                    $element.bind('DOMNodeInserted', onEventInserted);
                }
            };
        }]);
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Developer.customProjectSubTabFactories.push(function (context) {
        var projectLink = context.projectLink;
        var wikiLink = null;
        if (projectLink) {
            wikiLink = UrlHelpers.join(projectLink, "wiki", "view");
        }
        var projectId = context.projectName;
        var ns = context.namespace;
        var camelLink = Forge.projectCamelOverviewLink(ns, projectId);
        var funktionLink = Forge.projectFunktionOverviewLink(ns, projectId);
        var forgeLink = Forge.projectCommandsLink(ns, projectId);
        if (context.$scope) {
            Forge.updateForgeProject(context.$scope);
        }
        return [{
                isValid: function () { return wikiLink && Developer.forgeReadyLink(); },
                href: wikiLink,
                label: "Source",
                class: "fa fa-code-fork",
                isActive: function (subTab, path) {
                    var rootPath = subTab.href.replace(/\/view/, '');
                    return _.startsWith(path, rootPath);
                },
                title: "Browse the source code of this project"
            },
            {
                isValid: function () { return funktionLink && Developer.forgeReadyLink() && Forge.forgeProject().hasPerspective("funktion"); },
                label: "Funktion",
                class: "fa fa-codepen",
                href: funktionLink,
                title: "View the Funktion perspective for this project",
                isActive: function (subTab, path) {
                    if (path.search(/forge\/funktion/) !== -1) {
                        return true;
                    }
                    return false;
                }
            },
            {
                isValid: function () { return camelLink && Developer.forgeReadyLink() && Forge.forgeProject().hasPerspective("camel"); },
                label: "Camel",
                icon: "img/icons/camel.svg",
                href: camelLink,
                title: "View the camel perspective for this project",
                isActive: function (subTab, path) {
                    if (path.search(/forge\/camel/) !== -1) {
                        return true;
                    }
                    if (path.search(/forge\/command\/camel/) !== -1) {
                        return true;
                    }
                    return false;
                }
            },
            {
                isValid: function () { return forgeLink && Developer.forgeReadyLink() && Forge.forgeProject().hasBuilder("maven"); },
                label: "Forge",
                href: forgeLink,
                class: "fa fa-wrench",
                title: "Run a JBoss Forge command on this project",
                isActive: function (subTab, path) {
                    if (path.search(/forge\/command/) !== -1) {
                        return true;
                    }
                    return false;
                }
            }];
    });
    function createSourceBreadcrumbs($scope) {
        var sourceLink = $scope.$viewLink || UrlHelpers.join(Wiki.startLink($scope), "view");
        return [
            {
                label: "Source",
                class: "fa fa-code-fork",
                href: sourceLink,
                title: "Browse the source code of this project"
            }
        ];
    }
    Wiki.createSourceBreadcrumbs = createSourceBreadcrumbs;
    function createEditingBreadcrumb($scope) {
        return {
            label: "Editing",
            title: "Editing this file"
        };
    }
    Wiki.createEditingBreadcrumb = createEditingBreadcrumb;
})(Wiki || (Wiki = {}));

var Wiki;
(function (Wiki) {
    Wiki.TopLevelController = Wiki._module.controller("Wiki.TopLevelController", ['$scope', '$route', '$routeParams', function ($scope, $route, $routeParams) {
        }]);
})(Wiki || (Wiki = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,

angular.module("fabric8-console-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/dozer/html/dozerPropertiesEdit.html","<div>\n  <div hawtio-form-2=\"nodeModel\" name=\"formEditor\" entity=\'dozerEntity\' data=\'nodeModel\' schema=\"schema\">\n  </div>\n  <pre>{{nodeModel | json}}</pre>\n  <pre>{{dozerEntity | json}}</pre>\n</div>\n");
$templateCache.put("plugins/dozer/html/mapping.html","<div ng-controller=\"Dozer.MappingController\">\n  <!--\n  <div class=\"logbar\" ng-controller=\"Wiki.NavBarController\">\n    <div class=\"wiki logbar-container\">\n      <ul class=\"nav nav-tabs connected\">\n        <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href)}\'>\n          <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n        </li>\n\n        <li class=\"pull-right\">\n          <a href=\"\" id=\"saveButton\" ng-disabled=\"!isValid()\" ng-click=\"save()\"\n            ng-class=\"{\'nav-primary\' : modified}\"\n            title=\"Saves the Mappings document\">\n            <i class=\"icon-save\"></i> Save</a>\n        </li>\n        <li class=\"pull-right\">\n          <a href=\"\" id=\"cancelButton\" ng-click=\"cancel()\"\n            title=\"Discards any updates\">\n            <i class=\"icon-remove\"></i> Cancel</a>\n        </li>\n\n        <li class=\"pull-right\">\n          <a ng-href=\"{{sourceLink()}}\" title=\"View source code\"\n            data-placement=\"bottom\">\n            <i class=\"icon-file-alt\"></i> Source</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n  -->\n\n  <div class=\"row\">\n    <div class=\"col-md-4 text-center\">\n      <a class=\"btn btn-default\" href=\'\' title=\"Add a new mapping between two classes\" ng-click=\"addMapping()\" data-placement=\"bottom\">\n        <i class=\"fa fa-plus\"></i> Class</a>\n      <a class=\"btn btn-default\" href=\'\' title=\"Add new mappings between fields in these classes\" ng-disable=\"!selectedMapping\" ng-click=\"addField()\" data-placement=\"bottom\">\n        <i class=\"fa fa-plus\"></i> Field</a>\n      <a class=\"btn btn-danger\" href=\'\' title=\"Deletes the selected item\" ng-disabled=\"!canDelete()\" ng-click=\"deleteDialog = true\" data-placement=\"bottom\">\n        <i class=\"fa fa-remove\"></i> Delete</a>\n    </div>\n    <div class=\"col-md-8\"></div>\n  </div>\n\n  <div class=\"row align-center\">\n    <div id=\"tree-container\" class=\"col-md-8\">\n      <div class=\"align-left\" hawtio-tree=\"mappingTree\" onselect=\"onNodeSelect\" onDragEnter=\"onNodeDragEnter\" onDrop=\"onNodeDrop\"\n        onRoot=\"onRootTreeNode\"\n        hideRoot=\"true\" relativeIconPaths=\"true\"></div>\n    </div>\n  </div>\n  <div class=\"row align-center\">\n    <div class=\"col-md-8 align-left\">\n      <div ng-include=\"propertiesTemplate\"></div>\n    </div>\n  </div>\n\n  <div hawtio-confirm-dialog=\"deleteDialog\"\n        ok-button-text=\"Delete\"\n        on-ok=\"removeNode()\">\n    <div class=\"dialog-body\">\n      <p>You are about to delete the selected {{selectedDescription}}\n      </p>\n      <p>This operation cannot be undone so please be careful.</p>\n    </div>\n  </div>\n\n  <div class=\"modal-large\">\n    <div modal=\"addDialog.show\" close=\"addDialog.close()\" ng-options=\"addDialog.options\">\n      <form class=\"form-horizontal no-bottom-margin\" ng-submit=\"addAndCloseDialog()\">\n        <div class=\"modal-header\"><h4>Add Fields</h4></div>\n        <div class=\"modal-body\">\n          <table class=\"\">\n            <tr>\n              <th>From</th>\n              <th></th>\n              <th>To</th>\n              <th>Exclude</th>\n            </tr>\n            <tr ng-repeat=\"unmapped in unmappedFields\">\n              <td>\n                {{unmapped.fromField}}\n              </td>\n              <td>-></td>\n              <td>\n                <input type=\"text\" ng-model=\"unmapped.toField\" ng-change=\"onUnmappedFieldChange(unmapped)\"\n                typeahead=\"title for title in toFieldNames($viewValue) | filter:$viewValue\" typeahead-editable=\'true\'\n                title=\"The field to map to\"/>\n              </td>\n              <td>\n                <input type=\"checkbox\" ng-model=\"unmapped.exclude\" ng-click=\"onUnmappedFieldChange(unmapped)\"\n                title=\"Whether or not the field should be excluded\"/>\n              </td>\n            </tr>\n          </table>\n        </div>\n        <div class=\"modal-footer\">\n          <input id=\"submit\" class=\"btn btn-primary add\" type=\"submit\" ng-disabled=\"!unmappedFieldsHasValid\"\n          value=\"Add\">\n          <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"addDialog.close()\">Cancel</button>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <!--\n  <div class=\"hero-unit\" ng-show=\"missingContainer\">\n    <p>You cannot edit the dozer mapping file as there is no container running for the profile <b>{{profileId}}</b>.</p>\n\n    <p>\n      <a class=\"btn btn-primary btn-large\"\n        href=\"#/fabric/containers/createContainer?profileIds={{profileId}}&versionId={{versionId}}\">\n        Create a container for: <strong>{{profileId}}</strong>\n      </a>\n    </p>\n  </div>\n  -->\n</div>\n");
$templateCache.put("plugins/dozer/html/mapping2.html","<div ng-controller=\"Dozer.NewMappingController\">\n  <div class=\"row\">\n    <div class=\"col-md-12 align-center\">\n      <select ng-model=\"selectedId\" ng-options=\"mapping.map_id for mapping in model.mappings track by mapping.map_id\"></select>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <h3>Source Object</h3>\n      <h4><img src=\"img/icons/dozer/class.gif\">{{mapping.class_a.value}}</h4>\n      <div ng-hide=\"classA\">\n        <div class=\"align-center\">\n          <div class=\"spinner spinner-lg\"></div>\n        </div>\n      </div>\n      <div ng-show=\"classA\">\n        <div ng-repeat=\"field in classA\" ng-show=\"field.readable\">\n          <span><img src=\"img/icons/dozer/attribute.gif\"> {{field.displayName}}</span> (<span ng-bind=\"field.typeName\"></span>)\n        </div>\n      </div>\n      <!--\n      <pre ng-show=\"classA\">\n        {{classA | json}}\n      </pre>\n      -->\n    </div>\n\n    <div class=\"col-md-4\">\n      <div ng-hide=\"mapping\">\n        <div class=\"align-center\">\n          <div class=\"spinner spinner-lg\"></div>\n        </div>\n      </div>\n      <div ng-show=\"mapping\">\n        <h3>Field Mappings</h3>\n        <div ng-repeat=\"field in mapping.fields\">\n          <span ng-bind=\"field.a.value\"></span>&nbsp;<i class=\"fa fa-arrow-right\"></i>&nbsp;<span ng-bind=\"field.b.value\"></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-4\">\n      <h3>Target Object</h3>\n      <h4><img src=\"img/icons/dozer/class.gif\">{{mapping.class_b.value}}</h4>\n      <div ng-hide=\"classB\">\n        <div class=\"align-center\">\n          <div class=\"spinner spinner-lg\"></div>\n        </div>\n      </div>\n      <div ng-show=\"classB\">\n        <div ng-repeat=\"field in classB\" ng-show=\"field.writeable\">\n          <span><img src=\"img/icons/dozer/attribute.gif\"> {{field.displayName}}</span> (<span ng-bind=\"field.typeName\"></span>)\n        </div>\n      </div>\n      <!--\n      <pre ng-show=\"classB\">\n        {{classB | json}}\n      </pre>\n      -->\n    </div>\n  </div>\n  <!--\n  <pre>{{mapping | json}}</pre>\n  <pre>{{model | json}}</pre>\n  -->\n</div>\n");
$templateCache.put("plugins/dozer/html/mappings.html","<div ng-controller=\"Dozer.MappingsController\">\n  <div hawtio-breadcrumbs></div>\n  <div hawtio-tabs></div>\n\n\n</div>\n");
$templateCache.put("plugins/forge/html/camelAddComponent.html","<div ng-controller=\"Forge.CamelAddComponentController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row select-table-filter\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"executing\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"alert alert-success\">\n          <span class=\"pficon pficon-info\"></span>\n          <strong>Adding component...</strong>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"spinner spinner-lg\"></div>\n    </div>\n  </div>\n\n  <div ng-show=\"fetched && !executing\">\n    <div class=\"row camel-component-filter\">\n      <div class=\"col-md-4\">\n        <h3>Camel Components</h3>\n      </div>\n      <div class=\"col-md-4\">\n        <div class=\"center-block\">\n          <label class=\"control-label\" for=\"tagFilter\">Filter: </label>&nbsp;\n          <select id=\"tagFilter\" name=\"singleSelect\" ng-model=\"filter\"\n                  ng-options=\"tag for tag in tags\"/>\n          &nbsp;\n          <button type=\"button\" class=\"close\" aria-label=\"Close\" ng-click=\"filter = null\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n      </div>\n      <div class=\"col-md-4\">\n        <a class=\"btn btn-primary pull-right\"\n           title=\"Add the selected component to the project\"\n           ng-disabled=\"!tileConfig.selectedItems.length\"\n           ng-click=\"addComponent()\"><i class=\"fa fa-plus\"></i> Add Component</a>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"col-sm-12 camel-component-chooser\">\n          <div class=\"col-md-12\">\n            <div pf-card-view class=\"small-cards\" id=\"camelComponentTiles\" config=\"tileConfig\" items=\"camelComponents\">\n              <div class=\"col-md-12\" title=\"{{item.description}}\">\n                <span>{{item.label}}</span>\n              </div>\n              <div class=\"col-md-12\" title=\"{{item.description}}\">\n                <img class=\"camel-icon\" src=\"{{item.$icon}}\">\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/forge/html/camelAddEndpoint.html","<div ng-controller=\"Forge.CamelAddComponentController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row select-table-filter\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <div ng-show=\"fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h2>Camel Components</h2>\n      </div>\n    </div>\n    <div class=\"row select-table-filter\">\n      <div class=\"col-md-12\">\n        <hawtio-filter ng-show=\"camelComponents.length > 1\"\n                       ng-model=\"tableConfig.filterOptions.filterText\"\n                       css-class=\"input-xxlarge\"\n                       placeholder=\"Filter components...\"></hawtio-filter>\n        <a class=\"btn btn-primary pull-right\"\n           title=\"Create an endpoint using the selected component\"\n           ng-disabled=\"!tableConfig.selectedItems.length\"\n           ng-click=\"addComponent()\"><i class=\"fa fa-plus\"></i> Create Endpoint</a>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <table class=\"table table-bordered table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n      </div>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/forge/html/camelNode.html","<div class=\"camel-node-container\" ng-controller=\"Forge.CamelNodeController\">\n  <div class=\"camel-node {{pattern}}\" title=\"{{description}}\">\n    <div ng-hide=\"node.children.length\">\n      <div title=\"{{description}}\">\n        <span ng-include=\"\'plugins/forge/html/camelNodeMenu.html\'\"></span>\n      </div>\n    </div>\n    <div class=\"expandable opened\" title=\"{{description}}\" ng-show=\"node.children.length\">\n      <span class=\"title\">\n        <i class=\"expandable-indicator\"></i>\n      </span>\n      &nbsp;\n      <span ng-include=\"\'plugins/forge/html/camelNodeMenu.html\'\"></span>\n      <div class=\"expandable-body\">\n        <div class=\"camel-node-list\">\n          <div ng-repeat=\"node in node.children | filter:filterContexts track by $index\"\n               ng-include=\"\'plugins/forge/html/camelNode.html\'\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/camelNodeMenu.html","<span class=\"dropdown\">\n  <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n    <img ng-show=\"icon\" src=\"{{icon}}\" class=\"camel-icon\"/>\n    {{label}}\n  </a>\n  <ul class=\"dropdown-menu\">\n    <li ng-show=\"addRouteEnabled\">\n      <a ng-click=\"addRoute()\" title=\"Add new route\"\n         data-placement=\"bottom\">\n        <i class=\"fa fa-plus\"></i> Add Route</a>\n    </li>\n    <li ng-show=\"addEndpointEnabled\">\n      <a ng-click=\"addEndpointNode()\" title=\"Add new endpoint\"\n         data-placement=\"bottom\">\n        <i class=\"fa fa-plus\"></i> Add Endpoint</a>\n    </li>\n    <li ng-show=\"addPatternEnabled\">\n      <a ng-click=\"addPatternNode()\" title=\"Add a new Enterprise Integration Pattern\"\n         data-placement=\"bottom\">\n        <i class=\"fa fa-plus\"></i> Add Pattern</a>\n    </li>\n    <li ng-show=\"editEnabled\">\n      <a ng-click=\"editNode()\" title=\"Edit this node\"\n         data-placement=\"bottom\">\n        <i class=\"fa fa-file-o\"></i> Edit</a>\n    </li>\n    <li>\n      <a ng-click=\"deletePrompt()\" title=\"Delete this node\"\n         data-placement=\"bottom\">\n        <i class=\"fa fa-remove\"></i> Delete</a>\n    </li>\n  </ul>\n</span>\n");
$templateCache.put("plugins/forge/html/camelOverview.html","<div ng-controller=\"Forge.CamelOverviewController\">\n  <script type=\"text/ng-template\" id=\"endpointFileName.html\">\n    <div class=\"ngCellText\">\n      <a href=\"{{row.entity.$fileLink}}\">\n        {{row.entity.fileName}}\n      </a>\n    </div>\n  </script>\n\n  <div hawtio-tabs></div>\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <div class=\"spinner spinner-lg\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <div ng-show=\"fetched\">\n    <div ng-hide=\"camelProject.$routeBuilderCount\">\n      <div ng-controller=\"Forge.CamelRoutesController\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <a class=\"btn btn-default pull-right\"\n               ng-show=\"contexts.length\"\n               ng-click=\"addRoute()\" title=\"Add new route\"\n               data-placement=\"bottom\">\n              <i class=\"fa fa-plus\"></i> Add Route</a>\n            <span class=\"pull-right\">&nbsp;</span>\n            <a class=\"btn btn-default pull-right\"\n               title=\"Add a new kind of Component to the project\"\n               href=\"{{addComponentLink}}\"><i class=\"fa fa-plus\"></i> Add Component</a>\n          </div>\n\n          <div class=\"camel-node-list\">\n            <div ng-repeat=\"node in contexts | filter:filterContexts track by $index\"\n                 ng-include=\"\'plugins/forge/html/camelNode.html\'\">\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div ng-show=\"camelProject.$routeBuilderCount\">\n      <div class=\"camel-tabs\">\n        <tabset>\n          <tab heading=\"Routes\">\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <a class=\"btn btn-default pull-right\"\n                   ng-show=\"camelProject.$routeBuilderCount\"\n                   title=\"Create a new RouteBuilder\"\n                   href=\"{{addRouteBuilderLink}}\"><i class=\"fa fa-plus\"></i> New RouteBuilder</a>\n                <span class=\"pull-right\">&nbsp;</span>\n                <a class=\"btn btn-default pull-right\"\n                   title=\"Add a new kind of Component to the project\"\n                   href=\"{{addComponentLink}}\"><i class=\"fa fa-plus\"></i> Add Component</a>\n              </div>\n            </div>\n\n            <div class=\"camel-routes-table\">\n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <table class=\"table table-bordered table-striped\" hawtio-simple-table=\"routeTable\"></table>\n                </div>\n              </div>\n            </div>\n          </tab>\n\n          <tab heading=\"Components\">\n            <div class=\"row select-table-filter\">\n              <div class=\"col-md-12\">\n                <hawtio-filter ng-show=\"camelProject.endpoints.length > 1\"\n                               ng-model=\"componentTable.filterOptions.filterText\"\n                               css-class=\"input-xxlarge\"\n                               placeholder=\"Filter components...\"></hawtio-filter>\n\n                <a class=\"btn btn-primary pull-right\"\n                   title=\"Create a new Endpoint for the selected Component\"\n                   ng-disabled=\"!componentTable.selectedItems.length\"\n                   ng-click=\"createEndpointForComponent()\"><i class=\"fa fa-plus\"></i> Create Endpoint</a>\n                <span class=\"pull-right\">&nbsp;</span>\n                <a class=\"btn btn-default pull-right\"\n                   title=\"Add a new kind of Component to the project\"\n                   href=\"{{addComponentLink}}\"><i class=\"fa fa-plus\"></i> Add Component</a>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-bordered table-striped\" hawtio-simple-table=\"componentTable\"></table>\n              </div>\n            </div>\n          </tab>\n\n          <tab heading=\"Endpoints\" ng-show=\"camelProject.$routeBuilderCount\">\n            <div class=\"row select-table-filter\">\n              <div class=\"col-md-12\">\n                <hawtio-filter ng-show=\"camelProject.endpoints.length > 1\"\n                               ng-model=\"tableConfig.filterOptions.filterText\"\n                               css-class=\"input-xxlarge\"\n                               placeholder=\"Filter endpoints...\"></hawtio-filter>\n\n                <span class=\"pull-right\">&nbsp;</span>\n                <a class=\"btn btn-primary pull-right\"\n                   title=\"Edit the endpoint details\"\n                   ng-disabled=\"!tableConfig.selectedItems.length\"\n                   ng-click=\"editEndpoint()\">\n                  <i class=\"fa fa-pencil-square-o\"></i> Edit Endpoint\n                </a>\n                <span class=\"pull-right\">&nbsp;</span>\n                <a class=\"btn btn-default pull-right\"\n                   title=\"Create a new Endpoint\"\n                   href=\"{{createEndpointLink}}\"><i class=\"fa fa-plus\"></i> Create Endpoint</a>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-bordered table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n              </div>\n            </div>\n          </tab>\n        </tabset>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/camelRoutes.html","<div ng-controller=\"Forge.CamelRoutesController\">\n  <div hawtio-tabs></div>\n\n<!--\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n-->\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row select-table-filter\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <div ng-show=\"fetched\">\n    <div ng-controller=\"Forge.CamelRoutesController\">\n      <div class=\"camel-node-list\">\n        <div ng-repeat=\"node in contexts | filter:filterContexts track by $index\"\n            ng-include=\"\'plugins/forge/html/camelNode.html\'\">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/command.html","<div ng-controller=\"Forge.CommandController\">\n  <script type=\"text/ng-template\" id=\"itemDescriptionTooltip.html\">\n    <p ng-bind-html=\"item.$description\"></p>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsPipelineChooser.html\">\n    <div ng-controller=\"Forge.PipelinePicker\">\n      <div class=\"form-group pipeline-chooser\">\n        <label class=\"col-sm-2 control-label\">Pipeline</label>\n      </div>\n      <div class=\"pipeline-chooser\">\n        <div pf-card-view config=\"tileConfig\" items=\"pipelines\">\n          <div class=\"col-md-12\" hawtio-template-popover content=\"itemDescriptionTooltip.html\">\n            <span class=\"pipeline-name\"><i class=\"fa fa-ellipsis-h\"></i>&nbsp;{{item.label}}</span>\n          </div>\n          <div class=\"col-md-12 pipeline-stages-panel\" ng-show=\"item.stages.length\" hawtio-template-popover\n               content=\"itemDescriptionTooltip.html\">\n            <span title=\"These are the named stages inside the pipeline\">Stages</span>\n            <div class=\"col-md-12 pipeline-stages\">\n              <span ng-repeat=\"value in item.stages track by $index\">\n                <span class=\"badge badge-success\">{{value}}</span>\n              </span>\n            </div>\n          </div>\n          <div class=\"col-md-12 pipeline-environments-panel\" ng-show=\"item.environments.length\" hawtio-template-popover\n               content=\"itemDescriptionTooltip.html\">\n            <span title=\"The environments that the build deploys to during the pipeline\">Environments</span>\n            <div class=\"col-md-12 pipeline-environemnts\">\n              <span ng-repeat=\"value in item.environments track by $index\">\n                <span class=\"badge\">{{value}}</span>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsPipelineChooserStages.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"value in row.entity.stages track by $index\">\n        <span class=\"badge\">{{value}}</span>\n      </span>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsPipelineChooserEnvironments.html\">\n    <div class=\"ngCellText\">\n      <span ng-repeat=\"value in row.entity.environments track by $index\">\n        <span class=\"badge\">{{value}}</span>\n      </span>\n    </div>\n  </script>\n\n  <script type=\"text/ng-template\" id=\"devOpsArchetypeChooser.html\">\n    <div ng-controller=\"Forge.ArchetypePicker\">\n      <p>{{selected.description}}</p>\n\n      <div class=\"col-sm-12\">\n        <p class=\"text-center\">\n          <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                         save-as=\"forge-artifact-selector\"\n                         css-class=\"input-xxlarge\"\n                         placeholder=\"Filter...\"></hawtio-filter>\n        </p>\n      </div>\n      <div class=\"col-sm-12 archetype-chooser-border\">\n        <div class=\"archetype-chooser-panel\">\n          <div ng-show=\"tableView\">\n            <table class=\"table table-bordered table-striped archetype-chooser\" hawtio-simple-table=\"tableConfig\"></table>\n          </div>\n          <div ng-hide=\"tableView\">\n            <div class=\"archetype-chooser\">\n              <div pf-card-view class=\"small-cards\" config=\"tileConfig\" items=\"archetypes\">\n                <div class=\"col-md-12\" hawtio-template-popover content=\"itemDescriptionTooltip.html\">\n                  <span class=\"archetype-icon\">\n                    <img class=\"camel-icon\" src=\"{{item.$icon}}\">\n                  </span>\n                </div>\n                <div class=\"col-md-12 pipeline-stages-panel\" ng-show=\"item.$tags.length\" hawtio-template-popover\n                     content=\"itemDescriptionTooltip.html\">\n                  <div class=\"col-md-12 pipeline-stages\">\n                    <span ng-repeat=\"value in item.$tags track by $index\">\n                      <span class=\"badge badge\" ng-click=\"toggleFilter(value)\">{{value}}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsFractionsChooser.html\">\n    <div ng-controller=\"Forge.FractionsPicker\">\n      <form>\n        <fieldset>\n          <div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">Search for fractions</label>\n            <div class=\"col-sm-10\">\n              <input type=\"text\" ng-model=\"currentItem\"\n                     class=\"form-control\"\n                     placeholder=\"bean-validation, jaxrs, jpa, messaging...\"\n                     typeahead=\"id for id in fractions | filter:$viewValue\"\n                     typeahead-template-url=\"devOpsFractionsItem.html\"\n                     typeahead-on-select=\"onItemSelected\">\n              <p class=\"help-block\">Add WildFly Swarm fractions to your application</p>\n            </div>\n          </div><div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">Selected Fractions</label>\n            <div class=\"col-sm-10\">\n              <span class=\"selected-items\" ng-repeat=\"item in selectedItems\">\n                <span class=\"label label-success\">\n                  {{item.label}}&nbsp;&nbsp;\n                  <i class=\"fa fa-remove clickable\" title=\"Remove this fraction\" ng-click=\"removeItem(item)\"></i>\n                </span>\n                &nbsp;\n                &nbsp;\n              </span>\n            </div>\n          </div>\n        </fieldset>\n      </form>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsFractionsItem.html\">\n    <a class=\"typeahead-matches\">\n      <p class=\"title\">{{match.model.label}}</p>\n    </a>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsDependenciesChooser.html\">\n    <div ng-controller=\"Forge.DependenciesPicker\">\n      <form>\n        <fieldset>\n          <div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">Search for dependencies</label>\n            <div class=\"col-sm-10\">\n              <input type=\"text\" ng-model=\"currentItem\"\n                     class=\"form-control\"\n                     placeholder=\"Web, Camel, JPA, Actuator, Devtools...\"\n                     typeahead=\"id for id in config.properties.dependencies.enum | filter:$viewValue\"\n                     typeahead-template-url=\"devOpsDependenciesItem.html\"\n                     typeahead-on-select=\"onItemSelected\">\n              <p class=\"help-block\">Add Spring Boot Starters and dependencies to your application</p>\n            </div>\n          </div><div class=\"form-group\">\n            <label class=\"col-sm-2 control-label\">Selected Dependencies</label>\n            <div class=\"col-sm-10\">\n              <span class=\"selected-items\" ng-repeat=\"item in selectedItems\">\n                <span class=\"label label-success\">\n                  {{item.name}}&nbsp;&nbsp;\n                  <i class=\"fa fa-remove clickable\" title=\"Remove this dependency\" ng-click=\"removeItem(item)\"></i>\n                </span>\n                &nbsp;\n                &nbsp;\n              </span>\n            </div>\n          </div>\n        </fieldset>\n      </form>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"devOpsDependenciesItem.html\">\n    <a class=\"typeahead-matches\">\n         <p class=\"title\"><!--{{match.model.group}} : -->{{match.model.name}}</p>\n         <p>{{match.model.description}}</p>\n     </a>\n  </script>\n  <script type=\"text/ng-template\" id=\"camelComponentChooser.html\">\n    <div ng-controller=\"Forge.CamelComponentPicker\">\n      <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\">Component</label>\n        <div class=\"col-sm-12 camel-component-chooser\">\n          <div class=\"col-md-12\">\n            <div pf-card-view class=\"small-cards\" id=\"camelComponentTiles\" config=\"tileConfig\" items=\"components\">\n              <div class=\"col-md-12\" title=\"{{item.description}}\">\n                <span>{{item.label}}</span>\n              </div>\n              <div class=\"col-md-12\" title=\"{{item.description}}\">\n                <img class=\"camel-icon\" src=\"{{item.$icon}}\">\n              </div>\n            </div>\n          </div>\n        </div>\n        <label class=\"col-sm-2 control-label\"></label>\n        <div class=\"col-sm-10\">\n          <p class=\"help-block\">Choose the component for the endpoint</p>\n        </div>\n      </div>\n    </div>\n  </script>\n\n  <script type=\"text/ng-template\" id=\"camelPatternChooser.html\">\n    <div ng-controller=\"Forge.CamelPatternPicker\">\n\n      <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\">Pattern</label>\n        <div class=\"col-sm-12 camel-pattern-chooser\">\n          <div class=\"col-md-12\">\n            <div pf-card-view class=\"small-cards\" config=\"tileConfig\" items=\"patterns\">\n              <div class=\"col-md-12 {{item.$class}}\" title=\"{{item.description}}\">\n                <span>{{item.title}}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <label class=\"col-sm-2 control-label\"></label>\n        <div class=\"col-sm-10\">\n          <p class=\"help-block\">Choose the pattern you would like to create</p>\n        </div>\n      </div>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"forgeProjectTypeChooser.html\">\n    <div ng-controller=\"Forge.ProjectTypePicker\">\n\n      <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\">Project Type</label>\n        <div class=\"col-sm-12 project-type-chooser\">\n          <div class=\"col-md-12\">\n            <div pf-card-view class=\"small-cards\" id=\"projectTypes\" config=\"tileConfig\" items=\"projectTypes\">\n              <div class=\"col-md-12\" title=\"{{item.description}}\">\n                <img class=\"camel-icon\" src=\"{{item.$icon}}\">\n              </div>\n              <div class=\"col-md-12\" title=\"{{item.description}}\">\n                <span>{{item.label}}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <label class=\"col-sm-2 control-label\"></label>\n        <div class=\"col-sm-10\">\n          <p class=\"help-block\">Choose the type of the project to create</p>\n        </div>\n      </div>\n\n    </div>\n  </script>\n\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div ng-show=\"tabs && tabs.length\" class=\"row\">\n    <div ng-include=\"\'plugins/kubernetes/html/tabs.html\'\"></div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{schema.info.description}}</h3>\n    </div>\n  </div>\n  <div class=\"row\" ng-show=\"executing\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-success\">\n        <span class=\"pficon pficon-info\"></span>\n        <strong>Executing...</strong>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\" ng-show=\"errorData\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-warning alert-dismissable\">\n        <button type=\"button\" class=\"close\" ng-click=\"errorData = null\" aria-hidden=\"true\">\n          <span class=\"pficon pficon-close\"></span>\n        </button>\n        <span class=\"pficon pficon-warning-triangle-o\"></span>\n        <p>The last operation resulted in the following error:</p>\n        <div ng-bind-html=\"errorData\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"row forge-response\" ng-show=\"response\">\n    <div class=\"col-md-12\">\n      <div class=\"alert\" ng-show=\"response.message\" ng-class=\"responseClass\">\n        <pre class=\"response-message\">{{response.message}}</pre>\n      </div>\n      <div class=\"alert\" ng-show=\"response.output\" ng-class=\"responseClass\">\n        <pre class=\"response-output\">{{response.output}}</pre>\n      </div>\n      <div class=\"alert\" ng-show=\"response.err\" ng-class=\"bg-warning\">\n        <pre class=\"response-err\">{{response.err}}</pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\" ng-show=\"response && !invalid\">\n    <div class=\"col-md-12\">\n      <a class=\"btn btn-primary\" href=\"{{completedLink}}\">Done</a>\n      <a class=\"btn btn-default\" ng-click=\"response = null\" ng-hide=\"wizardCompleted\">Hide</a>\n    </div>\n  </div>\n  <div class=\"row\" ng-show=\"validationError\">\n    <div class=\"col-md-12\">\n      <p class=\"bg-danger\">{{validationError}}</p>\n    </div>\n  </div>\n  <div ng-hide=\"fetched\">\n    <div class=\"row\">\n      <div class=\"spinner spinner-lg\"></div>\n    </div>\n  </div>\n  <div ng-show=\"fetched && !wizardCompleted\">\n\n    <div ng-show=\"id == \'devops-edit\' && $projectLink && !schema.properties.pipeline && schema.properties.chatRoom\">\n      <div class=\"row forge-form-top-padding\">\n        <div class=\"col-md-12\">\n          <form class=\"hawtio-form-2 form-horizontal\">\n            <fieldset>\n              <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\">Pipeline</label>\n                <div class=\"col-sm-10\">\n                  <a href=\"{{$projectLink}}/wiki/view/Jenkinsfile\"\n                     class=\"btn btn-lg btn-default\"\n                     title=\"View the Jenkins Workflow definition\">\n                    <img class=\"menu-icon\" src=\"/img/jenkins-icon.svg\">&nbsp;\n                    View Jenkins Workflow\n                  </a>\n                  &nbsp;\n                  <a href=\"{{$projectLink}}/wiki/branch/master/edit/Jenkinsfile\"\n                     class=\"btn btn-lg btn-primary\"\n                     title=\"Edit the Jenkins Workflow\">\n                    <i class=\"fa fa-edit\"></i>&nbsp;\n                    Edit\n                  </a>\n                </div>\n              </div>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\" ng-show=\"executing\">\n      <div class=\"spinner spinner-lg\"></div>\n    </div>\n\n    <div class=\"row\" ng-hide=\"executing\">\n      <div class=\"col-md-12\">\n        <div hawtio-form-2=\"schema\" entity=\'entity\' name=\"forge\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\" ng-hide=\"wizardCompleted\">\n    <form>\n      <div class=\"form-group\">\n        <div class=\"col-sm-2\">\n          <p class=\"text-warning pull-right\" ng-show=\"validationMessage\">{{validationMessage}}</p>\n          <p class=\"text-warning pull-right\" ng-show=\"form.named.$error.pattern\">Name must be a valid DNS domain name</p>\n          <p class=\"text-warning pull-right\" ng-show=\"form.$error.required.length\" ng-repeat=\"item in form.$error.required\">{{getLabel(item.$name)}} is required</p>\n        </div>\n        <div class=\"col-sm-10\">\n          <div class=\"pull-right\">\n            <a class=\"btn btn-default\"\n               title=\"Cancel this command\"\n               ng-show=\"$projectLink\"\n               href=\"{{$projectLink}}\">\n              Cancel\n            </a>\n            &nbsp;&nbsp;\n            <button class=\"btn btn-primary\"\n                    title=\"Perform this command\"\n                    ng-show=\"fetched\"\n                    ng-disabled=\"executing || form.$invalid\"\n                    ng-click=\"execute()\">\n              Next&nbsp;&nbsp;&gt;\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/commands.html","<div class=\"row\" ng-controller=\"Forge.CommandsController\">\n  <div hawtio-breadcrumbs></div>\n  <div hawtio-tabs></div>\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <div class=\"spinner spinner-lg\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\" ng-show=\"fetched\">\n    <div class=\"col-md-12\">\n      <div ng-hide=\"commands.length\" class=\"align-center\">\n        <p class=\"alert alert-info\">There are no commands available!</p>\n      </div>\n      <div ng-hide=\"mode == \'table\'\">\n        <div class=\"panel-group\" id=\"accordion-markup\">\n          <div class=\"panel panel-default\" ng-repeat=\"folder in commandSelector.folders\">\n            <div class=\"panel-heading\">\n              <h4 class=\"panel-title\">\n                <a data-toggle=\"collapse\" data-parent=\"#accordion-markup\" href=\"#{{folder.id}}\">\n                  {{folder.name}}\n                </a>\n              </h4>\n            </div>\n            <div id=\"{{folder.id}}\" class=\"panel-collapse collapse in\">\n              <div class=\"panel-body\">\n                <ul>\n                  <li ng-repeat=\"command in folder.commands\">\n                    <a href=\"{{command.$link}}\"\n                      title=\"{{command.description}}\">\n                      <span class=\"command-name\">{{command.$shortName}}</span>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n        <!--\n        <div ng-show=\"mode == \'table\'\">\n          <table class=\"table table-condensed table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n        -->\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/forge/html/createProject.html","<div class=\"row\" ng-controller=\"Forge.ReposController\">\n\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n\n  <div ng-show=\"model.fetched && $runningCDPipeline && (!$gogsLink || !$forgeLink)\">\n    <div class=\"createProjectPage\">\n      <div class=\"jumbotron\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <p>Waiting for the <b>CD Pipeline</b> application to startup: &nbsp;&nbsp;<i\n                    class=\"fa fa-spinner fa-spin\"></i>\n            </p>\n\n            <ul class=\"pending-pods\">\n              <li class=\"ngCellText\" ng-repeat=\"item in $requiredRCs\">\n                <a ng-href=\"{{item | kubernetesPageLink}}\">\n                  <img class=\"app-icon-small\" ng-src=\"{{item.$iconUrl}}\" ng-show=\"item.$iconUrl\">\n                  <b>{{item.metadata.name}}</b>\n                </a>\n                <a ng-show=\"item.$podCounters.podsLink\" href=\"{{item.$podCounters.podsLink}}\" title=\"View pods\">\n                  <span ng-show=\"item.$podCounters.ready\" class=\"badge badge-success\">{{item.$podCounters.ready}}</span>\n                  <span ng-show=\"item.$podCounters.valid\" class=\"badge badge-info\">{{item.$podCounters.valid}}</span>\n                  <span ng-show=\"item.$podCounters.waiting\" class=\"badge\">{{item.$podCounters.waiting}}</span>\n                  <span ng-show=\"item.$podCounters.error\" class=\"badge badge-warning\">{{item.$podCounters.error}}</span>\n                </a>\n              </li>\n            </ul>\n            <p>Please be patient while the above pods are ready!</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"model.fetched && !$runningCDPipeline\">\n    <div class=\"createProjectPage\">\n      <div class=\"jumbotron\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <p class=\"text-warning\">You are not running the <b>CD Pipeline</b> application in this workspace.</p>\n\n            <p>To be able to create new projects please run it!</p>\n\n            <p><a href=\"{{$runCDPipelineLink}}\" class=\"btn btn-lg btn-default\">Run the <b>CD Pipeline</b></a></p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-hide=\"model.fetched || !$gogsLink ||!$forgeLink\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"model.fetched && $gogsLink && $forgeLink\">\n    <div class=\"createProjectPage\">\n      <div class=\"jumbotron\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div ng-show=\"sourceSecret\">\n              <p class=\"align-center\">\n                <a class=\"btn btn-primary btn-lg\" href=\"{{$workspaceLink}}/forge/command/project-new\"\n                   title=\"Create a new project in this workspace using a wizard\">\n                  <i class=\"fa fa-plus\"></i> Create New App\n                </a>\n              </p>\n\n              <p class=\"align-center\">\n                Create a new App from our library of templates with the configured\n                <a href=\"{{$workspaceLink}}/forge/secrets\"\n                   title=\"View or change the secret used to create new apps\">\n                  source secret\n                </a>\n              </p>\n            </div>\n            <div ng-hide=\"sourceSecret\">\n              <p class=\"align-center\">\n                <a class=\"btn btn-default btn-lg\" href=\"{{$workspaceLink}}/forge/secrets\"\n                   title=\"Setup the secrets so that you can create new projects and git repositories in the Gogs service\">\n                  <i class=\"fa fa-pencil-square-o\"></i> Setup Gogs Secret\n                </a>\n              </p>\n\n              <p class=\"align-center\">\n                Setup a secret so that you can create new projects and git repositories in the gogs service.\n              </p>\n            </div>\n          </div>\n\n          <div class=\"col-md-6\">\n            <p class=\"align-center\">\n              <a class=\"btn btn-primary btn-lg\" href=\"{{$workspaceLink}}/importProject\"\n                 title=\"Import an existing project from a git source control repository\">\n                <i class=\"fa fa-plus\"></i> Import from Git\n              </a>\n            </p>\n\n            <p class=\"align-center\">\n              Import an App which already exists in a git repository\n            </p>\n          </div>\n\n\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/funktionOverview.html","<div ng-controller=\"Forge.FunktionOverviewController\">\n  <div hawtio-tabs></div>\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row select-table-filter\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <td ng-show=\"fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <!--\n                  <a class=\"btn btn-default pull-right\"\n                     ng-show=\"contexts.length\"\n                     ng-click=\"addRoute()\" title=\"Add new route\"\n                     data-placement=\"bottom\">\n                    <i class=\"fa fa-plus\"></i> Add Route</a>\n                  <span class=\"pull-right\">&nbsp;</span>\n        -->\n        <a class=\"btn btn-default pull-right\"\n           title=\"Add a new kind of Component to the project\"\n           href=\"{{addComponentLink}}\"><i class=\"fa fa-plus\"></i> Add Component</a>\n      </div>\n    </div>\n\n    <table class=\"table table-striped\">\n      <thead>\n      <tr>\n        <th>Funktion</th>\n        <th>Trigger</th>\n        <th>Action</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr ng-repeat=\"rule in funktionRules\">\n        <td>\n          {{rule.name}}\n        </td>\n        <td>\n          {{rule.trigger}}\n          &nbsp;&nbsp;\n          <button class=\"btn btn-default\" ng-click=\"editTrigger(rule)\" title=\"Edit trigger configuration\">\n            <i class=\"fa fa-wrench\" aria-hidden=\"true\"></i>\n            Edit\n          </button>\n        </td>\n        <td>\n          <span ng-show=\"rule.action\">\n            <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i>&nbsp;&nbsp;\n            {{rule.action}}\n            &nbsp;&nbsp;\n          </span>\n          <span ng-show=\"rule.chain\">\n            <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i>&nbsp;&nbsp;\n            {{rule.chain}}\n            &nbsp;&nbsp;\n          </span>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n</div>\n</div>\n");
$templateCache.put("plugins/forge/html/layoutForge.html","<script type=\"text/ng-template\" id=\"idTemplate.html\">\n  <div class=\"ngCellText\">\n    <a href=\"\"\n       title=\"Execute command {{row.entity.name}}\"\n       ng-href=\"{{row.entity.$link}}\">\n      {{row.entity.name}}</a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"repoTemplate.html\">\n  <div class=\"ngCellText\">\n    <a title=\"View repository {{row.entity.name}}\"\n       ng-href=\"/forge/repos/{{row.entity.name}}\">\n      {{row.entity.name}}\n    </a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"repoActionsTemplate.html\">\n  <div class=\"ngCellText\">\n    <a ng-show=\"row.entity.$openProjectLink\"\n       class=\"btn btn-primary\" target=\"editor\"\n       title=\"Open project {{row.entity.name}} in an editor\"\n       ng-href=\"{{row.entity.$openProjectLink}}\">\n      <i class=\"fa fa-pencil-square\"></i>\n      Open\n    </a>\n    <a ng-show=\"row.entity.html_url\"\n       class=\"btn btn-default\" target=\"browse\"\n       title=\"Browse project {{row.entity.name}}\"\n       ng-href=\"{{row.entity.html_url}}\">\n      <i class=\"fa fa-external-link\"></i>\n      Repository\n    </a>\n    <a ng-show=\"row.entity.$buildsLink\"\n       class=\"btn btn-default\" target=\"builds\"\n       title=\"View builds for this repository {{row.entity.owner.username}}/{{row.entity.name}}\"\n       ng-href=\"{{row.entity.$buildsLink}}\">\n      <i class=\"fa fa-cog\"></i>\n      Builds\n    </a>\n    <a ng-show=\"row.entity.$commandsLink\"\n       class=\"btn btn-default\"\n       title=\"Commands for project {{row.entity.name}}\"\n       ng-href=\"{{row.entity.$commandsLink}}\">\n      <i class=\"fa fa-play-circle\"></i>\n      Run...\n    </a>\n  </div>\n</script>\n<script type=\"text/ng-template\" id=\"categoryTemplate.html\">\n  <div class=\"ngCellText\">\n    <span class=\"pod-label badge\"\n          class=\"background-light-grey mouse-pointer\">{{row.entity.category}}</span>\n  </div>\n</script>\n\n<div class=\"row\">\n  <div class=\"wiki-icon-view\">\n    <div class=\"row forge-view\" ng-view></div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/repo.html","<div class=\"row\" ng-controller=\"Forge.RepoController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\"\n              href=\"/forge/repos\"><i class=\"fa fa-list\"></i></a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a ng-show=\"entity.$commandsLink\"\n         class=\"btn btn-default pull-right\"\n         title=\"Commands for project {{entity.name}}\"\n         ng-href=\"{{entity.$commandsLink}}\">\n        <i class=\"fa fa-play-circle\"></i>\n        Run...\n      </a>\n      <span class=\"pull-right\" ng-show=\"entity.$buildsLink\">&nbsp;</span>\n      <a ng-show=\"entity.$buildsLink\"\n         class=\"btn btn-primary pull-right\" target=\"builds\"\n         title=\"View builds for this repository {{entity.owner.username}}/{{entity.name}}\"\n         ng-href=\"{{entity.$buildsLink}}\">\n        <i class=\"fa fa-cog\"></i>\n        Builds\n      </a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a ng-show=\"entity.html_url\"\n         class=\"btn btn-default pull-right\" target=\"browse\"\n         title=\"Browse project {{entity.name}}\"\n         ng-href=\"{{entity.html_url}}\">\n        <i class=\"fa fa-external-link\"></i>\n        Browse\n      </a>\n    </div>\n  </div>\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-show=\"fetched\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h3 title=\"repository for {{entity.owner.username}}\">\n          <span ng-show=\"entity.owner.username\">\n            <a href=\"/forge/repos\" title=\"Browse the repositories for {{entity.owner.username}}\">\n              <img src=\"{{entity.owner.avatar_url}}\" class=\"avatar-small-img\" ng-show=\"entity.owner.avatar_url\">\n            </a>\n            &nbsp;\n            <a href=\"/forge/repos\" title=\"Browse the repositories for {{entity.owner.username}}\">\n              {{entity.owner.username}}\n            </a>\n             &nbsp;/&nbsp;\n          </span>\n          {{entity.name}}\n        </h3>\n      </div>\n    </div>\n\n    <div class=\"git-clone-tabs\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"tabbable\">\n            <div value=\"ssh\" class=\"tab-pane\" title=\"SSH\" ng-show=\"entity.ssh_url\">\n              <div class=\"git-clone-panel\">\n                <p>to clone this git repository via <b>ssh</b> from the command line:</p>\n              </div>\n\n              <div class=\"highlight\">\n                <pre>\n                  <code>git clone {{entity.ssh_url}}</code>\n                </pre>\n              </div>\n            </div>\n\n            <div value=\"http\" class=\"tab-pane\" title=\"HTTP\" ng-show=\"entity.clone_url\">\n              <div class=\"git-clone-panel\">\n                <p>to clone this git repository via <b>http</b> from the command line:</p>\n              </div>\n\n              <div class=\"highlight\">\n                <pre>\n                  <code>git clone {{entity.clone_url}}</code>\n                </pre>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/repos.html","<div class=\"row\" ng-controller=\"Forge.ReposController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                     ng-show=\"projects.length\"\n                     css-class=\"input-xxlarge\"\n                     placeholder=\"Filter repositories...\"></hawtio-filter>\n      <!--\n            <span class=\"pull-right\">&nbsp;</span>\n            <button ng-show=\"fetched\"\n                    class=\"btn btn-danger pull-right\"\n                    ng-disabled=\"tableConfig.selectedItems.length == 0\"\n                    ng-click=\"delete(tableConfig.selectedItems)\">\n              <i class=\"fa fa-remove\"></i> Delete\n            </button>\n      -->\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-primary pull-right\" href=\"{{$workspaceLink}}/forge/command/project-new\"\n         ng-show=\"login.loggedIn\"\n         title=\"Create a new project and repository\">\n        <i class=\"fa fa-plus\"></i> Create Project</a>\n      </a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-click=\"logout()\" ng-show=\"login.loggedIn\"\n         title=\"Log out from the git repository\">\n        <i class=\"fa fa-sign-out\"></i> Log out</a>\n      </a>\n      <span class=\"pull-right\" ng-show=\"login.loggedIn\">&nbsp;</span>\n      <div class=\"user-icon-name pull-right\" ng-show=\"login.loggedIn\">\n        <img src=\"{{login.avatar_url}}\" class=\"avatar-small-img\" ng-show=\"login.avatar_url\">&nbsp;\n        {{login.user}}\n      </div>\n    </div>\n  </div>\n\n\n  <div ng-show=\"!login.authHeader || login.relogin\">\n    <div ng-show=\"login.failed\">\n      <div class=\"bg-danger\">\n        <div class=\"invalid-login align-center\">\n          <h3>Invalid login/password. Please try again!</h3>\n        </div>\n      </div>\n    </div>\n    <h2 ng-hide=\"login.failed\">Please login to the git repository</h2>\n\n    <form>\n      <div class=\"form-group\">\n        <label for=\"gitUsername\">User name</label>\n        <input type=\"text\" class=\"form-control\" id=\"gitUsername\" placeholder=\"Enter user name\" required=\"true\"\n               ng-model=\"login.user\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"gitPassword\">Password</label>\n        <input type=\"password\" class=\"form-control\" id=\"gitPassword\" placeholder=\"Password\" required=\"true\"\n               ng-model=\"login.password\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"gitEmail\">Email address</label>\n        <input type=\"email\" class=\"form-control\" id=\"gitEmail\" placeholder=\"Enter email\" required=\"true\"\n               ng-model=\"login.email\">\n      </div>\n      <div class=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"doLogin()\"\n                ng-disabled=\"!login.user || !login.password || !login.email\">\n          <i class=\"fa fa-sign-in\"></i> Sign In\n        </button>\n      </div>\n\n      <div class=\"form-group\" ng-show=\"forgotPasswordUrl\">\n          <a href=\"{{forgotPasswordUrl}}\">Forgot password?</a>\n      </div>\n\n      <div class=\"form-group\" ng-show=\"signUpUrl\">\n        <a href=\"{{signUpUrl}}\">Need an account? Sign up now.</a>\n      </div>\n    </form>\n  </div>\n\n  <div ng-hide=\"fetched || !login.authHeader || login.relogin\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"fetched && login.authHeader\">\n    <div ng-hide=\"projects.length\" class=\"align-center\">\n      <div class=\"padded-div\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <p class=\"alert alert-info\">There are no git repositories yet. Please create one!</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div ng-show=\"projects.length\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <table class=\"table table-condensed table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/secrets.html","<div ng-controller=\"Forge.SecretsController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div class=\"row\">\n    <div ng-include=\"\'plugins/kubernetes/html/tabs.html\'\"></div>\n    <div>\n\n  <div class=\"row filter-header\" ng-show=\"!hasSavedSecret() && !filteredSecrets.length\">\n    <div class=\"col-md-12\">\n      <p class=\"text-warning\">There are no secrets to choose from. Please create a new secret then save your selection.</p>\n    </div>\n  </div>\n\n  <div class=\"row filter-header\" ng-show=\"filteredSecrets.length\">\n    <div class=\"col-md-8\">\n      <p class=\"text-warning\" ng-show=\"!hasSavedSecret() && canSave()\">You have not saved your selection. Please click the button to save your selection.</p>\n      <p class=\"text-warning\" ng-show=\"!hasSavedSecret() && !canSave()\">Please select a secret and click the button to save your selection.</p>\n    </div>\n    <div class=\"col-md-4\">\n      <button class=\"btn btn-default pull-right\"\n              title=\"Cancel changes to this secret\"\n              ng-click=\"cancel()\">\n        Cancel\n      </button>\n      <span class=\"pull-right\">&nbsp;</span>\n      <button class=\"btn btn-primary pull-right\"\n              title=\"Saves changes to this secret\"\n              ng-disabled=\"!canSave()\"\n              ng-click=\"save()\">\n        Save Selection\n      </button>\n    </div>\n  </div>\n\n\n  <div ng-hide=\"fetched\">\n    <div class=\"row select-table-filter\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <i class=\"fa fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <div ng-show=\"fetched\">\n    <div class=\"row filter-header\">\n      <div class=\"col-md-12\">\n        <p>To be able to edit source code in a repository you we need your secret (SSH keys or username &amp; password). The secrets are stored securely in your own\n          <a href=\"{{secretNamespaceLink}}\" title=\"View the namespace for your personal secrets\">personal namespace</a>.</p>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <form name=\"secretForm\" class=\"form-horizontal\">\n          <div class=\"form-group\" ng-hide=\"id\" ng-class=\"{\'has-error\': secretForm.$error.validator || !selectedSecretName}\">\n            <label class=\"col-sm-2 control-label\" for=\"secretName\">\n              Source Editing Secret\n              <a tabindex=\"0\" role=\"button\" data-toggle=\"popover\" data-trigger=\"focus\" data-html=\"true\" title=\"\"\n                 data-content=\"Select the secret used to clone and edit the git repository\" data-placement=\"top\"\n                 data-original-title=\"\">\n                <span class=\"fa fa-info-circle\"></span>\n              </a>\n            </label>\n\n            <div class=\"col-sm-4\">\n              <input type=\"text\" id=\"secretName\" name=\"secretName\" class=\"form-control\" ng-model=\"selectedSecretName\"\n                     required readonly>\n            </div>\n\n            <div ng-show=\"gitUrl\">\n              <label class=\"col-sm-2 control-label\" for=\"gitRepo\">\n                Repository\n                <a tabindex=\"0\" role=\"button\" data-toggle=\"popover\" data-trigger=\"focus\" data-html=\"true\" title=\"\"\n                   data-content=\"The git repository to edit the source code\" data-placement=\"top\"\n                   data-original-title=\"\">\n                  <span class=\"fa fa-info-circle\"></span>\n                </a>\n              </label>\n\n              <div class=\"col-sm-4\">\n                <input type=\"text\" id=\"gitRepo\" name=\"gitRepo\" class=\"form-control\" ng-model=\"gitUrl\" required readonly>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <div ng-hide=\"filteredSecrets.length\" class=\"align-center\">\n      <div class=\"row select-table-filter\">\n        <div class=\"col-md-12\">\n          <p class=\"alert alert-info\">There are currently no suitable secrets to choose from. Please create one.</p>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12 text-center\">\n          <a class=\"btn btn-primary\" href=\"{{addNewSecretLink}}\"\n             title=\"Create a new secret for editing the git repository for this project\">\n            <i class=\"fa fa-plus\"></i> Create New Secret\n          </a>\n        </div>\n      </div>\n    </div>\n    <div ng-show=\"filteredSecrets.length\">\n      <div class=\"row select-table-filter\">\n        <div class=\"col-md-12\">\n          <div class=\" pull-right\">\n            <hawtio-filter ng-show=\"filteredSecrets.length > 1\"\n                           ng-model=\"tableConfig.filterOptions.filterText\"\n                           css-class=\"input-xxlarge\"\n                           placeholder=\"Filter secrets...\"></hawtio-filter>\n\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <table class=\"table table-condensed table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12 text-center\">\n          <a class=\"btn btn-default\" href=\"{{addNewSecretLink}}\"\n             title=\"Create a new secret for editing the git repository for this project\">\n            <i class=\"fa fa-plus\"></i> Create New Secret\n          </a>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/forge/html/secretsRequired.html","<div ng-controller=\"Forge.SecretsController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div hawtio-tabs></div>\n  </div>\n\n  <div>\n    <div class=\"row filter-header\">\n      <div class=\"col-md-2\">\n      </div>\n      <div class=\"col-md-8 text-center\">\n        <div class=\"alert alert-info\">\n          <span class=\"pficon pficon-info\"></span>\n          <strong>To be able to create or edit a project you need to choose or setup a secret to work with the repository for the SSH keys or username &amp; password.</strong>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <a class=\"btn btn-primary btn-lg\" href=\"{{setupSecretsLink}}\"\n           title=\"Setup the secrets so that you can edit this project\">\n          Setup Source Secret\n        </a>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/github/html/layoutGithub.html","<div class=\"row\">\n  <div class=\"wiki-icon-view\">\n    <div class=\"row forge-view\" ng-view></div>\n  </div>\n</div>\n");
$templateCache.put("plugins/github/html/organisations.html","<div class=\"row\" ng-controller=\"Github.OrganisationsController\">\n  <div hawtio-breadcrumbs></div>\n  <div hawtio-tabs></div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <hawtio-filter ng-model=\"tableConfig.filterOptions.filterText\"\n                     ng-show=\"projects.length\"\n                     css-class=\"input-xxlarge\"\n                     placeholder=\"Filter repositories...\"></hawtio-filter>\n      <!--\n            <span class=\"pull-right\">&nbsp;</span>\n            <button ng-show=\"fetched\"\n                    class=\"btn btn-danger pull-right\"\n                    ng-disabled=\"tableConfig.selectedItems.length == 0\"\n                    ng-click=\"delete(tableConfig.selectedItems)\">\n              <i class=\"fa fa-remove\"></i> Delete\n            </button>\n      -->\n      <span class=\"pull-right\">&nbsp;</span>\n\n      <!--\n      <a class=\"btn btn-primary pull-right\" href=\"{{$workspaceLink}}/forge/command/project-new\"\n         ng-show=\"login.loggedIn\"\n         title=\"Create a new project and repository\">\n        <i class=\"fa fa-plus\"></i> Create Project</a>\n      </a>\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-click=\"logout()\" ng-show=\"login.loggedIn\"\n         title=\"Log out from the git repository\">\n        <i class=\"fa fa-sign-out\"></i> Log out</a>\n      </a>\n      <span class=\"pull-right\" ng-show=\"login.loggedIn\">&nbsp;</span>\n      <div class=\"user-icon-name pull-right\" ng-show=\"login.loggedIn\">\n        <img src=\"{{login.avatar_url}}\" class=\"avatar-small-img\" ng-show=\"login.avatar_url\">&nbsp;\n        {{login.user}}\n      </div>\n-->\n    </div>\n  </div>\n\n\n  <h2>Organisations</h2>\n\n  <div class=\"row\" ng-if=\"!oauth.hasToken() || data.status === 403\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-warning\">\n        No Github credentials available, <a href=\"\" ng-click=\"prefs.goto(\'Github\')\">configure your github account</a>\n      </div>\n    </div>\n  </div>\n\n  <div ng-hide=\"fetched || !oauth.hasToken()\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"align-center\">\n          <div class=\"spinner spinner-lg\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-show=\"fetched && oauth.hasToken()\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <table class=\"table table-condensed table-striped\" hawtio-simple-table=\"tableConfig\"></table>\n      </div>\n    </div>\n    <!-- debug -->\n    <div>\n      <pre>{{data | json}}</pre>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/main/html/about.html","<div ng-controller=\"Main.About\">\n  <p>Version: <b>{{info.version}}</b></p>\n  <p>Commit ID: <b>{{info.commitId}}</b></p>\n  <p>Enabled branding plugin: <b>{{branding.kind}}</b></p>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>\n          Name\n        </th>\n        <th>\n          Version\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr ng-repeat=\"(key, info) in info.packages\">\n        <td>{{key}}</td>\n        <td>{{info.version || \'--\'}}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n");
$templateCache.put("plugins/main/html/help.html","<div ng-controller=\"Main.HelpController\">\n  <div hawtio-breadcrumbs></div>\n  <div hawtio-tabs></div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <h1>Documentation</h1>\n      <p>Need some more information about the fabric8 platform? Use this button to open a new tab to the fabric8\n        documentation site.</p>\n      <p>\n        <a class=\"btn btn-primary btn-large btn-lg\" href=\"https://fabric8.io/docs/\" target=\"_blank\"\n           title=\"Opens a new window for the fabric8 documentation\">\n          <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n          Documentation\n        </a>&nbsp;&nbsp;&nbsp;\n        <a class=\"btn btn-primary btn-large btn-lg\" href=\"https://blog.fabric8.io/\" target=\"_blank\"\n           title=\"Opens a new window for the fabric8 blog\">\n          <i class=\"fa fa-rss\" aria-hidden=\"true\"></i>\n          Blog\n        </a>\n      </p>\n    </div>\n    <div class=\"col-md-4\">\n      <h1>Feedback</h1>\n      <p>Have a question or need some help? Feel free to raise an issue in the fabric8 issue tracker.</p>\n      <p>\n        <a class=\"btn btn-success btn-lg\" href=\"https://github.com/fabric8io/fabric8-platform/issues/new\"\n           target=\"_blank\" title=\"Opens a new window to the main fabric8 issue tracker\">\n          <i class=\"fa fa-comment-o\" aria-hidden=\"true\"></i>\n          Give Feedback\n        </a>\n      </p>\n    </div>\n    <div class=\"col-md-4\">\n      <h1>Web Chat</h1>\n      <p>\n        Join us on Slack or IRC for realtime communication with the fabric8 team. Please note that we\'re a global team\n        so\n        folks may not always be available, use the <a href=\"https://github.com/fabric8io/fabric8-platform/issues/new\"\n                                                      target=\"_blank\"\n                                                      title=\"Opens a new window to the main fabric8 issue tracker\">issue\n        tracker</a> if that\'s the case.\n      </p>\n      <p>\n        <a class=\"btn btn-lg btn-primary\" href=\"https://fabric8.slack.com/\" target=\"_blank\"\n           title=\"Open a new window to the fabric8 Slack channel\">\n          <i class=\"fa fa-slack\" aria-hidden=\"true\"></i>\n          Chat on Slack\n        </a>&nbsp;&nbsp;&nbsp;\n        <a class=\"btn btn-lg btn-primary\" href=\"https://riot.im/app/#/room/#freenode_#fabric8:matrix.org\"\n           target=\"_blank\"\n           title=\"Open a new window to the fabric8 IRC channel\">\n          <i class=\"fa fa-comments-o\" aria-hidden=\"true\"></i>\n          Chat on IRC\n        </a>\n      </p>\n    </div>\n  </div>\n  <div class=\"row\">\n  </div>\n  <div class=\"row\">\n    <hr>\n    <div class=\"col-md-12 align-center\">\n      <a ng-if=\"previousUrl\" class=\"btn btn-lg btn-large btn-default\" ng-href=\"{{previousUrl}}\">\n        Go Back\n      </a>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/exemplar/document.html","<h2>This is a title</h2>\n\n<p>Here are some notes</p>");
$templateCache.put("plugins/wiki/html/camelCanvas.html","<div ng-controller=\"Wiki.CamelController\">\n  <div class=\"camel-canvas-page\" ng-controller=\"Wiki.CamelCanvasController\">\n\n      <ng-include src=\"\'plugins/wiki/html/camelNavBar.html\'\"></ng-include>\n\n      <script type=\"text/ng-template\"\n              id=\"nodeTemplate\">\n        <div class=\"component window\"\n             id=\"{{id}}\"\n             title=\"{{node.tooltip}}\">\n          <div class=\"window-inner {{node.type}}\">\n            <img class=\"nodeIcon\"\n                 title=\"Click and drag to create a connection\"\n                 src=\"{{node.imageUrl}}\">\n          <span class=\"nodeText\"\n                title=\"{{node.label}}\">{{node.label}}</span>\n          </div>\n        </div>\n      </script>\n\n\n      <div class=\"row\">\n          <ul class=\"nav nav-tabs\">\n            <!-- navigation tabs -->\n            <li ng-repeat=\"nav in camelSubLevelTabs\" ng-show=\"isValid(nav)\" ng-class=\"{active : isActive(nav)}\">\n              <a ng-href=\"{{nav.href()}}{{hash}}\" title=\"{{nav.title}}\"\n                data-placement=\"bottom\" ng-bind-html=\"nav.content\"></a></li>\n\n            <!-- controls -->\n            <li class=\"pull-right\">\n              <a href=\'\' title=\"Add new pattern node connecting to this pattern\" ng-click=\"addDialog.open()\"\n                 data-placement=\"bottom\">\n                 <i class=\"icon-plus\"></i> Add</a></li>\n\n            <li class=\"pull-right\">\n              <a href=\'\' title=\"Automatically layout the diagram \" ng-click=\"doLayout()\"\n                 data-placement=\"bottom\">\n                <i class=\"icon-magic\"></i> Layout</a></li>\n\n            <li class=\"pull-right\" style=\"margin-top: 0; margin-bottom: 0;\">\n            </li>\n\n            <!--\n            <li class=\"pull-right\">\n              <a href=\'\' title=\"Edit the properties for the selected node\" ng-disabled=\"!selectedFolder\"\n                 ng-click=\"propertiesDialog.open()\"\n                 data-placement=\"bottom\">\n                <i class=\"icon-edit\"></i> Properties</a></li>\n                -->\n          </ul>\n\n          <div class=\"modal-large\">\n            <div modal=\"addDialog.show\" close=\"addDialog.close()\" ng-options=\"addDialog.options\">\n              <form class=\"form-horizontal no-bottom-margin\" ng-submit=\"addAndCloseDialog()\">\n                <div class=\"modal-header\"><h4>Add Node</h4></div>\n                <div class=\"modal-body\">\n                  <tabset>\n                    <tab heading=\"Patterns\">\n                      <div hawtio-tree=\"paletteTree\" hideRoot=\"true\" onSelect=\"onPaletteSelect\"\n                           activateNodes=\"paletteActivations\"></div>\n                    </tab>\n                    <tab heading=\"Endpoints\">\n                      <div hawtio-tree=\"componentTree\" hideRoot=\"true\" onSelect=\"onComponentSelect\"\n                           activateNodes=\"componentActivations\"></div>\n                    </tab>\n                  </tabset>\n                </div>\n                <div class=\"modal-footer\">\n                  <input id=\"submit\" class=\"btn btn-primary add\" type=\"submit\"\n                         ng-disabled=\"!selectedPaletteNode && !selectedComponentNode\"\n                         value=\"Add\">\n                  <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"addDialog.close()\">Cancel</button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n\n          <!--\n          <div modal=\"propertiesDialog.show\" close=\"propertiesDialog.close()\" ng-options=\"propertiesDialog.options\">\n            <form class=\"form-horizontal no-bottom-margin\" ng-submit=\"updatePropertiesAndCloseDialog()\">\n              <div class=\"modal-header\"><h4>Properties</h4></div>\n              <div class=\"modal-body\">\n\n                <div ng-show=\"!selectedEndpoint\"> -->\n          <!-- pattern form --> <!--\n                <div simple-form name=\"formEditor\" entity=\'nodeData\' data=\'nodeModel\' schema=\"schema\"\n                     onsubmit=\"updatePropertiesAndCloseDialog\"></div>\n              </div>\n              <div ng-show=\"selectedEndpoint\"> -->\n          <!-- endpoint form -->\n          <!--\n          <div class=\"control-group\">\n            <label class=\"control-label\" for=\"endpointPath\">Endpoint</label>\n\n            <div class=\"controls\">\n              <input id=\"endpointPath\" class=\"col-md-10\" type=\"text\" ng-model=\"endpointPath\" placeholder=\"name\"\n                     typeahead=\"title for title in endpointCompletions($viewValue) | filter:$viewValue\"\n                     typeahead-editable=\'true\'\n                     min-length=\"1\">\n            </div>\n          </div>\n          <div simple-form name=\"formEditor\" entity=\'endpointParameters\' data=\'endpointSchema\'\n               schema=\"schema\"></div>\n        </div>\n\n\n      </div>\n      <div class=\"modal-footer\">\n        <input class=\"btn btn-primary add\" type=\"submit\" ng-click=\"updatePropertiesAndCloseDialog()\" value=\"OK\">\n        <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"propertiesDialog.close()\">Cancel</button>\n      </div>\n    </form>\n  </div>\n  -->\n\n      </div>\n\n      <div class=\"panes\" hawtio-window-height>\n        <div class=\"left-pane\">\n          <div class=\"camel-viewport camel-canvas\">\n            <div style=\"position: relative;\" class=\"canvas\"></div>\n          </div>\n        </div>\n        <div class=\"right-pane\">\n          <div class=\"camel-props\">\n            <div class=\"button-bar\">\n              <div class=\"centered\">\n                <form class=\"form-inline\">\n                  <label>Route: </label>\n                  <select ng-model=\"selectedRouteId\" ng-options=\"routeId for routeId in routeIds\"></select>\n                </form>\n                <div class=\"btn-group\">\n                  <button class=\"btn\"\n                          title=\"{{getDeleteTitle()}}\"\n                          ng-click=\"removeNode()\"\n                          data-placement=\"bottom\">\n                    <i class=\"icon-remove\"></i> Delete {{getDeleteTarget()}}\n                  </button>\n                  <button class=\"btn\"\n                          title=\"Apply any changes to the endpoint properties\"\n                          ng-disabled=\"!isFormDirty()\"\n                          ng-click=\"updateProperties()\">\n                    <i class=\"icon-ok\"></i> Apply\n                  </button>\n                  <!-- TODO Would be good to have this too\n                  <button class=\"btn\"\n                          title=\"Clear any changes to the endpoint properties\"\n                          ng-disabled=\"!isFormDirty()\"\n                          ng-click=\"resetForms()\">\n                    <i class=\"icon-remove\"></i> Cancel</button> -->\n                </div>\n              </div>\n            </div>\n            <div class=\"prop-viewport\">\n\n              <div>\n                <!-- pattern form -->\n                <div ng-show=\"!selectedEndpoint\">\n                  <div hawtio-form-2=\"nodeModel\"\n                       name=\"formEditor\"\n                       entity=\"nodeData\"\n                       data=\"nodeModel\"\n                       schema=\"schema\"\n                       onsubmit=\"updateProperties\"></div>\n                </div>\n\n                <!-- endpoint form -->\n                <div class=\"endpoint-props\" ng-show=\"selectedEndpoint\">\n                  <p>Endpoint</p>\n\n                  <form name=\"endpointForm\">\n                    <div class=\"control-group\">\n                      <label class=\"control-label\" for=\"endpointPath\">URI:</label>\n\n                      <div class=\"controls\">\n                        <input id=\"endpointPath\" class=\"col-md-10\" type=\"text\" ng-model=\"endpointPath\"\n                               placeholder=\"name\"\n                               typeahead=\"title for title in endpointCompletions($viewValue) | filter:$viewValue\"\n                               typeahead-editable=\'true\'\n                               min-length=\"1\">\n                      </div>\n                    </div>\n                  </form>\n\n                  <div simple-form\n                       name=\"formEditor\"\n                       entity=\'endpointParameters\'\n                       data=\'endpointSchema\'\n                       schema=\"schema\"\n                       onsubmit=\"updateProperties\"></div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div hawtio-confirm-dialog=\"switchToTreeView.show\" ok-button-text=\"Yes\" cancel-button-text=\"No\"\n           on-ok=\"doSwitchToTreeView()\" title=\"You have unsaved changes\">\n        <div class=\"dialog-body\">\n          <p>Unsaved changes will be discarded. Do you really want to switch views?</p>\n        </div>\n      </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/camelDiagram.html","<div ng-include=\"diagramTemplate\"></div>\n");
$templateCache.put("plugins/wiki/html/camelNavBar.html","<div class=\"wiki source-nav-widget\" ng-controller=\"Wiki.NavBarController\">\n  <div class=\"inline-block app-path\" hawtio-breadcrumbs></div>\n  <div class=\"inline-block source-path\">\n    <ol class=\"breadcrumb\">\n      <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href) && !objectId}\'>\n        <a class=\"breadcrumb-link\" ng-href=\"{{link.href}}\">\n          <span class=\"contained c-medium\">{{link.name}}</span>\n        </a>\n      </li>\n      <li ng-show=\"objectId\">\n        <a ng-href=\"{{historyLink}}{{hash}}\">History</a>\n      </li>\n      <li ng-show=\"objectId\" class=\"active\">\n        <a>{{objectId}}</a>\n      </li>\n    </ol>\n  </div>\n  <ul class=\"pull-right nav nav-tabs\">\n    <!--\n    <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href)}\'>\n      <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n    </li>\n    -->\n\n    <!--\n    <li class=\"pull-right\">\n      <a ng-href=\"{{editLink()}}{{hash}}\" ng-hide=\"!editLink()\" title=\"Edit this camel configuration\"\n        data-placement=\"bottom\">\n        <i class=\"icon-edit\"></i> Edit</a></li>\n    <li class=\"pull-right\" ng-show=\"sourceLink()\">\n      -->\n      <li class=\"pull-right\">\n        <a ng-href=\"\" id=\"saveButton\" ng-disabled=\"!modified\" ng-click=\"save(); $event.stopPropagation();\"\n          ng-class=\"{\'nav-primary\' : modified, \'nav-primary-disabled\' : !modified}\"\n          title=\"Saves the Camel document\">\n          <i class=\"icon-save\"></i> Save</a>\n      </li>\n      <!--<li class=\"pull-right\">-->\n        <!--<a href=\"\" id=\"cancelButton\" ng-click=\"cancel()\"-->\n          <!--title=\"Discards any updates\">-->\n          <!--<i class=\"icon-remove\"></i> Cancel</a>-->\n        <!--</li>-->\n\n      <li class=\"pull-right\">\n        <a ng-href=\"{{sourceLink()}}\" title=\"View source code\"\n          data-placement=\"bottom\">\n          <i class=\"icon-file-alt\"></i> Source</a>\n      </li>\n    </ul>\n</div>\n");
$templateCache.put("plugins/wiki/html/camelProperties.html","<div ng-controller=\"Wiki.CamelController\" class=\"camel-properties-page\">\n\n  <ng-include src=\"\'plugins/wiki/html/camelNavBar.html\'\"></ng-include>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\" ng-include=\"\'plugins/wiki/html/camelSubLevelTabs.html\'\"></div>\n  </div>\n\n  <div class=\"row\">\n    <div id=\"tree-container\" class=\"col-md-3\" ng-controller=\"Camel.TreeController\">\n      <div hawtio-tree=\"camelContextTree\" onselect=\"onNodeSelect\" onDragEnter=\"onNodeDragEnter\" onDrop=\"onNodeDrop\"\n        onRoot=\"onRootTreeNode\"\n        hideRoot=\"true\"></div>\n    </div>\n\n    <div class=\"col-md-9\">\n      <div ng-include=\"propertiesTemplate\"></div>\n    </div>\n  </div>\n\n  <div hawtio-confirm-dialog=\"switchToCanvasView.show\" ok-button-text=\"Yes\" cancel-button-text=\"No\"\n    on-ok=\"doSwitchToCanvasView()\" title=\"You have unsaved changes\">\n    <div class=\"dialog-body\">\n      <p>Unsaved changes will be discarded. Do you really want to switch views?</p>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/wiki/html/camelPropertiesEdit.html","<div simple-form name=\"formEditor\" entity=\'nodeData\' data=\'nodeModel\' schema=\"schema\"></div>\n");
$templateCache.put("plugins/wiki/html/camelSubLevelTabs.html","<ul class=\"nav nav-tabs\">\n\n  <!--\n  <li ng-class=\"{ active : isActive({ id: \'canvas\' }) }\">\n    <a href=\'\' ng-click=\'confirmSwitchToCanvasView()\' title=\"Edit the diagram in a draggy droppy way\"\n        data-placement=\"bottom\">\n        <i class=\"fa fa-icon-picture\"></i> Canvas</a>\n    </li>\n    -->\n\n  <li ng-repeat=\"nav in camelSubLevelTabs\" ng-show=\"isValid(nav)\" ng-class=\"{active : isActive(nav)}\">\n    <a ng-href=\"{{nav.href()}}{{hash}}\" title=\"{{nav.title}}\"\n       data-placement=\"bottom\" ng-bind-html=\"nav.content\"></a></li>\n\n  <li class=\"pull-right\">\n    <a href=\'\' title=\"Add new pattern node connecting to this pattern\" ng-click=\"addNode()\" data-placement=\"bottom\">\n      <i class=\"icon-plus\"></i> Add</a></li>\n\n  <li class=\"pull-right\">\n    <a href=\'\' title=\"Deletes the selected pattern\" ng-disabled=\"!canDelete()\" ng-click=\"removeNode()\" data-placement=\"bottom\">\n      <i class=\"icon-remove\"></i> Delete</a></li>\n\n</ul>\n\n<div modal=\"addDialog.show\" close=\"addDialog.close()\" ng-options=\"addDialog.options\">\n  <form class=\"form-horizontal no-bottom-margin\" ng-submit=\"addAndCloseDialog()\">\n    <div class=\"modal-header\"><h4>Add Node</h4></div>\n    <div class=\"modal-body\">\n      <div hawtio-tree=\"paletteTree\" hideRoot=\"true\" onSelect=\"onPaletteSelect\" activateNodes=\"paletteActivations\"></div>\n    </div>\n    <div class=\"modal-footer\">\n      <input id=\"submit\" class=\"btn btn-primary add\" type=\"submit\" ng-disabled=\"!selectedPaletteNode\" value=\"Add\">\n      <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"addDialog.close()\">Cancel</button>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/commit.html","<div ng-controller=\"Wiki.CommitController\">\n  <script type=\"text/ng-template\" id=\"fileCellTemplate.html\">\n    <div class=\"ngCellText\">\n      <a ng-href=\"{{row.entity.fileLink}}\" class=\"file-name text-nowrap\" title=\"{{row.entity.title}}\">\n        <span ng-class=\"row.entity.changeClass\"></span>\n        <span class=\"file-icon\" ng-class=\"row.entity.fileClass\" ng-bind-html=\"row.entity.fileIconHtml\"></span>\n        {{row.entity.path}}\n      </a>\n    </div>\n  </script>\n  <script type=\"text/ng-template\" id=\"viewDiffTemplate.html\">\n    <div class=\"ngCellText\">\n      <a ng-href=\"{{row.entity.$diffLink}}\" ng-show=\"row.entity.$diffLink\" title=\"View the actual changes to this change\">\n        View Diff\n      </a>\n    </div>\n  </script>\n\n  <div ng-hide=\"inDashboard\" class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div ng-hide=\"inDashboard\" class=\"wiki logbar\" ng-controller=\"Wiki.NavBarController\">\n    <div class=\"wiki logbar-container\">\n      <ul class=\"nav nav-tabs\">\n        <li ng-show=\"branches.length || branch\" class=\"dropdown\">\n          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"\n             title=\"The branch to view\">\n            {{branch || \'branch\'}}\n            <span class=\"caret\"></span>\n          </a>\n          <ul class=\"dropdown-menu\">\n            <li ng-repeat=\"otherBranch in branches\">\n              <a ng-href=\"{{branchLink(otherBranch)}}{{hash}}\"\n                 ng-hide=\"otherBranch === branch\"\n                 title=\"Switch to the {{otherBranch}} branch\"\n                 data-placement=\"bottom\">\n                {{otherBranch}}</a>\n            </li>\n          </ul>\n        </li>\n        <li ng-repeat=\"link in breadcrumbs\">\n          <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n        </li>\n        <li>\n          <a ng-href=\"{{historyLink}}{{hash}}\">History</a>\n        </li>\n        <li title=\"{{commitInfo.shortMessage}}\" class=\"active\">\n          <a class=\"commit-id\">{{commitInfo.commitHashText}}</a>\n        </li>\n        <li class=\"pull-right\">\n        <span class=\"commit-author\">\n          <i class=\"fa fa-user\"></i> {{commitInfo.author}}\n        </span>\n        </li>\n        <li class=\"pull-right\">\n          <span class=\"commit-date\">{{commitInfo.date | date: dateFormat}}</span>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"wiki-fixed row\">\n    <div class=\"commit-message\" title=\"{{commitInfo.shortMessage}}\">\n      {{commitInfo.trimmedMessage}}\n    </div>\n  </div>\n\n  <div class=\"row filter-header\">\n    <div class=\"col-md-12\">\n      <hawtio-filter ng-model=\"gridOptions.filterOptions.filterText\"\n                     css-class=\"input-xxlarge\"\n                     placeholder=\"Filter...\"></hawtio-filter>\n\n      <span class=\"pull-right\">&nbsp;</span>\n      <a class=\"btn btn-default pull-right\" ng-disabled=\"!gridOptions.selectedItems.length\" ng-click=\"diff()\"\n         title=\"Compare the selected versions of the files to see how they differ\">\n        <i class=\"fa fa-exchange\"></i>\n        Compare\n      </a>\n    </div>\n  </div>\n\n  <div class=\"form-horizontal\">\n    <div class=\"row\">\n      <table class=\"table-condensed table-striped\" hawtio-simple-table=\"gridOptions\"></table>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/wiki/html/commitDetail.html","<div ng-controller=\"Wiki.CommitDetailController\">\n  <div class=\"row\">\n    <div class=\"wiki source-nav-widget\">\n      <div class=\"inline-block app-path\" hawtio-breadcrumbs></div>\n      <div class=\"inline-block source-path\">\n        <ol class=\"breadcrumb\">\n          <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href) && !objectId}\'>\n            <a class=\"breadcrumb-link\" ng-href=\"{{link.href}}\">\n              <span class=\"contained c-medium\">{{link.name}}</span>\n            </a>\n          </li>\n          <li class=\"\">\n            <a ng-href=\"{{historyLink}}{{hash}}\">History</a>\n          </li>\n          <li class=\"active\">\n            <a title=\"{{commitDetail.commit_info.sha}}\">{{commitDetail.commit_info.sha | limitTo:7}}</a>\n          </li>\n        </ol>\n      </div>\n\n\n      <!--\n              <li class=\"pull-right\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"write\">\n                <a class=\"btn\" href=\"\" ng-disabled=\"!gridOptions.selectedItems.length\" ng-click=\"diff()\"\n                  title=\"Compare the selected versions of the files to see how they differ\">\n                  <i class=\"fa fa-exchange\"></i> Compare\n                </a>\n              </li>\n              <li class=\"pull-right\">\n                <a class=\"btn\" href=\"\" ng-disabled=\"!canRevert()\" ng-click=\"revert()\"\n                  title=\"Revert to this version of the file\" hawtio-show object-name=\"{{gitMBean}}\"\n                  method-name=\"revertTo\">\n                  <i class=\"fa fa-exchange\"></i> Revert\n                </a>\n              </li>\n      -->\n    </div>\n  </div>\n\n  <!--\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"control-group\">\n          <input class=\"col-md-12 search-query\" type=\"text\" ng-model=\"filterText\"\n                 placeholder=\"search\">\n        </div>\n      </div>\n    </div>\n  -->\n\n  <div class=\"row\" ng-show=\"commit\">\n    <div class=\"col-md-12\">\n      <div class=\"commit-summary-panel\">\n        <p class=\"commit-history-message bg-info\">{{commit.short_message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\" ng-show=\"commit\">\n    <div class=\"col-md-12\">\n      <table class=\"commit-table\">\n        <tr class=\"commit-row\">\n          <td class=\"commit-avatar\" title=\"{{commit.name}}\">\n            <img ng-show=\"commit.avatar_url\" src=\"{{commit.avatar_url}}\"/>\n          </td>\n          <td>\n            <p class=\"commit-details text-nowrap\">\n              <span class=\"commit-history-author\">{{commit.author}}</span>\n              <span class=\"\"> committed </span>\n              <span class=\"commit-date\" title=\"{{commit.$date | date:\'EEE, MMM d, yyyy : HH:mm:ss Z\'}}\">{{commit.$date.relative()}}</span>\n            </p>\n          </td>\n          <td>\n            commit\n            <span class=\"commit-sha\">{{commit.sha}}</span>\n          </td>\n          <td>\n            <a class=\"btn pull-right\" href=\"\" ng-click=\"revert()\"\n               title=\"Revert to this version of the file\">\n              <i class=\"fa fa-exchange\"></i> Revert\n            </a>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n\n  <div ng-repeat=\"diff in commitDetail.diffs | filter:filterText track by $index\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"diff-panel\">\n          <div class=\"diff-filename\">\n            <a href=\"{{diff.$viewLink}}\">{{diff.new_path}}</a>\n          </div>\n          <div class=\"diff-delta\">\n            <textarea id=\"source\" ui-codemirror=\"codeMirrorOptions\" ng-model=\"diff.diff\"></textarea>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/wiki/html/configuration.html","<div ng-hide=\"inDashboard\" class=\"logbar\" ng-controller=\"Wiki.NavBarController\">\n  <div class=\"wiki logbar-container\">\n    <ul class=\"nav nav-tabs\">\n      <li ng-show=\"branches.length || branch\" class=\"dropdown\">\n        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"\n           title=\"The branch to view\">\n          {{branch || \'branch\'}}\n          <span class=\"caret\"></span>\n        </a>\n        <ul class=\"dropdown-menu\">\n          <li ng-repeat=\"otherBranch in branches\">\n            <a ng-href=\"{{branchLink(otherBranch)}}{{hash}}\"\n               ng-hide=\"otherBranch === branch\"\n               title=\"Switch to the {{otherBranch}} branch\"\n               data-placement=\"bottom\">\n              {{otherBranch}}</a>\n          </li>\n        </ul>\n      </li>\n      <li ng-repeat=\"link in breadcrumbs\">\n        <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n      </li>\n      <li class=\"ng-scope\">\n        <a ng-href=\"{{startLink}}/configurations/{{pageId}}\">configuration</a>\n      </li>\n      <li class=\"ng-scope active\">\n        <a>pid</a>\n      </li>\n    </ul>\n  </div>\n</div>\n<div class=\"wiki-fixed\">\n  <div class=\"controller-section\" ng-controller=\"Osgi.PidController\">\n    <div ng-include src=\"\'plugins/osgi/html/pid-details.html\'\"></div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/configurations.html","<div ng-hide=\"inDashboard\" class=\"logbar\" ng-controller=\"Wiki.NavBarController\">\n  <div class=\"wiki logbar-container\">\n    <ul class=\"nav nav-tabs\">\n      <li ng-show=\"branches.length || branch\" class=\"dropdown\">\n        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"\n           title=\"The branch to view\">\n          {{branch || \'branch\'}}\n          <span class=\"caret\"></span>\n        </a>\n        <ul class=\"dropdown-menu\">\n          <li ng-repeat=\"otherBranch in branches\">\n            <a ng-href=\"{{branchLink(otherBranch)}}{{hash}}\"\n               ng-hide=\"otherBranch === branch\"\n               title=\"Switch to the {{otherBranch}} branch\"\n               data-placement=\"bottom\">\n              {{otherBranch}}</a>\n          </li>\n        </ul>\n      </li>\n      <li ng-repeat=\"link in breadcrumbs\">\n        <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n      </li>\n      <li class=\"ng-scope active\">\n        <a>configuration</a>\n      </li>\n    </ul>\n  </div>\n</div>\n\n<div class=\"wiki-fixed\">\n  <div ng-include src=\"\'plugins/osgi/html/configurations.html\'\"></div>\n</div>\n");
$templateCache.put("plugins/wiki/html/create.html","<div class=\"row\" ng-controller=\"Wiki.CreateController\">\n  <div class=\"row\">\n    <div hawtio-breadcrumbs></div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <form name=\"createForm\"\n            novalidate\n            class=\"form-horizontal no-bottom-margin\"\n            ng-submit=\"addAndCloseDialog(newDocumentName)\">\n        <fieldset>\n\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <h4>Create Document</h4>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <treecontrol class=\"tree-classic\"\n                 tree-model=\"createDocumentTree\"\n                 options=\"treeOptions\"\n                 on-selection=\"onCreateDocumentSelect(node)\">\n                 {{node.name}}\n              </treecontrol>\n              <!--\n              <div hawtio-tree=\"createDocumentTree\"\n                     hideRoot=\"true\"\n                     onSelect=\"onCreateDocumentSelect\"\n                     activateNodes=\"createDocumentTreeActivations\"></div>\n-->\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"row\">\n                <div class=\"well\">\n                  {{selectedCreateDocumentTemplate.tooltip}}\n                </div>\n              </div>\n              <div class=\"row\">\n                <div ng-show=\"fileExists.exists\" class=\"alert\">\n                  Please choose a different name as <b>{{fileExists.name}}</b> already exists\n                </div>\n                <div ng-show=\"fileExtensionInvalid\" class=\"alert\">\n                  {{fileExtensionInvalid}}\n                </div>\n                <div ng-show=\"!createForm.$valid\" class=\"alert\">\n                  {{selectedCreateDocumentTemplateInvalid}}\n                </div>\n\n                <div class=\"form-group\">\n                  <label class=\"col-sm-2 control-label\" for=\"fileName\">Name: </label>\n                  <div class=\"col-sm-10\">\n                    <input name=\"fileName\" id=\"fileName\"\n                           class=\"form-control\"\n                           type=\"text\"\n                           ng-pattern=\"selectedCreateDocumentTemplateRegex\"\n                           ng-model=\"newDocumentName\"\n                           placeholder=\"{{selectedCreateDocumentTemplate.exemplar}}\">\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div simple-form data=\"formSchema\" entity=\"formData\" onSubmit=\"generate()\"></div>\n              </div>\n              <div class=\"row\">\n                <input class=\"btn btn-primary add pull-right\"\n                       type=\"submit\"\n                       ng-disabled=\"!selectedCreateDocumentTemplate.exemplar || !createForm.$valid\"\n                       value=\"Create\">\n                <span class=\"pull-right\">&nbsp;</span>\n                <button class=\"btn btn-warning cancel pull-right\" type=\"button\" ng-click=\"cancel()\">Cancel</button>\n              </div>\n            </div>\n            <div class=\"col-md-2\">\n            </div>\n          </div>\n        </fieldset>\n      </form>\n    </div>\n  </div>\n\n</div>\n");
$templateCache.put("plugins/wiki/html/createPage.html","<div ng-controller=\"Wiki.EditController\">\n  <div class=\"logbar\" ng-controller=\"Wiki.NavBarController\">\n\n    <div class=\"wiki logbar-container\">\n\n      <ul class=\"connected nav nav-tabs\">\n        <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href)}\'>\n          <a ng-href=\"{{link.href}}{{hash}}\">\n            {{link.name}}\n          </a>\n        </li>\n\n        <li class=\"pull-right\">\n\n          <a href=\"\" id=\"cancelButton\" ng-click=\"cancel()\"\n                  class=\"pull-right\"\n                  title=\"Discards any updates\">\n            <i class=\"fa fa-remove\"></i> Cancel\n          </a>\n        </li>\n\n        <li class=\"pull-right\">\n          <a href=\"\" id=\"saveButton\" ng-show=\"isValid()\" ng-click=\"create()\"\n                  class=\"pull-right\"\n                  title=\"Creates this page and saves it in the wiki\">\n            <i class=\"fa fa-file-o\"></i> Create\n          </a>\n        </li>\n\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"wiki-fixed form-horizontal\">\n    <div class=\"control-group\">\n      <input type=\"text\" ng-model=\"fileName\" placeholder=\"File name\" class=\"col-md-12\"/>\n    </div>\n    <div class=\"control-group\">\n      <div ng-include=\"sourceView\" class=\"editor-autoresize\"></div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/dozerMappings.html","<div class=\"wiki-fixed\" ng-controller=\"Wiki.DozerMappingsController\">\n  <div class=\"logbar\" ng-controller=\"Wiki.NavBarController\">\n    <div class=\"wiki logbar-container\">\n      <ul class=\"nav nav-tabs connected\">\n        <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href)}\'>\n          <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n        </li>\n\n        <!--\n                <li class=\"pull-right\">\n                  <a ng-href=\"{{editLink()}}{{hash}}\" ng-hide=\"!editLink()\" title=\"Edit this camel configuration\"\n                     data-placement=\"bottom\">\n                    <i class=\"fa fa-edit\"></i> Edit</a></li>\n                <li class=\"pull-right\" ng-show=\"sourceLink()\">\n        -->\n        <li class=\"pull-right\">\n          <a href=\"\" id=\"saveButton\" ng-disabled=\"!isValid()\" ng-click=\"save()\"\n             ng-class=\"{\'nav-primary\' : modified}\"\n             title=\"Saves the Mappings document\">\n            <i class=\"fa fa-save\"></i> Save</a>\n        </li>\n        <li class=\"pull-right\">\n          <a href=\"\" id=\"cancelButton\" ng-click=\"cancel()\"\n             title=\"Discards any updates\">\n            <i class=\"fa fa-remove\"></i> Cancel</a>\n        </li>\n\n        <li class=\"pull-right\">\n          <a ng-href=\"{{sourceLink()}}\" title=\"View source code\"\n             data-placement=\"bottom\">\n            <i class=\"fa fa-file-o\"></i> Source</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"tabbable hawtio-form-tabs\" ng-model=\"tab\" ng-hide=\"missingContainer\">\n\n    <div class=\"tab-pane\" title=\"Mappings\">\n\n      <div class=\"row\">\n        <div class=\"col-md-12 centered spacer\">\n          <select class=\"no-bottom-margin\" ng-model=\"selectedMapping\" ng-options=\"m.map_id for m in mappings\"></select>\n          <button class=\"btn\"\n                  ng-click=\"addMapping()\"\n                  title=\"Add mapping\">\n            <i class=\"fa fa-plus\"></i>\n          </button>\n          <button class=\"btn\"\n                  ng-click=\"deleteDialog = true\"\n                  title=\"Delete mapping\">\n            <i class=\"fa fa-minus\"></i>\n          </button>\n          &nbsp;\n          &nbsp;\n          <label class=\"inline-block\" for=\"map_id\">Map ID: </label>\n          <input id=\"map_id\" type=\"text\" class=\"input-xxlarge no-bottom-margin\" ng-model=\"selectedMapping.map_id\">\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <!-- \"From\" class header -->\n        <div class=\"col-md-5\">\n          <div class=\"row\">\n            <input type=\"text\" class=\"col-md-12\"\n                   ng-model=\"aName\"\n                   typeahead=\"title for title in classNames($viewValue) | filter:$viewValue\"\n                   typeahead-editable=\"true\" title=\"Java classname for class \'A\'\"\n                   placeholder=\"Java classname for class \'A\'\">\n          </div>\n          <div class=\"row\" ng-show=\"selectedMapping.class_a.error\">\n            <div class=\"alert alert-error\">\n              <div class=\"expandable closed\">\n                <div class=\"title\">\n                  <i class=\"expandable-indicator\"></i> Failed to load properties for {{selectedMapping.class_a.value}} due to {{selectedMapping.class_a.error.type}}\n                </div>\n                <div class=\"expandable-body well\">\n                  <div ng-bind-html-unsafe=\"formatStackTrace(selectedMapping.class_a.error.stackTrace)\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col-md-2 centered\">\n          <button class=\"btn\" ng-click=\"doReload()\" ng-disabled=\"disableReload()\"><i class=\"fa fa-refresh\"></i> Reload</button>\n        </div>\n\n        <!-- \"To\" class header -->\n        <div class=\"col-md-5\">\n          <div class=\"row\">\n            <input type=\"text\" class=\"col-md-12\"\n                   ng-model=\"bName\"\n                   typeahead=\"title for title in classNames($viewValue) | filter:$viewValue\"\n                   typeahead-editable=\"true\" title=\"Java classname for class \'B\'\"\n                   placeholder=\"Java classname for class \'B\'\">\n          </div>\n          <div class=\"row\" ng-show=\"selectedMapping.class_b.error\">\n            <div class=\"alert alert-error\">\n              <div class=\"expandable closed\">\n                <div class=\"title\">\n                  <i class=\"expandable-indicator\"></i> Failed to load properties for {{selectedMapping.class_b.value}} due to {{selectedMapping.class_b.error.type}}\n                </div>\n                <div class=\"expandable-body well\">\n                  <div ng-bind-html-unsafe=\"formatStackTrace(selectedMapping.class_b.error.stackTrace)\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <script type=\"text/ng-template\" id=\"property.html\">\n        <span class=\"jsplumb-node dozer-mapping-node\"\n              id=\"{{field.id}}\"\n              anchors=\"{{field.anchor}}\"\n              field-path=\"{{field.path}}\">\n          <strong>{{field.displayName}}</strong> : <span class=\"typeName\">{{field.typeName}}</span>\n        </span>\n        <ul>\n          <li ng-repeat=\"field in field.properties\"\n              ng-include=\"\'property.html\'\"></li>\n        </ul>\n      </script>\n\n\n      <script type=\"text/ng-template\" id=\"pageTemplate.html\">\n        <div hawtio-jsplumb draggable=\"false\" layout=\"false\" timeout=\"500\">\n\n          <!-- \"from\" class -->\n          <div class=\"col-md-6\">\n            <div class=\"row\" ng-hide=\"selectedMapping.class_a.error\">\n              <ul class=\"dozer-mappings from\">\n                <li ng-repeat=\"field in selectedMapping.class_a.properties\"\n                    ng-include=\"\'property.html\'\"></li>\n              </ul>\n            </div>\n          </div>\n\n\n          <!-- \"to\" class -->\n          <div class=\"col-md-6\">\n            <div class=\"row\" ng-hide=\"selectedMapping.class_b.error\">\n              <ul class=\"dozer-mappings to\">\n                <li ng-repeat=\"field in selectedMapping.class_b.properties\"\n                    ng-include=\"\'property.html\'\"></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </script>\n      <div class=\"row\" compile=\"main\"></div>\n\n    </div>\n\n    <div class=\"tab-pane\" title=\"Tree\">\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"nav nav-pills\">\n            <li>\n              <a href=\'\' title=\"Add a new mapping between two classes\" ng-click=\"addMapping()\" data-placement=\"bottom\">\n                <i class=\"fa fa-plus\"></i> Class</a></li>\n            <li>\n              <a href=\'\' title=\"Add new mappings between fields in these classes\" ng-disable=\"!selectedMapping\" ng-click=\"addField()\" data-placement=\"bottom\">\n                <i class=\"fa fa-plus\"></i> Field</a></li>\n            <li>\n              <a href=\'\' title=\"Deletes the selected item\" ng-disabled=\"!canDelete()\" ng-click=\"deleteDialog = true\" data-placement=\"bottom\">\n                <i class=\"fa fa-remove\"></i> Delete</a></li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div id=\"tree-container\" class=\"col-md-4\">\n          <div hawtio-tree=\"mappingTree\" onselect=\"onNodeSelect\" onDragEnter=\"onNodeDragEnter\" onDrop=\"onNodeDrop\"\n               onRoot=\"onRootTreeNode\"\n               hideRoot=\"true\"></div>\n        </div>\n\n        <div class=\"col-md-8\">\n          <div ng-include=\"propertiesTemplate\"></div>\n        </div>\n      </div>\n\n      <div hawtio-confirm-dialog=\"deleteDialog\"\n           ok-button-text=\"Delete\"\n           on-ok=\"removeNode()\">\n        <div class=\"dialog-body\">\n          <p>You are about to delete the selected {{selectedDescription}}\n          </p>\n          <p>This operation cannot be undone so please be careful.</p>\n        </div>\n      </div>\n\n      <div class=\"modal-large\">\n        <div modal=\"addDialog.show\" close=\"addDialog.close()\" ng-options=\"addDialog.options\">\n          <form class=\"form-horizontal no-bottom-margin\" ng-submit=\"addAndCloseDialog()\">\n            <div class=\"modal-header\"><h4>Add Fields</h4></div>\n            <div class=\"modal-body\">\n              <table class=\"\">\n                <tr>\n                  <th>From</th>\n                  <th></th>\n                  <th>To</th>\n                  <th>Exclude</th>\n                </tr>\n                <tr ng-repeat=\"unmapped in unmappedFields\">\n                  <td>\n                    {{unmapped.fromField}}\n                  </td>\n                  <td>-></td>\n                  <td>\n                    <input type=\"text\" ng-model=\"unmapped.toField\" ng-change=\"onUnmappedFieldChange(unmapped)\"\n                           typeahead=\"title for title in toFieldNames($viewValue) | filter:$viewValue\" typeahead-editable=\'true\'\n                           title=\"The field to map to\"/>\n                  </td>\n                  <td>\n                    <input type=\"checkbox\" ng-model=\"unmapped.exclude\" ng-click=\"onUnmappedFieldChange(unmapped)\"\n                           title=\"Whether or not the field should be excluded\"/>\n                  </td>\n                </tr>\n              </table>\n            </div>\n            <div class=\"modal-footer\">\n              <input id=\"submit\" class=\"btn btn-primary add\" type=\"submit\" ng-disabled=\"!unmappedFieldsHasValid\"\n                     value=\"Add\">\n              <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"addDialog.close()\">Cancel</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n\n  </div>\n\n  <div class=\"jumbotron\" ng-show=\"missingContainer\">\n    <p>You cannot edit the dozer mapping file as there is no container running for the profile <b>{{profileId}}</b>.</p>\n\n    <p>\n      <a class=\"btn btn-primary btn-lg\"\n         href=\"#/fabric/containers/createContainer?profileIds={{profileId}}&versionId={{versionId}}\">\n        Create a container for: <strong>{{profileId}}</strong>\n      </a>\n    </p>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/dozerPropertiesEdit.html","<div simple-form name=\"formEditor\" entity=\'dozerEntity\' data=\'nodeModel\' schema=\"schema\"></div>\n");
$templateCache.put("plugins/wiki/html/editPage.html","<div ng-controller=\"Wiki.EditController\">\n\n  <div class=\"inline-block app-path\" hawtio-breadcrumbs></div>\n  <div class=\"inline-block source-path\" ng-controller=\"Wiki.NavBarController\">\n    <ol class=\"breadcrumb\">\n      <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href)}\'>\n        <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n      </li>\n\n    </ol>\n  </div>\n\n  <ul class=\"pull-right nav nav-tabs\">\n    <li class=\"pull-right\">\n      <a id=\"saveButton\"\n         href=\"\"\n         ng-disabled=\"canSave()\"\n         ng-click=\"save()\"\n         title=\"Saves the updated wiki page\">\n        <i class=\"fa fa-save\"></i> Save</a>\n    </li>\n    <li class=\"pull-right\">\n      <a id=\"cancelButton\"\n         href=\"\"\n         ng-click=\"cancel()\"\n         title=\"Discards any updates\">\n        <i class=\"fa fa-remove\"></i> Cancel</a>\n    </li>\n  </ul>\n\n\n  <div class=\"wiki-fixed form-horizontal\">\n    <div class=\"control-group editor-autoresize\">\n      <div ng-include=\"sourceView\" class=\"editor-autoresize\"></div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/formEdit.html","<div simple-form name=\"formEditor\" entity=\'formEntity\' data=\'formDefinition\'></div>\n");
$templateCache.put("plugins/wiki/html/formTable.html","<div ng-controller=\"Wiki.FormTableController\">\n  <div class=\"logbar\" ng-controller=\"Wiki.NavBarController\">\n    <div class=\"wiki logbar-container\">\n      <ul class=\"nav nav-tabs\">\n        <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href)}\'>\n          <a ng-href=\"{{link.href}}{{hash}}\">{{link.name}}</a>\n        </li>\n\n        <li class=\"pull-right\">\n          <a ng-href=\"{{editLink()}}{{hash}}\" ng-hide=\"!editLink()\" title=\"Edit this page\"\n             data-placement=\"bottom\">\n            <i class=\"fa fa-edit\"></i> Edit</a></li>\n        <li class=\"pull-right\">\n          <a ng-href=\"{{historyLink}}{{hash}}\" ng-hide=\"!historyLink\" title=\"View the history of this file\"\n             data-placement=\"bottom\">\n            <i class=\"fa fa-comments-alt\"></i> History</a></li>\n        <li class=\"pull-right\">\n          <a ng-href=\"{{createLink()}}{{hash}}\" title=\"Create new page\"\n             data-placement=\"bottom\">\n            <i class=\"fa fa-plus\"></i> Create</a></li>\n        <li class=\"pull-right\" ng-show=\"sourceLink()\">\n          <a ng-href=\"{{sourceLink()}}\" title=\"View source code\"\n             data-placement=\"bottom\">\n            <i class=\"fa fa-file-o\"></i> Source</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"wiki-fixed row\">\n    <input class=\"search-query col-md-12\" type=\"text\" ng-model=\"gridOptions.filterOptions.filterText\"\n           placeholder=\"Filter...\">\n  </div>\n\n  <div class=\"form-horizontal\">\n    <div class=\"row\">\n      <div ng-include=\"tableView\"></div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/formTableDatatable.html","<div class=\"gridStyle\" hawtio-datatable=\"gridOptions\"></div>\n");
$templateCache.put("plugins/wiki/html/formView.html","<div simple-form name=\"formViewer\" mode=\'view\' entity=\'formEntity\' data=\'formDefinition\'></div>\n");
$templateCache.put("plugins/wiki/html/gitPreferences.html","<div title=\"Git\" ng-controller=\"Wiki.GitPreferences\">\n  <div hawtio-form-2=\"config\" entity=\"entity\"></div>\n</div>\n");
$templateCache.put("plugins/wiki/html/history.html","<div ng-controller=\"Wiki.HistoryController\">\n  <div class=\"row\">\n    <div class=\"wiki source-nav-widget\">\n      <div class=\"inline-block app-path\" hawtio-breadcrumbs></div>\n      <div class=\"inline-block source-path\">\n        <ol class=\"breadcrumb\">\n          <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href) && !objectId}\'>\n            <a class=\"breadcrumb-link\" ng-href=\"{{link.href}}\">\n              <span class=\"contained c-medium\">{{link.name}}</span>\n            </a>\n          </li>\n          <li class=\"active\">\n            <a href=\"\">History</a>\n          </li>\n        </ol>\n      </div>\n      <ul class=\"pull-right nav nav-tabs\">\n        <li class=\"pull-right\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"write\">\n          <a class=\"btn\" href=\"\" ng-disabled=\"!gridOptions.selectedItems.length\" ng-click=\"diff()\"\n            title=\"Compare the selected versions of the files to see how they differ\">\n            <i class=\"fa fa-exchange\"></i> Compare\n          </a>\n        </li>\n        <li class=\"pull-right\">\n          <a class=\"btn\" href=\"\" ng-disabled=\"!canRevert()\" ng-click=\"revert()\"\n            title=\"Revert to this version of the file\" hawtio-show object-name=\"{{gitMBean}}\"\n            method-name=\"revertTo\">\n            <i class=\"fa fa-exchange\"></i> Revert\n          </a>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"control-group\">\n        <input class=\"col-md-12 search-query\" type=\"text\" ng-model=\"gridOptions.filterOptions.filterText\"\n               placeholder=\"search\">\n      </div>\n    </div>\n  </div>\n\n  <div commit-history-panel></div>\n\n</div>\n");
$templateCache.put("plugins/wiki/html/historyPanel.html","<div ng-controller=\"Wiki.HistoryController\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"commit-table\">\n        <tr class=\"commit-row\" ng-repeat=\"commit in logs | filter:filterTemplates track by $index\">\n          <td class=\"commit-avatar\" title=\"{{commit.name}}\">\n              <img ng-show=\"commit.avatar_url\" src=\"{{commit.avatar_url}}\"/>\n            </div>\n          </td>\n          <td>\n            <p class=\"commit-history-message\">{{commit.short_message}}</p>\n\n            <p class=\"commit-details text-nowrap\">\n              <span class=\"commit-history-author\">{{commit.author}}</span>\n              <span class=\"\"> committed </span>\n              <span class=\"commit-date\" title=\"{{commit.$date | date:\'EEE, MMM d, yyyy : HH:mm:ss Z\'}}\">{{commit.$date.relative()}}</span>\n            </p>\n          </td>\n          <td class=\"commit-links\">\n            <a class=\"text-nowrap btn\" ng-href=\"{{commit.commitLink}}{{hash}}\" title=\"{{commit.sha}}\">\n              {{commit.sha | limitTo:7}}\n              <i class=\"fa fa-arrow-circle-right\"></i></a>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/layoutWiki.html","<div class=\"row\" ng-controller=\"Wiki.TopLevelController\">\n  <div ng-view></div>\n</div>\n\n");
$templateCache.put("plugins/wiki/html/overviewDashboard.html","<div ng-controller=\"Wiki.OverviewDashboard\">\n  <div class=\"gridster\">\n    <ul id=\"widgets\" hawtio-dashboard></ul>\n  </div>\n</div>\n\n");
$templateCache.put("plugins/wiki/html/projectCommitsPanel.html","<div ng-controller=\"Wiki.HistoryController\">\n  <div ng-hide=\"fetched\">\n    <div class=\"align-center\">\n      <div class=\"spinner spinner-lg\"></div>\n    </div>\n  </div>\n  <div ng-show=\"fetched\">\n    <div ng-hide=\"logs.length\">\n      <div class=\"align-center\">\n        <h4>No Commit History</h4>\n      </div>\n    </div>\n    <div ng-show=\"logs.length\">\n      <div commit-history-panel></div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/sourceEdit.html","<div id=\"source\" hawtio-editor=\"entity.source\"></div>\n");
$templateCache.put("plugins/wiki/html/sourceView.html","<div id=\"source\" hawtio-editor=\"source\" read-only=\"true\"></div>\n");
$templateCache.put("plugins/wiki/html/viewBook.html","<div ng-controller=\"Wiki.ViewController\">\n\n  <script type=\"text/ng-template\" id=\"fileCellTemplate.html\">\n    <div class=\"ngCellText\"\n         title=\"{{fileName(row.entity)}} - Last Modified: {{row.entity.lastModified | date:\'medium\'}}, Size: {{row.entity.length}}\">\n      <a href=\"{{childLink(row.entity)}}\" class=\"file-name\">\n        <span class=\"file-icon\"\n              ng-class=\"fileClass(row.entity)\"\n              ng-bind-html-unsafe=\"fileIconHtml(row)\">\n\n              </span>{{fileName(row.entity)}}\n      </a>\n    </div>\n  </script>\n\n  <script type=\"text/ng-template\" id=\"fileColumnTemplate.html\">\n\n    <div class=\"ngHeaderSortColumn {{col.headerClass}}\"\n         ng-style=\"{\'cursor\': col.cursor}\"\n         ng-class=\"{ \'ngSorted\': !noSortVisible }\">\n\n      <div class=\"ngHeaderText\" ng-hide=\"pageId === \'/\'\">\n        <a ng-href=\"{{parentLink()}}\"\n           class=\"wiki-file-list-up\"\n           title=\"Open the parent folder\">\n          <i class=\"fa fa-level-up\"></i> Up a directory\n        </a>\n      </div>\n    </div>\n\n  </script>\n\n  <ng-include src=\"\'plugins/wiki/html/viewNavBar.html\'\"></ng-include>\n\n  <div class=\"wiki-fixed form-horizontal\">\n    <div class=\"row\">\n      <div class=\"tocify\" wiki-href-adjuster>\n        <!-- TODO we maybe want a more flexible way to find the links to include than the current link-filter -->\n        <div hawtio-toc-display get-contents=\"getContents(filename, cb)\"\n             html=\"html\" link-filter=\"[file-extension]\">\n        </div>\n      </div>\n      <div class=\"toc-content\" id=\"toc-content\"></div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/wiki/html/viewNavBar.html","<div ng-hide=\"inDashboard\" class=\"wiki source-nav-widget\" ng-controller=\"Wiki.NavBarController\">\n  <div hawtio-tabs></div>\n  <div class=\"inline-block source-path\">\n    <ol class=\"breadcrumb\">\n      <li ng-repeat=\"link in breadcrumbs\" ng-class=\'{active : isActive(link.href) && !objectId}\'>\n        <a class=\"breadcrumb-link\" ng-href=\"{{link.href}}\">\n          <span class=\"contained c-medium\">{{link.name}}</span>\n        </a>\n      </li>\n      <li ng-show=\"objectId\">\n        <a ng-href=\"{{historyLink}}{{hash}}\">History</a>\n      </li>\n      <li ng-show=\"objectId\" class=\"active\">\n        <a>{{objectId}}</a>\n      </li>\n    </ol>\n  </div>\n  <ul class=\"pull-right nav nav-tabs\">\n\n    <li class=\"pull-right dropdown\">\n      <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n        <i class=\"fa fa-ellipsis-v\"></i>\n      </a>\n      <ul class=\"dropdown-menu\">\n        <li ng-show=\"sourceLink()\">\n          <a ng-href=\"{{sourceLink()}}\" title=\"View source code\"\n            data-placement=\"bottom\">\n            <i class=\"fa fa-file-o\"></i> Source</a>\n        </li>\n        <li>\n          <a ng-href=\"{{historyLink}}{{hash}}\" ng-hide=\"!historyLink\" title=\"View the history of this file\"\n            data-placement=\"bottom\">\n            <i class=\"fa fa-comments-alt\"></i> History</a>\n        </li>\n        <!--\n        <li class=\"divider\">\n        </li>\n        -->\n        <li ng-hide=\"gridOptions.selectedItems.length !== 1\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"rename\">\n          <a ng-click=\"openRenameDialog()\"\n            title=\"Rename the selected document\"\n            data-placement=\"bottom\">\n            <i class=\"fa fa-adjust\"></i> Rename</a>\n        </li>\n        <li ng-hide=\"!gridOptions.selectedItems.length\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"rename\">\n          <a ng-click=\"openMoveDialog()\"\n            title=\"move the selected documents to a new folder\"\n            data-placement=\"bottom\">\n            <i class=\"fa fa-move\"></i> Move</a>\n        </li>\n        <!--\n        <li class=\"divider\">\n        </li>\n        -->\n        <li ng-hide=\"!gridOptions.selectedItems.length\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"remove\">\n          <a ng-click=\"openDeleteDialog()\"\n            title=\"Delete the selected document(s)\"\n            data-placement=\"bottom\">\n            <i class=\"fa fa-remove\"></i> Delete</a>\n        </li>\n        <li class=\"divider\" ng-show=\"childActions.length\">\n        </li>\n        <li ng-repeat=\"childAction in childActions\">\n          <a ng-click=\"childAction.doAction()\"\n            title=\"{{childAction.title}}\"\n            data-placement=\"bottom\">\n            <i class=\"{{childAction.icon}}\"></i> {{childAction.name}}</a>\n        </li>\n      </ul>\n    </li>\n    <li class=\"pull-right\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"write\">\n      <a ng-href=\"{{editLink()}}{{hash}}\" ng-hide=\"!editLink()\" title=\"Edit this page\"\n        data-placement=\"bottom\">\n        <i class=\"fa fa-edit\"></i> Edit</a>\n    </li>\n    <li class=\"pull-right\" hawtio-show object-name=\"{{gitMBean}}\" method-name=\"write\">\n      <a ng-href=\"{{createLink()}}{{hash}}\"\n        title=\"Create new page\"\n        data-placement=\"bottom\">\n        <i class=\"fa fa-plus\"></i> Create</a>\n    </li>\n\n    <li class=\"pull-right branch-menu\" ng-show=\"branches.length || branch\">\n      <div hawtio-drop-down=\"branchMenuConfig\"></div>\n    </li>\n\n    <li class=\"pull-right view-style\">\n      <div class=\"btn-group\" \n        ng-hide=\"!children || profile\">\n        <a class=\"btn btn-sm\"\n          ng-disabled=\"mode == ViewMode.List\"\n          href=\"\" \n          ng-click=\"setViewMode(ViewMode.List)\">\n          <i class=\"fa fa-list\"></i></a>\n        <a class=\"btn btn-sm\" \n          ng-disabled=\"mode == ViewMode.Icon\"\n          href=\"\" \n          ng-click=\"setViewMode(ViewMode.Icon)\">\n          <i class=\"fa fa-th-large\"></i></a>\n      </div>\n    </li>\n<!--\n      <li class=\"pull-right\">\n        <a href=\"\" ng-hide=\"children || profile\" title=\"Add to dashboard\" ng-href=\"{{createDashboardLink()}}\"\n           data-placement=\"bottom\">\n          <i class=\"fa fa-share\"></i>\n        </a>\n      </li>\n-->\n    </ul>\n</div>\n\n\n");
$templateCache.put("plugins/wiki/html/viewPage.html","<div ng-controller=\"Wiki.ViewController\">\n\n  <script type=\"text/ng-template\" id=\"fileCellTemplate.html\">\n    <div class=\"ngCellText\"\n         title=\"{{fileName(row.entity)}} - Last Modified: {{row.entity.lastModified | date:\'medium\'}}, Size: {{row.entity.size}}\">\n      <a href=\"{{childLink(row.entity)}}\" class=\"file-name\" hawtio-file-drop=\"{{row.entity.fileName}}\" download-url=\"{{row.entity.downloadURL}}\">\n        <span class=\"file-icon\"\n              ng-class=\"fileClass(row.entity)\"\n              compile=\"fileIconHtml(row)\">\n        </span>{{fileName(row.entity)}}\n      </a>\n    </div>\n  </script>\n\n  <script type=\"text/ng-template\" id=\"fileColumnTemplate.html\">\n    <div class=\"ngHeaderSortColumn {{col.headerClass}}\"\n         ng-style=\"{\'cursor\': col.cursor}\"\n         ng-class=\"{ \'ngSorted\': !noSortVisible }\">\n      <div class=\"ngHeaderText\" ng-hide=\"pageId === \'/\'\">\n        <a ng-href=\"{{parentLink()}}\"\n           class=\"wiki-file-list-up\"\n           title=\"Open the parent folder\">\n          <i class=\"fa fa-level-up\"></i> Up a directory\n        </a>\n      </div>\n    </div>\n  </script>\n\n  <script type=\"text/ng-template\" id=\"imageTemplate.html\">\n    <img http-src=\"{{imageUrl}}\" media-type=\"{{mediaType}}\">\n  </script>\n\n  <ng-include src=\"\'plugins/wiki/html/viewNavBar.html\'\"></ng-include>\n\n  <div class=\"wiki-fixed\">\n    <div ng-hide=\"!showAppHeader\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div kubernetes-json=\"kubernetesJson\"></div>\n        </div>\n      </div>\n    </div>\n\n    <!-- showing a directory -->\n    <div ng-show=\"directory\">\n      <div class=\"row\" >\n        <div class=\"col-md-12 wiki-icon-view-header\">\n          <h5>Directories and Files</h5>\n        </div>\n      </div>\n\n      <!-- Icon View -->\n      <div class=\"row\" ng-show=\"mode == ViewMode.Icon\">\n        <div class=\"col-md-12\" ng-controller=\"Wiki.FileDropController\">\n          <div class=\"wiki-icon-view\" nv-file-drop nv-file-over uploader=\"uploader\" over-class=\"ready-drop\">\n            <div class=\"column-box heigh-auto mouse-pointer well\"\n                 ng-repeat=\"child in children track by $index\"\n                 ng-class=\"isInGroup(gridOptions.selectedItems, child, \'selected\', \'\')\"\n                 ng-click=\"toggleSelectionFromGroup(gridOptions.selectedItems, child)\">\n              <div class=\"row\">\n                <div class=\"col-md-2\" hawtio-file-drop=\"{{child.fileName}}\" download-url=\"{{child.downloadURL}}\">\n                    <span class=\"app-logo\" ng-class=\"fileClass(child)\" compile=\"fileIconHtml(child)\"></span>\n                </div>\n                <div class=\"col-md-10\">\n                  <h3>\n                    <a href=\"{{childLink(child)}}\">{{child.displayName || child.name}}</a>\n                  </h3>\n                </div>\n              </div>\n              <div class=\"row\" ng-show=\"child.summary\">\n                <div class=\"col-md-12\">\n                  <p compile=\"marked(child.summary)\"></p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- end Icon view -->\n\n      <!-- start List view -->\n      <div class=\"row\" ng-show=\"mode == ViewMode.List\">\n        <div class=\"col-md-12\"  ng-controller=\"Wiki.FileDropController\">\n\n          <div class=\"wiki-list-view\" nv-file-drop nv-file-over uploader=\"uploader\" over-class=\"ready-drop\">\n            <div class=\"column-box heigh-auto mouse-pointer well\"\n                 ng-repeat=\"child in children track by $index\"\n                 ng-class=\"isInGroup(gridOptions.selectedItems, child, \'selected\', \'\')\"\n                 ng-click=\"toggleSelectionFromGroup(gridOptions.selectedItems, child)\">\n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <h3>\n                    <span class=\"app-logo\" ng-class=\"fileClass(child)\" compile=\"fileIconHtml(child)\"></span>\n                    <a href=\"{{childLink(child)}}\">{{child.displayName || child.name}}</a>\n                  </h3>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- end List view -->\n\n      <div ng-hide=\"!showProfileHeader\">\n        <div class=\"row\">        \n          <div class=\"col-md-12\">\n            <div fabric-profile-details version-id=\"versionId\" profile-id=\"profileId\"></div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n    <!-- end showing a directory -->\n\n    <div ng-show=\"html\" wiki-href-adjuster wiki-title-linker>\n      <div class=\"row\" style=\"margin-left: 10px\">\n        <div class=\"col-md-12\">\n          <div compile=\"html\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div ng-include=\"sourceView\" class=\"editor-autoresize\"></div>\n</div>\n");
$templateCache.put("plugins/wiki/html/modal/deleteDialog.html","<div>\n  <form class=\"form-horizontal\" ng-submit=\"deleteAndCloseDialog()\">\n    <div class=\"modal-header\"><h4>Delete Document</h4></div>\n    <div class=\"modal-body\">\n      <div class=\"control-group\">\n        <p>You are about to delete\n          <ng-pluralize count=\"gridOptions.selectedItems.length\"\n                        when=\"{\'1\': \'this document!\', \'other\': \'these {} documents!\'}\">\n          </ng-pluralize>\n        </p>\n\n        <div ng-bind-html-unsafe=\"selectedFileHtml\"></div>\n        <p class=\"alert alert-danger\" ng-show=\"warning\" ng-bind-html-unsafe=\"warning\">\n        </p>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <input class=\"btn btn-primary\" type=\"submit\"\n             value=\"Delete\">\n      <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"close()\">Cancel</button>\n    </div>\n  </form>\n</div>\n");
$templateCache.put("plugins/wiki/html/modal/moveDialog.html","<div>\n    <form class=\"form-horizontal\" ng-submit=\"moveAndCloseDialog()\">\n    <div class=\"modal-header\"><h4>Move Document</h4></div>\n    <div class=\"modal-body\">\n      <div class=\"control-group\">\n        <label class=\"control-label\" for=\"moveFolder\">Folder</label>\n\n        <div class=\"controls\">\n          <input type=\"text\" id=\"moveFolder\" ng-model=\"move.moveFolder\"\n                 typeahead=\"title for title in folderNames($viewValue) | filter:$viewValue\" typeahead-editable=\'true\'>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <input class=\"btn btn-primary\" type=\"submit\"\n             ng-disabled=\"!move.moveFolder\"\n             value=\"Move\">\n      <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"close()\">Cancel</button>\n    </div>\n  </form>\n</div>");
$templateCache.put("plugins/wiki/html/modal/renameDialog.html","<div>\n  <form class=\"form-horizontal\" ng-submit=\"renameAndCloseDialog()\">\n    <div class=\"modal-header\"><h4>Rename Document</h4></div>\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\" for=\"renameFileName\">Name</label>\n\n          <div class=\"col-sm-10\">\n            <input type=\"text\" id=\"renameFileName\" ng-model=\"rename.newFileName\">\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <div ng-show=\"fileExists.exists\" class=\"alert\">\n            Please choose a different name as <b>{{fileExists.name}}</b> already exists\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <input class=\"btn btn-primary\" type=\"submit\"\n             ng-disabled=\"!fileName || fileExists.exists\"\n             value=\"Rename\">\n      <button class=\"btn btn-warning cancel\" type=\"button\" ng-click=\"close()\">Cancel</button>\n    </div>\n  </form>\n</div>\n");}]); hawtioPluginLoader.addModule("fabric8-console-templates");
